// game/socketHandler.js
// ======================================================================
// SOCKET HANDLER ("The Traffic Controller")
// Nhi·ªám v·ª•: L·∫Øng nghe, x√°c th·ª±c v√† ƒëi·ªÅu ph·ªëi t·∫•t c·∫£ c√°c s·ª± ki·ªán t·ª´ client.
// ƒê√¢y l√† c·∫ßu n·ªëi duy nh·∫•t gi·ªØa Client v√† Core Game Logic.
// ======================================================================

// Nh·∫≠p c√°c module c·∫ßn thi·∫øt
const gameLogic = require('./logic.js'); // "B·ªô N√£o" x·ª≠ l√Ω lu·∫≠t ch∆°i
const { ROLES } = require('./config.js');   // "S√°ch Lu·∫≠t" ch·ª©a th√¥ng tin v·ªÅ c√°c vai tr√≤


function initialize(io, rooms) {
    io.on('connection', (socket) => {
        // M·ªói khi c√≥ m·ªôt ng∆∞·ªùi ch∆°i m·ªõi m·ªü game tr√™n tr√¨nh duy·ªát, m·ªôt 'socket' m·ªõi s·∫Ω ƒë∆∞·ª£c t·∫°o ra.
        // T·∫•t c·∫£ c√°c s·ª± ki·ªán c·ªßa ng∆∞·ªùi ch∆°i ƒë√≥ s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b√™n trong h√†m n√†y.
        console.log(`[Connection] M·ªôt ng∆∞·ªùi ch∆°i ƒë√£ k·∫øt n·ªëi: ${socket.id}`);

        // ==========================================================
        // --- I. H√ÄM N·ªòI B·ªò (HELPER FUNCTIONS) ---
        // ==========================================================

        /**
         * H√†m ti·ªán √≠ch x·ª≠ l√Ω logic khi m·ªôt ng∆∞·ªùi ch∆°i tham gia ph√≤ng.
         * ƒê∆∞·ª£c d√πng chung cho c·∫£ 'createRoom' v√† 'joinRoom' ƒë·ªÉ tr√°nh l·∫∑p code.
         * @param {string} code - M√£ ph√≤ng ƒë·ªÉ tham gia.
         * @param {string} name - T√™n ng∆∞·ªùi ch∆°i.
         */
        function handleJoinRoom(code, name) {
            const room = rooms[code];
            if (!room) return socket.emit('roomError', `Ph√≤ng '${code}' kh√¥ng t·ªìn t·∫°i!`);
            if (room.gameState) return socket.emit('roomError', 'Cu·ªôc th√°m hi·ªÉm ƒë√£ b·∫Øt ƒë·∫ßu!');
            if (room.players.length >= room.maxPlayers) return socket.emit('roomError', 'ƒêo√†n ƒë√£ ƒë·ªß ng∆∞·ªùi!');

            const newPlayer = {
                id: socket.id,
                name: (name || `Th·ª£ SƒÉn ${room.players.length + 1}`).substring(0, 15).trim(),
                isBot: false,
                isReady: false // <-- TH√äM D√íNG N√ÄY
            };
            room.players.push(newPlayer);
            socket.join(code);
            io.to(code).emit('updatePlayerList', room.players, room.hostId);
            socket.emit('joinedRoom', { roomCode: code, hostId: room.hostId, myId: socket.id, players: room.players });
            console.log(`[Join] Ng∆∞·ªùi ch∆°i ${newPlayer.name} (${socket.id}) ƒë√£ v√†o ph√≤ng ${code}`);
        }

        // TH√äM M·ªöI: L·∫Øng nghe s·ª± ki·ªán khi ng∆∞·ªùi ch∆°i b·∫•m n√∫t S·∫µn s√†ng
        socket.on('playerReady', (roomCode) => {
            const room = rooms[roomCode];
            // Ch·ªâ x·ª≠ l√Ω khi ph√≤ng t·ªìn t·∫°i v√† game ch∆∞a b·∫Øt ƒë·∫ßu
            if (room && !room.gameState) {
                const player = room.players.find(p => p.id === socket.id);
                if (player) {
                    // ƒê·∫£o ng∆∞·ª£c tr·∫°ng th√°i s·∫µn s√†ng c·ªßa ng∆∞·ªùi ch∆°i (true -> false, false -> true)
                    player.isReady = !player.isReady;
                    // Th√¥ng b√°o cho t·∫•t c·∫£ m·ªçi ng∆∞·ªùi trong ph√≤ng v·ªÅ danh s√°ch ng∆∞·ªùi ch∆°i ƒë√£ c·∫≠p nh·∫≠t
                    io.to(roomCode).emit('updatePlayerList', room.players, room.hostId);
                }
            }
        });
	    socket.on('sendQuickChat', (data) => { // data: { roomCode, key, targetId }
    const room = rooms[data.roomCode];
    const sender = room?.players.find(p => p.id === socket.id);
    if (!sender) return;

    let message = '';
    const target = room.players.find(p => p.id === data.targetId);

    // X√¢y d·ª±ng tin nh·∫Øn ·ªü server ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n
    switch(data.key) {
        case 'suspect':
            if (target) message = `T√¥i nghi ng·ªù ${target.name}!`;
            break;
        case 'praise':
            message = `N∆∞·ªõc ƒëi hay l·∫Øm! üëç`;
            break;
        case 'hurry':
            message = `M·ªçi ng∆∞·ªùi ∆°i, nhanh l√™n n√†o! ‚è∞`;
            break;
    }

    if (message) {
        io.to(data.roomCode).emit('newMessage', {
            senderName: sender.name,
            message: message
        });
    }
});
        // ==========================================================
        // --- II. S·ª∞ KI·ªÜN QU·∫¢N L√ù PH√íNG CH·ªú (LOBBY EVENTS) ---
        // ==========================================================

        // L·∫Øng nghe s·ª± ki·ªán khi ng∆∞·ªùi ch∆°i mu·ªën t·∫°o ph√≤ng m·ªõi.
        socket.on('createRoom', data => {
            let code;
            // T·∫°o m·ªôt m√£ ph√≤ng ng·∫´u nhi√™n v√† ƒë·∫£m b·∫£o n√≥ ch∆∞a t·ªìn t·∫°i.
            do {
                code = Math.random().toString(36).substring(2, 6).toUpperCase();
            } while (rooms[code]);

            // Kh·ªüi t·∫°o ph√≤ng m·ªõi trong bi·∫øn 'rooms' to√†n c·ª•c.
            rooms[code] = {
                players: [],
                hostId: socket.id, // Ng∆∞·ªùi t·∫°o ph√≤ng l√† ch·ªß ph√≤ng
                maxPlayers: 12,
                gameState: null      // gameState = null nghƒ©a l√† game ch∆∞a b·∫Øt ƒë·∫ßu
            };
            console.log(`[Create] Ng∆∞·ªùi ch∆°i ${socket.id} ƒë√£ t·∫°o ph√≤ng ${code}`);
            // D√πng h√†m helper ƒë·ªÉ x·ª≠ l√Ω vi·ªác tham gia ph√≤ng.
            handleJoinRoom(code, data.name);
        });

        // L·∫Øng nghe s·ª± ki·ªán khi ng∆∞·ªùi ch∆°i mu·ªën tham gia ph√≤ng ƒë√£ c√≥.
        socket.on('joinRoom', data => {
            handleJoinRoom(data.roomCode?.trim().toUpperCase(), data.name);
        });

        // L·∫Øng nghe s·ª± ki·ªán khi ch·ªß ph√≤ng mu·ªën th√™m Bot.
        socket.on('addBot', roomCode => {
            const room = rooms[roomCode];
            // Ki·ªÉm tra: ph√≤ng ph·∫£i t·ªìn t·∫°i, ng∆∞·ªùi y√™u c·∫ßu ph·∫£i l√† ch·ªß ph√≤ng, v√† ph√≤ng ch∆∞a ƒë·∫ßy.
            if (room && socket.id === room.hostId && room.players.length < room.maxPlayers) {
                const personalities = ['aggressive', 'cautious', 'random'];
                const botPlayer = {
                    id: `bot-${Date.now()}`,
                    name: `AI ${room.players.length + 1}`,
                    isBot: true,
                    personality: personalities[Math.floor(Math.random() * personalities.length)]
                };
                room.players.push(botPlayer);
                io.to(roomCode).emit('updatePlayerList', room.players, room.hostId);
            }
        });
	    // TH√äM M·ªöI: L·∫Øng nghe s·ª± ki·ªán b·ªè phi·∫øu b·ªè qua Ph·ªëi h·ª£p
socket.on('voteSkipCoordination', (roomCode) => {
    const room = rooms[roomCode];
    if (room && room.gameState && room.gameState.phase === 'coordination') {
        // G·ªçi logic ƒë·ªÉ x·ª≠ l√Ω vi·ªác b·ªè phi·∫øu
        gameLogic.handleVoteToSkip(roomCode, socket.id, 'coordination', rooms, io);
    }
});

// TH√äM M·ªöI: L·∫Øng nghe s·ª± ki·ªán b·ªè phi·∫øu Ngh·ªâ ng∆°i
socket.on('voteSkipTwilight', (roomCode) => {
    const room = rooms[roomCode];
    if (room && room.gameState && room.gameState.phase === 'twilight') {
        gameLogic.handleVoteToSkip(roomCode, socket.id, 'twilight', rooms, io);
    }
});

        // L·∫Øng nghe s·ª± ki·ªán khi ch·ªß ph√≤ng mu·ªën ƒëu·ªïi m·ªôt ng∆∞·ªùi ch∆°i.
        socket.on('kickPlayer', (data) => {
    const room = rooms[data.roomCode];
    if (room && socket.id === room.hostId) {
        // N·∫øu l√† ng∆∞·ªùi ch∆°i th·∫≠t (socket t·ªìn t·∫°i)
        const targetSocket = io.sockets.sockets.get(data.playerId);
        if (targetSocket) {
            targetSocket.emit('kicked');
            targetSocket.leave(data.roomCode);
        }
        // N·∫øu l√† bot ho·∫∑c ng∆∞·ªùi ch∆°i th·∫≠t, ƒë·ªÅu x√≥a kh·ªèi danh s√°ch
        room.players = room.players.filter(p => p.id !== data.playerId);
        // N·∫øu game ƒëang ch·∫°y, c≈©ng x√≥a kh·ªèi gameState.players
        if (room.gameState) {
            room.gameState.players = room.gameState.players.filter(p => p.id !== data.playerId);
        }
        io.to(data.roomCode).emit('updatePlayerList', room.players, room.hostId);
    }
});

        // ==========================================================
        // --- III. S·ª∞ KI·ªÜN LU·ªíNG GAME (GAME FLOW EVENTS) ---
        // ==========================================================

        // L·∫Øng nghe s·ª± ki·ªán khi ch·ªß ph√≤ng b·∫Øt ƒë·∫ßu game.
        socket.on('startGame', (roomCode) => {
            const room = rooms[roomCode];
            // Ki·ªÉm tra: ph√≤ng ph·∫£i t·ªìn t·∫°i, ng∆∞·ªùi y√™u c·∫ßu l√† ch·ªß ph√≤ng, v√† c√≥ √≠t nh·∫•t 2 ng∆∞·ªùi ch∆°i.
            if (room && socket.id === room.hostId && room.players.length >= 2) {
                console.log(`[Start Game] Game b·∫Øt ƒë·∫ßu t·∫°i ph√≤ng ${roomCode}`);
                // G·ªçi "B·ªô N√£o" ƒë·ªÉ t·∫°o tr·∫°ng th√°i game.
                room.gameState = gameLogic.createGameState(room.players);

                // G·ª≠i vai tr√≤ ri√™ng t∆∞ cho t·ª´ng ng∆∞·ªùi ch∆°i.
                room.gameState.players.forEach(p => {
                    if (!p.isBot) {
                        const roleData = { ...ROLES[p.roleId], id: p.roleId };
                        // Th√™m th√¥ng tin ƒë·∫∑c bi·ªát cho S√°t Th·ªß.
                        if (p.roleId === 'ASSASSIN' && p.bountyTargetId) {
                            const target = room.gameState.players.find(t => t.id === p.bountyTargetId);
                            if (target) {
                                roleData.description += ` **M·ª•c ti√™u** c·ªßa b·∫°n l√†: <strong>${target.name}</strong>.`;
                            }
                        }
                        io.to(p.id).emit('yourRoleIs', roleData);
                    }
                });

                // Th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i r·∫±ng game ƒë√£ b·∫Øt ƒë·∫ßu.
                io.to(roomCode).emit('gameStarted', {
                    rolesInGame: room.gameState.rolesInGame.map(roleId => ({ id: roleId, name: ROLES[roleId].name }))
                });
                // G·ªçi "B·ªô N√£o" ƒë·ªÉ b·∫Øt ƒë·∫ßu v√≤ng ch∆°i ƒë·∫ßu ti√™n.
                gameLogic.startNewRound(roomCode, rooms, io);
            }
        });

        // L·∫Øng nghe khi ch·ªß ph√≤ng mu·ªën b·∫Øt ƒë·∫ßu m·ªôt v√≤ng m·ªõi (sau khi v√≤ng tr∆∞·ªõc k·∫øt th√∫c).
        socket.on('nextRound', roomCode => {
            const room = rooms[roomCode];
            // Ch·ªâ ch·ªß ph√≤ng m·ªõi c√≥ quy·ªÅn n√†y v√† game kh√¥ng ƒë∆∞·ª£c ·ªü tr·∫°ng th√°i k·∫øt th√∫c.
            if (room && socket.id === room.hostId && room.gameState?.phase !== 'gameover') {
                gameLogic.startNewRound(roomCode, rooms, io);
            }
        });
        
        // L·∫Øng nghe khi ng∆∞·ªùi ch∆°i mu·ªën quay v·ªÅ s·∫£nh ch·ªù sau khi game k·∫øt th√∫c.
        socket.on('playAgain', (roomCode) => {
            const room = rooms[roomCode];
            if (room && socket.id === room.hostId && room.gameState?.phase === 'gameover') {
                room.gameState = null; // Reset tr·∫°ng th√°i game.
                // ƒê∆∞a t·∫•t c·∫£ ng∆∞·ªùi ch∆°i tr·ªü v·ªÅ m√†n h√¨nh ph√≤ng ch·ªù.
                io.to(roomCode).emit('backToLobby', { players: room.players, hostId: room.hostId });
            }
        });


        // ==========================================================
        // --- IV. S·ª∞ KI·ªÜN H√ÄNH ƒê·ªòNG TRONG GAME (IN-GAME ACTIONS) ---
        // ==========================================================

        // L·∫Øng nghe l·ª±a ch·ªçn h√†nh ƒë·ªông (Gi·∫£i M√£, Ph√° Ho·∫°i, Quan S√°t).
        socket.on('playerChoice', data => {
            gameLogic.handlePlayerChoice(data.roomCode, socket.id, data.choice, rooms, io);
        });

        // L·∫Øng nghe y√™u c·∫ßu Ph·ªëi H·ª£p.
        socket.on('requestCoordination', data => {
            gameLogic.handleCoordination(data.roomCode, socket.id, data.targetId, rooms, io);
        });

        // L·∫Øng nghe y√™u c·∫ßu V·∫°ch Tr·∫ßn (Accusation).
        // S·ª¨A ƒê·ªîI: T√™n s·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c ƒë·ªïi t·ª´ `requestTwilightAction` th√†nh `requestAccusation` cho r√µ r√†ng.
        // S·ª¨A ƒê·ªîI: Tham s·ªë truy·ªÅn v√†o ƒë√£ ƒë∆∞·ª£c s·ª≠a l·∫°i cho ƒë√∫ng v·ªõi ƒë·ªãnh nghƒ©a c·ªßa h√†m handleTwilightAction.
       socket.on('requestAccusation', data => { // data: { roomCode, targetId, guess }
            const room = rooms[data.roomCode];
            if (room && room.gameState) {
                // <-- N√ÇNG C·∫§P: G·ª≠i s·ª± ki·ªán cho hi·ªáu ·ª©ng h√¨nh ·∫£nh ngay l·∫≠p t·ª©c
                io.to(data.roomCode).emit('playerAccused', {
                    initiatorId: socket.id,
                    targetId: data.targetId
                });
            }
            // Sau ƒë√≥ m·ªõi g·ªçi logic ƒë·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£
            gameLogic.handleTwilightAction(data.roomCode, socket.id, data.targetId, 'V·∫°ch Tr·∫ßn', data.guess, rooms, io);
        });

        // L·∫Øng nghe y√™u c·∫ßu s·ª≠ d·ª•ng k·ªπ nƒÉng ƒë·∫∑c bi·ªát c·ªßa vai tr√≤.
        socket.on('useRoleSkill', data => {
            gameLogic.handleUseSkill(socket, data.roomCode, data.payload, rooms, io);
        });
        
        // L·∫Øng nghe s·ª± ki·ªán ng∆∞·ªùi ch∆°i b·ªè phi·∫øu b·ªè qua giai ƒëo·∫°n Ho√†ng H√¥n.
        socket.on('playerVotedToSkip', (roomCode) => {
            const gs = rooms[roomCode]?.gameState;
            // S·ª¨A: Ki·ªÉm tra ƒë√∫ng phase 'twilight'.
            if (!gs || gs.phase !== 'twilight') return;
            gs.roundData.votesToSkip.add(socket.id);
            const totalPlayers = gs.players.filter(p => !p.disconnected && !p.isDefeated).length;
            io.to(roomCode).emit('updateSkipVoteCount', gs.roundData.votesToSkip.size, totalPlayers);
            // N·∫øu t·∫•t c·∫£ ƒë√£ b·ªè phi·∫øu, k·∫øt th√∫c giai ƒëo·∫°n.
            if (gs.roundData.votesToSkip.size >= totalPlayers) {
                // S·ª¨A: G·ªçi ƒë√∫ng h√†m endTwilightPhase.
                gameLogic.endTwilightPhase(roomCode, "T·∫•t c·∫£ Th·ª£ SƒÉn ƒë√£ ƒë·ªìng √Ω ngh·ªâ ng∆°i qua ho√†ng h√¥n.", rooms, io);
            }
        });
		 // L·∫Øng nghe k·∫øt qu·∫£ t·ª´ B√πa L√∫ L·∫´n
        socket.on('submitAmnesiaAction', (data) => {
            const room = rooms[data.roomCode];
            const gs = room?.gameState;
            // Ch·ªâ ng∆∞·ªùi ch∆°i ƒë∆∞·ª£c y√™u c·∫ßu v√† trong ƒë√∫ng phase m·ªõi ƒë∆∞·ª£c th·ª±c hi·ªán
            if (gs && gs.phase === 'amnesia_selection') {
                gameLogic.handleAmnesiaAction(data.roomCode, data, rooms, io);
            }
        });
		  socket.on('submitArenaPick', (data) => {
            // X√°c th·ª±c: ch·ªâ ng∆∞·ªùi ch·ªçn ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh m·ªõi c√≥ quy·ªÅn g·ª≠i
            // (B·∫°n c√≥ th·ªÉ th√™m logic x√°c th·ª±c chi ti·∫øt h∆°n)
            gameLogic.handleArenaPick(data.roomCode, data, rooms, io);
        });

        socket.on('submitArenaBet', (data) => {
            const room = rooms[data.roomCode];
            const gs = room?.gameState;
            if (gs && gs.phase === 'arena_betting') {
                gameLogic.handleArenaBet(data.roomCode, socket.id, data, rooms);
                socket.emit('logMessage', {type: 'success', message: 'L·ª±a ch·ªçn ƒë·∫∑t c∆∞·ª£c c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n.'})
            }
        });

        // L·∫Øng nghe v√† ph√°t l·∫°i tin nh·∫Øn chat.
        socket.on('sendMessage', (data) => {
            const room = rooms[data.roomCode];
            const player = room?.players.find(p => p.id === socket.id);
            if (room && player) {
                io.to(data.roomCode).emit('newMessage', {
                    senderName: player.name,
                    message: data.message.substring(0, 200) // Gi·ªõi h·∫°n ƒë·ªô d√†i tin nh·∫Øn
                });
            }
        });

        // ==========================================================
        // --- V. X·ª¨ L√ù NG·∫ÆT K·∫æT N·ªêI (DISCONNECTION) ---
        // ==========================================================

        socket.on('disconnect', () => {
            console.log(`[Disconnect] Ng∆∞·ªùi ch∆°i ƒë√£ ng·∫Øt k·∫øt n·ªëi: ${socket.id}`);
            // Ph·∫£i l·∫∑p qua t·∫•t c·∫£ c√°c ph√≤ng ƒë·ªÉ t√¨m xem ng∆∞·ªùi ch∆°i n√†y ·ªü ƒë√¢u.
            for (const roomCode in rooms) {
                const room = rooms[roomCode];
                const playerIndex = room.players.findIndex(p => p.id === socket.id);

                if (playerIndex !== -1) {
                    // N·∫øu game ƒë√£ b·∫Øt ƒë·∫ßu, ch·ªâ ƒë√°nh d·∫•u ng∆∞·ªùi ch∆°i l√† "m·∫•t t√≠ch" ch·ª© kh√¥ng x√≥a.
                    if (room.gameState) {
                        const playerInGame = room.gameState.players.find(p => p.id === socket.id);
                        if (playerInGame) {
                            playerInGame.disconnected = true;
                            playerInGame.name = `${playerInGame.name} (M·∫•t t√≠ch)`;
                            io.to(roomCode).emit('playerDisconnected', { playerId: socket.id, newName: playerInGame.name });
                        }
                    } else {
                        // N·∫øu game ch∆∞a b·∫Øt ƒë·∫ßu, x√≥a ng∆∞·ªùi ch∆°i kh·ªèi ph√≤ng ch·ªù.
                        room.players.splice(playerIndex, 1);
                    }

                    // N·∫øu kh√¥ng c√≤n ng∆∞·ªùi ch∆°i th·∫≠t n√†o, x√≥a ph√≤ng.
                    if (room.players.every(p => p.isBot || p.disconnected) && room.players.length > 0) {
                        console.log(`[Cleanup] X√≥a ph√≤ng ${roomCode} v√¨ kh√¥ng c√≤n ng∆∞·ªùi ch∆°i.`);
                        delete rooms[roomCode];
                        break; // Tho√°t v√≤ng l·∫∑p v√¨ ƒë√£ x·ª≠ l√Ω xong.
                    }

                    // N·∫øu ng∆∞·ªùi ng·∫Øt k·∫øt n·ªëi l√† ch·ªß ph√≤ng, chuy·ªÉn quy·ªÅn cho ng∆∞·ªùi ch∆°i th·∫≠t ti·∫øp theo.
                    if (socket.id === room.hostId && !room.players.every(p => p.isBot)) {
                        const newHost = room.players.find(p => !p.isBot && !p.disconnected);
                        if (newHost) {
                            room.hostId = newHost.id;
                            console.log(`[Host Change] Ch·ªß ph√≤ng m·ªõi c·ªßa ph√≤ng ${roomCode} l√† ${newHost.name}`);
                        }
                    }
                    
                    // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ng∆∞·ªùi ch∆°i cho m·ªçi ng∆∞·ªùi.
                    io.to(roomCode).emit('updatePlayerList', room.players, room.hostId);
                    break; // Tho√°t v√≤ng l·∫∑p
                }
            }
        });
    });
}

// Xu·∫•t h√†m initialize ƒë·ªÉ server.js c√≥ th·ªÉ g·ªçi.
module.exports = { initialize };