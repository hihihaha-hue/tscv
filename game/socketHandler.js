// game/socketHandler.js
// ======================================================================
// TH·ª¢ SƒÇN C·ªî V·∫¨T - SOCKET EVENT HANDLER
// Nhi·ªám v·ª•: L·∫Øng nghe c√°c s·ª± ki·ªán t·ª´ client v√† g·ªçi c√°c h√†m logic t∆∞∆°ng ·ª©ng.
// ƒê√¢y l√† l·ªõp giao ti·∫øp gi·ªØa client v√† core game logic.
// ======================================================================

const gameLogic = require('./logic.js');
const { ROLES } = require('./config.js');

/**
 * Kh·ªüi t·∫°o t·∫•t c·∫£ c√°c tr√¨nh l·∫Øng nghe s·ª± ki·ªán socket.
 * @param {Server} io - Instance c·ªßa Socket.IO Server.
 * @param {Object} rooms - Object l∆∞u tr·ªØ tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ c√°c ph√≤ng ch∆°i.
 */
function initialize(io, rooms) {

    io.on('connection', (socket) => {
        // console.log(`[SOCKET] User connected: ${socket.id}`);

        // --- H√ÄM N·ªòI B·ªò (HELPER) ---
        /**
         * X·ª≠ l√Ω logic khi m·ªôt ng∆∞·ªùi ch∆°i tham gia ph√≤ng.
         * @param {string} code - M√£ ph√≤ng.
         * @param {string} name - T√™n ng∆∞·ªùi ch∆°i.
         */
        function handleJoinRoom(code, name) {
            const room = rooms[code];
            if (!room) {
                return socket.emit('roomError', `Ph√≤ng '${code}' kh√¥ng t·ªìnTAIN!`);
            }
            if (room.gameState) {
                return socket.emit('roomError', 'Cu·ªôc th√°m hi·ªÉm ƒë√£ b·∫Øt ƒë·∫ßu!');
            }
            if (room.players.length >= room.maxPlayers) {
                return socket.emit('roomError', 'ƒêo√†n ƒë√£ ƒë·ªß ng∆∞·ªùi!');
            }
            const newPlayer = {
                id: socket.id,
                name: (name || `Th·ª£ SƒÉn ${room.players.length + 1}`).substring(0, 15).trim(),
                isBot: false
            };
            room.players.push(newPlayer);
            socket.join(code);
            io.to(code).emit('updatePlayerList', room.players, room.hostId);
            socket.emit('joinedRoom', {
                roomCode: code,
                hostId: room.hostId,
                myId: socket.id,
                players: room.players
            });
        }

        // --- L·∫ÆNG NGHE S·ª∞ KI·ªÜN T·ª™ CLIENT ---

        // 1. Qu·∫£n l√Ω ph√≤ng ch·ªù (Lobby)
        socket.on('createRoom', data => {
            let code;
            do {
                code = Math.random().toString(36).substring(2, 6).toUpperCase();
            } while (rooms[code]);
            rooms[code] = { players: [], hostId: socket.id, maxPlayers: 12, gameState: null };
            handleJoinRoom(code, data.name);
        });

        socket.on('joinRoom', data => {
            handleJoinRoom(data.roomCode?.trim().toUpperCase(), data.name);
        });

        socket.on('addBot', roomCode => {
            const room = rooms[roomCode];
            if (room && socket.id === room.hostId && room.players.length < room.maxPlayers) {
                const personalities = ['aggressive', 'cautious', 'random'];
                const botPlayer = {
                    id: `bot-${Date.now()}`,
                    name: `Th·ª£ SƒÉn AI ${room.players.length + 1}`,
                    isBot: true,
                    personality: personalities[Math.floor(Math.random() * personalities.length)]
                };
                room.players.push(botPlayer);
                io.to(roomCode).emit('updatePlayerList', room.players, room.hostId);
            }
        });

        socket.on('kickPlayer', (data) => {
            const room = rooms[data.roomCode];
            if (room && socket.id === room.hostId) {
                const targetSocket = io.sockets.sockets.get(data.playerId);
                if (targetSocket) {
                    targetSocket.emit('kicked');
                    targetSocket.leave(data.roomCode);
                }
                room.players = room.players.filter(p => p.id !== data.playerId);
                io.to(data.roomCode).emit('updatePlayerList', room.players, room.hostId);
            }
        });
        
        socket.on('changeName', data => {
            const player = rooms[data.roomCode]?.players.find(p => p.id === socket.id);
            if (player) {
                player.name = data.newName.substring(0, 15).trim() || player.name;
                io.to(data.roomCode).emit('updatePlayerList', rooms[data.roomCode].players, rooms[data.roomCode].hostId);
            }
        });

        // 2. B·∫Øt ƒë·∫ßu v√† Ch∆°i l·∫°i Game
        socket.on('startGame', (roomCode) => {
            const room = rooms[roomCode];
            if (room && socket.id === room.hostId && room.players.length >= 2) {
                // G·ªçi h√†m t·ª´ module logic ƒë·ªÉ t·∫°o tr·∫°ng th√°i game
                room.gameState = gameLogic.createGameState(room.players);
                
                // G·ª≠i vai tr√≤ ri√™ng cho t·ª´ng ng∆∞·ªùi ch∆°i th·ª±c
                room.gameState.players.forEach(p => {
                    if (!p.isBot) {
                        const roleData = { ...ROLES[p.roleId], id: p.roleId };
                        if (p.roleId === 'PUPPETEER') {
                            const puppet = room.gameState.players.find(pup => pup.id === p.puppetId);
                            if(puppet) {
                               roleData.description += ` Con r·ªëi c·ªßa b·∫°n l√†: <strong>${puppet.name}</strong>.`;
                            }
                        }
                        io.to(p.id).emit('yourRoleIs', roleData);
                    }
                });
    
                io.to(roomCode).emit('gameStarted');
                // G·ªçi h√†m logic ƒë·ªÉ b·∫Øt ƒë·∫ßu v√≤ng m·ªõi
                gameLogic.startNewRound(roomCode, rooms, io);
            }
        });

        socket.on('playAgain', (roomCode) => {
            const room = rooms[roomCode];
            if (room && socket.id === room.hostId && room.gameState?.phase === 'gameover') {
                 // Logic t∆∞∆°ng t·ª± startGame
                 room.gameState = gameLogic.createGameState(room.players);
                 room.gameState.players.forEach(p => {
                     if (!p.isBot) {
                         const roleData = { ...ROLES[p.roleId], id: p.roleId };
                         if (p.roleId === 'PUPPETEER') { /*...*/ }
                         io.to(p.id).emit('yourRoleIs', roleData);
                     }
                 });
                 io.to(roomCode).emit('gameStarted');
                 gameLogic.startNewRound(roomCode, rooms, io);
            }
        });

        // 3. H√†nh ƒë·ªông trong game
        socket.on('playerChoice', data => {
            gameLogic.handlePlayerChoice(data.roomCode, socket.id, data.choice, rooms, io);
        });

        socket.on('requestChaosAction', data => {
            gameLogic.handleChaosAction(data.roomCode, socket.id, data.targetId, data.actionType, data.guess, rooms, io);
        });

        socket.on('playerVotedToSkip', (roomCode) => {
            const gs = rooms[roomCode]?.gameState;
            if (!gs || gs.phase !== 'chaos' || gs.roundData.chaosActionTaken) return;
            gs.roundData.votesToSkip.add(socket.id);
            const totalPlayers = gs.players.filter(p => !p.disconnected && !p.isDefeated).length;
            io.to(roomCode).emit('updateSkipVoteCount', gs.roundData.votesToSkip.size, totalPlayers);
            if (gs.roundData.votesToSkip.size >= totalPlayers) {
                gameLogic.endChaosPhase(roomCode, "T·∫•t c·∫£ Th·ª£ SƒÉn ƒë√£ ƒë·ªìng √Ω ngh·ªâ ng∆°i qua ho√†ng h√¥n.", rooms, io);
            }
        });

        socket.on('amnesiaAction', data => {
            const gs = rooms[data.roomCode]?.gameState;
            if (!gs || gs.phase !== 'special_action') return;
            const p1 = gs.players.find(p => p.id === data.player1Id);
            const p2 = gs.players.find(p => p.id === data.player2Id);
            if (p1 && p2) {
                [p1.chosenAction, p2.chosenAction] = [p2.chosenAction, p1.chosenAction];
                io.to(data.roomCode).emit('logMessage', { type: 'warning', message: `üß† H√†nh ƒë·ªông c·ªßa **${p1.name}** v√† **${p2.name}** ƒë√£ b·ªã ho√°n ƒë·ªïi!` });
            }
            gameLogic.startChaosPhase(data.roomCode, rooms, io);
        });

        socket.on('nextRound', roomCode => {
            const room = rooms[roomCode];
            if (room && socket.id === room.hostId && room.gameState?.phase !== 'gameover') {
                gameLogic.startNewRound(roomCode, rooms, io);
            }
        });

        // 4. X·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi
        socket.on('disconnect', () => {
            // console.log(`[SOCKET] User disconnected: ${socket.id}`);
            for (const roomCode in rooms) {
                const room = rooms[roomCode];
                const playerIndex = room.players.findIndex(p => p.id === socket.id);

                if (playerIndex !== -1) {
                    // N·∫øu game ƒëang di·ªÖn ra
                    if (room.gameState) {
                        const playerInGame = room.gameState.players.find(p => p.id === socket.id);
                        if (playerInGame) {
                            playerInGame.disconnected = true;
                            playerInGame.name = `${playerInGame.name} (M·∫•t t√≠ch)`;
                            io.to(roomCode).emit('playerDisconnected', { playerId: socket.id, newName: playerInGame.name });
                        }
                    } else {
                        // N·∫øu ƒëang ·ªü ph√≤ng ch·ªù, lo·∫°i b·ªè ng∆∞·ªùi ch∆°i
                        room.players.splice(playerIndex, 1);
                    }

                    // N·∫øu kh√¥ng c√≤n ng∆∞·ªùi ch∆°i th·∫≠t n√†o, x√≥a ph√≤ng
                    const realPlayersLeft = room.players.some(p => !p.isBot);
                    if (!realPlayersLeft) {
                        delete rooms[roomCode];
                        break; // Tho√°t kh·ªèi v√≤ng l·∫∑p v√¨ ph√≤ng ƒë√£ b·ªã x√≥a
                    }

                    // N·∫øu host ng·∫Øt k·∫øt n·ªëi, chuy·ªÉn host cho ng∆∞·ªùi ti·∫øp theo
                    if (socket.id === room.hostId && room.players.length > 0) {
                        const newHost = room.players.find(p => !p.isBot) || room.players[0];
                        room.hostId = newHost.id;
                    }
                    
                    io.to(roomCode).emit('updatePlayerList', room.players, room.hostId);
                    break; // Tho√°t kh·ªèi v√≤ng l·∫∑p v√¨ ƒë√£ t√¨m th·∫•y v√† x·ª≠ l√Ω ng∆∞·ªùi ch∆°i
                }
            }
        });

    });
}

module.exports = { initialize };