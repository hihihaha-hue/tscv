// game/logic.js
// ======================================================================
// CORE GAME LOGIC ("The Brain")
// Ch·ª©a b·ªô n√£o c·ªßa game: t·∫°o tr·∫°ng th√°i, x·ª≠ l√Ω lu·ªìng v√≤ng ch∆°i, t√≠nh to√°n, v√† ki·ªÉm tra chi·∫øn th·∫Øng.
// ======================================================================

// --- I. IMPORTS & PH·ª§ THU·ªòC ---
// Import m·ªçi th·ª© c·∫ßn thi·∫øt t·ª´ file c·∫•u h√¨nh.
const {
    DECREES, ROLES, ALL_DECREE_IDS, ALL_ROLE_IDS,
    CHOICE_DURATION, CHAOS_DURATION, DECREE_REVEAL_DELAY
} = require('./config');

// --- II. H√ÄM KH·ªûI T·∫†O & C√ÄI ƒê·∫∂T GAME ---

/**
 * T·∫°o tr·∫°ng th√°i ban ƒë·∫ßu cho m·ªôt v√°n game m·ªõi.
 * @param {Array} players - M·∫£ng ng∆∞·ªùi ch∆°i t·ª´ ph√≤ng ch·ªù.
 * @returns {Object} - Tr·∫°ng th√°i game (gameState).
 */
function createGameState(players) {
    const numPlayers = players.length;
    let winScore, loseScore;
    if (numPlayers <= 4) { winScore = 15; loseScore = -15; }
    else if (numPlayers <= 8) { winScore = 20; loseScore = -20; }
    else { winScore = 25; loseScore = -25; }

    // X√°o tr·ªôn v√† g√°n vai tr√≤
    const rolesToAssign = [...ALL_ROLE_IDS];
    for (let i = rolesToAssign.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [rolesToAssign[i], rolesToAssign[j]] = [rolesToAssign[j], rolesToAssign[i]];
    }
    const rolesInThisGame = rolesToAssign.slice(0, numPlayers);

    const gameState = {
        players: players.map((p, index) => ({
            ...p,
            score: 0,
            chosenAction: null,
            roleId: rolesInThisGame[index % rolesInThisGame.length],
            // Tr·∫°ng th√°i cho c√°c ƒëi·ªÅu ki·ªán th·∫Øng/k·ªπ nƒÉng
            hasBeenNegative: false,
            successfulChallenges: 0,
            neverSabotaged: true,
            recentActions: [],
            hasReached7: false,
            hasReachedMinus7: false,
            successfulAssassination: false,
            loneWolfWins: 0,
            puppetId: null,
            isBlessed: false,
            skillUsedThisRound: false,
        })),
        currentRound: 0,
        winScore,
        loseScore,
        phase: 'waiting', // c√°c phase: waiting, choice, decree, chaos, reveal_pending, reveal, gameover
        roundData: {},
        decreeDeck: [],
        decreeDiscard: [],
        consecutiveDraws: 0,
        rolesInGame: rolesInThisGame, // L∆∞u l·∫°i c√°c vai tr√≤ c√≥ trong v√°n
    };

    // G√°n con r·ªëi cho K·∫ª Thao T√∫ng
    const puppeteer = gameState.players.find(p => p.roleId === 'PUPPETEER');
    if (puppeteer) {
        const potentialPuppets = gameState.players.filter(p => p.id !== puppeteer.id);
        if (potentialPuppets.length > 0) {
            puppeteer.puppetId = potentialPuppets[Math.floor(Math.random() * potentialPuppets.length)].id;
        }
    }

    shuffleDecreeDeck(gameState);
    return gameState;
}

function shuffleDecreeDeck(gs) {
    gs.decreeDeck = [...ALL_DECREE_IDS];
    for (let i = gs.decreeDeck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [gs.decreeDeck[i], gs.decreeDeck[j]] = [gs.decreeDeck[j], gs.decreeDeck[i]];
    }
    gs.decreeDiscard = [];
}

// --- III. H√ÄM X·ª¨ L√ù LU·ªíNG CH∆†I (ROUND FLOW) ---

function startNewRound(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;

    gs.currentRound++;
    gs.phase = 'choice';
    gs.roundData = { // Reset d·ªØ li·ªáu v√≤ng
        decree: null,
        chaosResult: null,
        votesToSkip: new Set(),
        choiceTimer: null,
        chaosTimer: null,
    };

    // Reset tr·∫°ng th√°i c·ªßa ng∆∞·ªùi ch∆°i cho v√≤ng m·ªõi
    gs.players.forEach(p => {
        if (!p.isDefeated) {
            p.chosenAction = null;
            p.isBlessed = false;
            p.skillUsedThisRound = false;
        }
    });

    io.to(roomCode).emit('newRound', {
        roundNumber: gs.currentRound,
        players: gs.players, // G·ª≠i to√†n b·ªô d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
        duration: CHOICE_DURATION
    });

    gs.roundData.choiceTimer = setTimeout(() => {
        gs.players.forEach(p => {
            if (!p.chosenAction && !p.isDefeated) {
                const choices = ['Gi·∫£i M√£', 'Ph√° Ho·∫°i', 'Quan S√°t'];
                handlePlayerChoice(roomCode, p.id, choices[Math.floor(Math.random() * 3)], rooms, io);
            }
        });
    }, CHOICE_DURATION * 1000);
    triggerBotChoices(roomCode, rooms, io);
}

function revealDecreeAndContinue(roomCode, rooms, io) {
    const gs = rooms[roomCode].gameState;
    gs.phase = 'decree';

    if (gs.currentRound === 1) {
        io.to(roomCode).emit('logMessage', { type: 'info', message: "ƒê√™m ƒë·∫ßu ti√™n y√™n tƒ©nh, kh√¥ng c√≥ Ti·∫øng V·ªçng." });
        startChaosPhase(roomCode, rooms, io);
        return;
    }

    if (gs.decreeDeck.length === 0) shuffleDecreeDeck(gs);
    
    const lowestPlayers = getPlayersByScore(gs.players, 'lowest');
    const drawer = lowestPlayers[Math.floor(Math.random() * lowestPlayers.length)];
    const decreeId = gs.decreeDeck.pop();
    gs.decreeDiscard.push(decreeId);
    gs.roundData.decree = { ...DECREES[decreeId], id: decreeId };

    io.to(roomCode).emit('decreeRevealed', {
        drawerName: drawer.name,
        decrees: [{ name: gs.roundData.decree.name, description: gs.roundData.decree.description }]
    });

    setTimeout(() => {
        // Th·ª±c thi hook onReveal n·∫øu c√≥
        if (gs.roundData.decree.onReveal) {
            gs.roundData.decree.onReveal(gs, io, roomCode, drawer.id, rooms);
        }
        // N·∫øu onReveal kh√¥ng chuy·ªÉn game sang tr·∫°ng th√°i ƒë·∫∑c bi·ªát, ti·∫øp t·ª•c
        if (gs.phase !== 'special_action') {
            startChaosPhase(roomCode, rooms, io);
        }
    }, DECREE_REVEAL_DELAY);
}

function startChaosPhase(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    
    // Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán v√¥ hi·ªáu h√≥a chaos
    if (gs.roundData.decree?.isChaosDisabled) {
        endChaosPhase(roomCode, `Ti·∫øng V·ªçng '${gs.roundData.decree.name}' khi·∫øn m·ªçi h√†nh ƒë·ªông ph·∫£i d·ª´ng l·∫°i!`, rooms, io);
        return;
    }

    gs.phase = 'chaos';
    io.to(roomCode).emit('chaosPhaseStarted', { duration: CHAOS_DURATION });
    gs.roundData.chaosTimer = setTimeout(() => endChaosPhase(roomCode, "H·∫øt gi·ªù, kh√¥ng c√≥ h√†nh ƒë·ªông n√†o di·ªÖn ra.", rooms, io), CHAOS_DURATION * 1000);
    triggerBotChaosAction(roomCode, rooms, io);
}

function endChaosPhase(roomCode, message, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    // Ch·ªâ k·∫øt th√∫c m·ªôt l·∫ßn duy nh·∫•t
    if (!gs || gs.phase !== 'chaos') return;

    gs.phase = 'reveal_pending';
    clearTimeout(gs.roundData.chaosTimer);
    io.to(roomCode).emit('chaosActionResolved', { message });
    setTimeout(() => calculateScoresAndEndRound(roomCode, rooms, io), 3000);
}

function calculateScoresAndEndRound(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    gs.phase = 'reveal';

    const { decree, chaosResult } = gs.roundData;
    const results = { messages: [], scoreChanges: {}, isDraw: false, winner: null, roundWinners: [] };
    const pointMultiplier = decree?.getPointMultiplier?.() || 1;
    const activePlayers = gs.players.filter(p => !p.isDefeated);

    if (activePlayers.length === 0) return handlePostRoundEvents(roomCode, rooms, io);

    // T√≠nh phi·∫øu
    const votes = { 'Gi·∫£i M√£': 0, 'Ph√° Ho·∫°i': 0, 'Quan S√°t': 0 };
    activePlayers.forEach(p => {
        if (p.chosenAction) {
            // K·ªπ nƒÉng b·ªã ƒë·ªông c·ªßa Th√°nh S·ªëng
            if (p.roleId === 'SAINT' && p.chosenAction === 'Gi·∫£i M√£') {
                votes['Gi·∫£i M√£'] += 2;
                results.messages.push(`‚ú® L√° phi·∫øu c·ªßa Th√°nh S·ªëng ${p.name} ƒë∆∞·ª£c nh√¢n ƒë√¥i!`);
            } else {
                votes[p.chosenAction]++;
            }
        }
    });

    if (chaosResult?.success && chaosResult.actionType === 'Ph·ªëi H·ª£p') {
        if (votes[chaosResult.actionToReduce] > 0) {
            votes[chaosResult.actionToReduce]--;
            results.messages.push("ü§ù Ph·ªëi H·ª£p th√†nh c√¥ng, m·ªôt h√†nh ƒë·ªông ƒë√£ ƒë∆∞·ª£c che gi·∫•u!");
        }
    }

    // X√°c ƒë·ªãnh k·∫øt qu·∫£
    const { 'Gi·∫£i M√£': c, 'Ph√° Ho·∫°i': t } = votes;
    results.isDraw = (c === t);
    if (results.isDraw) {
        gs.consecutiveDraws++;
        results.messages.push("‚öñÔ∏è K·∫øt qu·∫£ ƒë√™m nay l√† **H√íA**!");
    } else {
        gs.consecutiveDraws = 0;
        // √Åp d·ª•ng lu·∫≠t c·ªßa Ti·∫øng V·ªçng n·∫øu c√≥, n·∫øu kh√¥ng th√¨ lu·∫≠t m·∫∑c ƒë·ªãnh
        results.winner = decree?.determineWinner ? decree.determineWinner(c, t) : (c > t ? 'Gi·∫£i M√£' : 'Ph√° Ho·∫°i');
        if (decree?.determineWinner) results.messages.push(`üìú Ti·∫øng V·ªçng '${decree.name}' c√≥ hi·ªáu l·ª±c!`);
        results.messages.push(`Nh√≥m **${results.winner}** ƒë√£ th√†nh c√¥ng!`);
    }

    // T√≠nh ƒëi·ªÉm thay ƒë·ªïi
    activePlayers.forEach(p => {
        let change = 0;
        if (results.isDraw) {
            change = (p.chosenAction === 'Quan S√°t') ? -1 : 1;
        } else {
            if (p.chosenAction === results.winner) {
                change = 2;
                results.roundWinners.push(p.id);
            } else if (p.chosenAction === 'Quan S√°t') {
                change = 1;
            } else {
                change = -1;
            }
        }
        results.scoreChanges[p.id] = change * pointMultiplier;
    });

    // √Åp d·ª•ng ƒëi·ªÉm v√† c√°c hi·ªáu ·ª©ng cu·ªëi v√≤ng
    activePlayers.forEach(p => {
        let finalChange = results.scoreChanges[p.id] || 0;
        if (p.isBlessed && finalChange < 0) {
            finalChange = 0;
            results.messages.push(`üôè **${p.name}** ƒë√£ ƒë∆∞·ª£c ph∆∞·ªõc l√†nh b·∫£o v·ªá kh·ªèi b·ªã m·∫•t Ti·∫øn ƒê·ªô!`);
        }
        if (p.roleId === 'OUTLAW' && decree && finalChange < 0) {
             finalChange = 0; // Mi·ªÖn nhi·ªÖm v·ªõi m·∫•t ƒëi·ªÉm t·ª´ Ti·∫øng V·ªçng
        }
        p.score += finalChange;
        
        if (p.roleId === 'MAGNATE') { // K·ªπ nƒÉng Nh√† T√†i Phi·ªát
            if (p.score > 0) p.score++; else if (p.score < 0) p.score--;
        }
    });

    // Hook c·ªßa Ti·∫øng V·ªçng (v√≠ d·ª•: C·ªëng N·∫°p)
    if (decree?.endOfRoundEffect) {
        decree.endOfRoundEffect(gs, results, pointMultiplier);
    }

    gs.roundData.lastScoreChanges = results.scoreChanges;
    io.to(roomCode).emit('roundResult', { players: gs.players, results, finalVoteCounts: votes });
    handlePostRoundEvents(roomCode, rooms, io);
}

function handlePostRoundEvents(roomCode, rooms, io) {
    const gs = rooms[roomCode].gameState;
    // C·∫≠p nh·∫≠t c√°c tr·∫°ng th√°i cho vai tr√≤ sau m·ªói v√≤ng
    gs.players.forEach(p => {
        if (p.score < 0) p.hasBeenNegative = true;
        if (p.score === 7) p.hasReached7 = true;
        if (p.score === -7) p.hasReachedMinus7 = true;
        if (gs.roundData.roundWinners?.includes(p.id) && gs.roundData.roundWinners.length === 1) {
            p.loneWolfWins++;
        }
    });

    const winnersByScore = gs.players.filter(p => p.score >= gs.winScore);
    const losersByScore = gs.players.filter(p => p.score <= gs.loseScore);
    const winnerByRole = checkRoleVictory(gs);

    if (winnerByRole || winnersByScore.length > 0 || losersByScore.length > 0) {
        gs.phase = 'gameover';
        let winner = winnersByScore[0] || winnerByRole;
        let loser = losersByScore[0];
        
        if (winnerByRole) {
            winner = winnerByRole;
            winner.reason = `ƒë√£ ho√†n th√†nh Thi√™n M·ªánh "${ROLES[winner.roleId].name}"!`;
        }
        io.to(roomCode).emit('gameOver', { winner, loser });
    } else {
        io.to(rooms[roomCode].hostId).emit('promptNextRound');
    }
}


// --- IV. H√ÄM X·ª¨ L√ù H√ÄNH ƒê·ªòNG & K·ª∏ NƒÇNG ---

function handlePlayerChoice(roomCode, playerId, choice, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || gs.phase !== 'choice') return;
    const player = gs.players.find(p => p.id === playerId);
    if (player && !player.chosenAction) {
        player.chosenAction = choice;
        if (choice === 'Ph√° Ho·∫°i') player.neverSabotaged = false;
        // C·∫≠p nh·∫≠t 3 h√†nh ƒë·ªông g·∫ßn nh·∫•t cho K·∫ª L·∫≠t M·∫∑t
        player.recentActions.push(choice);
        if (player.recentActions.length > 3) player.recentActions.shift();
        
        io.to(roomCode).emit('playerChose', playerId);
    }
    // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ ƒë√£ ch·ªçn
    if (gs.players.filter(p => !p.isDefeated && !p.disconnected).every(p => p.chosenAction)) {
        clearTimeout(gs.roundData.choiceTimer);
        revealDecreeAndContinue(roomCode, rooms, io);
    }
}

function handleChaosAction(roomCode, initiatorId, targetId, actionType, guess, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || gs.phase !== 'chaos') return;
    const initiator = gs.players.find(p => p.id === initiatorId);
    const target = gs.players.find(p => p.id === targetId);
    if (!initiator || !target) return;

    let msg = "";
    const multi = gs.roundData.decree?.getPointMultiplier?.() || 1;

    if (actionType === 'V·∫°ch Tr·∫ßn') {
        const success = guess === target.chosenAction;
        if (success) initiator.successfulChallenges++;
        msg = `üî• **${initiator.name}** ƒë√£ V·∫°ch Tr·∫ßn **${target.name}** v√† ph√°n ƒëo√°n **${success ? "ƒê√öNG" : "SAI"}**!`;
        const change = 2 * multi;
        if (success) { initiator.score += change; target.score -= change; }
        else { initiator.score -= change; target.score += change; }
    } else if (actionType === 'Ph·ªëi H·ª£p') {
        const success = initiator.chosenAction === target.chosenAction;
        msg = `ü§ù **${initiator.name}** ƒë√£ Ph·ªëi H·ª£p v·ªõi **${target.name}** v√† **${success ? "th√†nh c√¥ng" : "th·∫•t b·∫°i"}**!`;
        if (success) gs.roundData.chaosResult = { actionType, success, actionToReduce: initiator.chosenAction };
        else initiator.score -= multi;
    }
    
    io.to(roomCode).emit('updatePlayerCards', [{id: initiator.id, score: initiator.score}, {id: target.id, score: target.score}]);
    endChaosPhase(roomCode, msg, rooms, io);
}

function handleUseSkill(socket, roomCode, payload, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    const player = gs.players.find(p => p.id === socket.id);
    if (!player || player.isDefeated) return;

    if (gs.roundData.decree?.id === 'DEM_CAM_LANG') {
        return io.to(player.id).emit('logMessage', { type: 'error', message: 'K·ªπ nƒÉng ƒë√£ b·ªã v√¥ hi·ªáu h√≥a b·ªüi ƒê√™m C√¢m L·∫∑ng!' });
    }
    if (player.skillUsedThisRound) {
        return io.to(player.id).emit('logMessage', { type: 'error', message: 'B·∫°n ƒë√£ d√πng k·ªπ nƒÉng trong ƒë√™m nay r·ªìi.' });
    }

    let message = '';
    switch (player.roleId) {
        case 'PROPHET':
            if (gs.phase === 'choice' || gs.phase === 'decree') {
                const target = gs.players.find(p => p.id === payload.targetId);
                if (target) {
                    const action = target.chosenAction || 'Ch∆∞a ch·ªçn';
                    io.to(player.id).emit('privateInfo', { title: 'Thi√™n L√Ω Nh√£n', text: `H√†nh ƒë·ªông c·ªßa ${target.name} l√†: **${action}**.` });
                    player.skillUsedThisRound = true;
                }
            } else {
                 return io.to(player.id).emit('logMessage', { type: 'error', message: 'Ch·ªâ c√≥ th·ªÉ d√πng k·ªπ nƒÉng tr∆∞·ªõc Gi·ªù Ho√†ng H√¥n.' });
            }
            break;
        case 'ASSASSIN':
            const targetAssassin = gs.players.find(p => p.id === payload.targetId);
            if (targetAssassin && payload.guessedRoleId) {
                const success = targetAssassin.roleId === payload.guessedRoleId;
                if (success) {
                    player.successfulAssassination = true;
                    const originalScore = targetAssassin.score;
                    targetAssassin.score = Math.floor(originalScore / 2);
                    message = `üí• **${player.name}** ƒë√£ √°m s√°t th√†nh c√¥ng **${targetAssassin.name}**!`;
                    io.to(roomCode).emit('updatePlayerCards', [{id: targetAssassin.id, score: targetAssassin.score}]);
                } else {
                    message = `üí® V·ª• √°m s√°t c·ªßa **${player.name}** ƒë√£ th·∫•t b·∫°i!`;
                }
                player.skillUsedThisRound = true;
            }
            break;
        case 'PUPPETEER':
             // Logic ƒë√£ vi·∫øt ·ªü c√°c b∆∞·ªõc tr∆∞·ªõc...
             break;
        case 'PRIEST':
            if (gs.phase === 'choice') {
                const targetPriest = gs.players.find(p => p.id === payload.targetId);
                if (targetPriest) {
                    targetPriest.isBlessed = true;
                    message = `üôè ${player.name} ƒë√£ ban ph∆∞·ªõc cho m·ªôt ng∆∞·ªùi trong b√≥ng t·ªëi...`;
                    player.skillUsedThisRound = true;
                }
            } else {
                 return io.to(player.id).emit('logMessage', { type: 'error', message: 'Ch·ªâ c√≥ th·ªÉ ban ph∆∞·ªõc trong giai ƒëo·∫°n H√†nh ƒê·ªông.' });
            }
            break;
        default:
            return io.to(player.id).emit('logMessage', { type: 'error', message: 'Vai tr√≤ c·ªßa b·∫°n kh√¥ng c√≥ k·ªπ nƒÉng k√≠ch ho·∫°t.' });
    }

    if (message) io.to(roomCode).emit('logMessage', { type: 'info', message });
}


// --- V. H√ÄM KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN & TI·ªÜN √çCH ---
// ==========================================================

/**
 * Ki·ªÉm tra to√†n b·ªô ng∆∞·ªùi ch∆°i ƒë·ªÉ xem c√≥ ai ho√†n th√†nh ƒëi·ªÅu ki·ªán th·∫Øng theo vai tr√≤ kh√¥ng.
 * ƒê√¢y l√† h√†m ki·ªÉm tra ch√≠nh, ƒë∆∞·ª£c g·ªçi sau m·ªói v√≤ng ƒë·∫•u.
 * @param {Object} gs - GameState hi·ªán t·∫°i.
 * @returns {Object|null} - Tr·∫£ v·ªÅ object ng∆∞·ªùi ch∆°i th·∫Øng, ho·∫∑c null n·∫øu kh√¥ng c√≥ ai.
 */
function checkRoleVictory(gs) {
    for (const player of gs.players) {
        if (player.isDefeated) continue;

        // G·ªçi h√†m con ƒë·ªÉ ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng cho t·ª´ng ng∆∞·ªùi
        if (checkRoleVictorySingle(gs, player)) {
            return player;
        }
    }
    return null; // Kh√¥ng c√≥ ai th·∫Øng theo vai tr√≤ trong v√≤ng n√†y
}

/**
 * H√†m con, ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng cho M·ªòT ng∆∞·ªùi ch∆°i c·ª• th·ªÉ.
 * ƒê∆∞·ª£c t√°ch ra ƒë·ªÉ c√≥ th·ªÉ g·ªçi ƒë·ªá quy (v√≠ d·ª•: K·∫ª Thao T√∫ng ki·ªÉm tra Con R·ªëi).
 * @param {Object} gs - GameState hi·ªán t·∫°i.
 * @param {Object} player - Ng∆∞·ªùi ch∆°i c·∫ßn ki·ªÉm tra.
 * @returns {boolean} - True n·∫øu ng∆∞·ªùi ch∆°i n√†y th·∫Øng, ng∆∞·ª£c l·∫°i l√† false.
 */
function checkRoleVictorySingle(gs, player) {
    if (!player || player.isDefeated) return false;

    switch (player.roleId) {
        case 'SURVIVOR':
            const otherPlayers = gs.players.filter(p => p.id !== player.id && !p.isDefeated);
            // ƒêi·ªÅu ki·ªán: c√≥ ng∆∞·ªùi kh√°c c√≤n s·ªëng, t·∫•t c·∫£ h·ªç ƒë√£ t·ª´ng √¢m ƒëi·ªÉm, v√† b·∫£n th√¢n th√¨ ch∆∞a.
            return otherPlayers.length > 0 && otherPlayers.every(p => p.hasBeenNegative) && !player.hasBeenNegative;
        
        case 'PROPHET':
            return player.successfulChallenges >= 3;
        
        case 'PEACEMAKER':
            return gs.consecutiveDraws >= 3;
        
        case 'SAINT':
            return player.score >= 10 && player.neverSabotaged;
        
        case 'TURNCOAT':
            // recentActions l√† m·ªôt m·∫£ng, v√≠ d·ª•: ['Gi·∫£i M√£', 'Ph√° Ho·∫°i', 'Quan S√°t']
            // D√πng Set ƒë·ªÉ l·∫•y c√°c gi√° tr·ªã duy nh·∫•t. N·∫øu size c·ªßa Set l√† 3, t·ª©c l√† ƒë√£ d√πng ƒë·ªß 3 h√†nh ƒë·ªông.
            return player.score >= 12 && new Set(player.recentActions).size === 3;
        
        case 'GAMBLER':
            return player.hasReached7 && player.hasReachedMinus7;
        
        case 'MAGNATE':
            return player.score >= 20;
        
        case 'JEALOUS':
            // T√¨m nh·ªØng ng∆∞·ªùi c√≥ ƒëi·ªÉm cao h∆°n.
            const higherPlayers = gs.players.filter(p => p.score > player.score && !p.isDefeated);
            // ƒêi·ªÅu ki·ªán: Ph·∫£i c√≥ ng∆∞·ªùi cao ƒëi·ªÉm h∆°n, v√† T·∫§T C·∫¢ h·ªç ƒë·ªÅu b·ªã tr·ª´ ƒëi·ªÉm trong v√≤ng v·ª´a r·ªìi.
            return higherPlayers.length > 0 && higherPlayers.every(p => (gs.roundData.lastScoreChanges[p.id] || 0) < 0);
        
        case 'BALANCER':
            const positivePlayers = gs.players.filter(p => p.score > 0).length;
            const negativePlayers = gs.players.filter(p => p.score < 0).length;
            // ƒêi·ªÅu ki·ªán: Ph·∫£i c√≥ ng∆∞·ªùi ƒëi·ªÉm d∆∞∆°ng, v√† s·ªë ng∆∞·ªùi d∆∞∆°ng b·∫±ng s·ªë ng∆∞·ªùi √¢m.
            return positivePlayers > 0 && positivePlayers === negativePlayers;
        
        case 'REBEL':
            return player.loneWolfWins >= 3;
        
        case 'OUTLAW': case 'INQUISITOR':
            return player.score >= 15;
        
        case 'ASSASSIN':
            return player.score >= 15 && player.successfulAssassination;
        
        case 'PUPPETEER':
            const puppet = gs.players.find(p => p.id === player.puppetId);
            if (!puppet) return false;
            // ƒêi·ªÅu ki·ªán th·∫Øng c·ªßa K·∫ª Thao T√∫ng l√† Con R·ªëi c·ªßa h·ªç th·∫Øng.
            // C√≥ th·ªÉ th·∫Øng b·∫±ng ƒëi·ªÉm, ho·∫∑c th·∫Øng b·∫±ng vai tr√≤ ri√™ng c·ªßa Con R·ªëi (g·ªçi ƒë·ªá quy).
            return (puppet.score >= gs.winScore) || checkRoleVictorySingle(gs, puppet);

        // C√°c vai tr√≤ kh√°c (nh∆∞ Th·∫ßy T·∫ø) kh√¥ng c√≥ ƒëi·ªÅu ki·ªán th·∫Øng ri√™ng.
        default:
            return false;
    }
}

/**
 * L·∫•y danh s√°ch ng∆∞·ªùi ch∆°i c√≥ ƒëi·ªÉm cao nh·∫•t ho·∫∑c th·∫•p nh·∫•t.
 * @param {Array} players - M·∫£ng ng∆∞·ªùi ch∆°i.
 * @param {'highest' | 'lowest'} type - Lo·∫°i c·∫ßn t√¨m.
 * @returns {Array} - M·∫£ng ng∆∞·ªùi ch∆°i th·ªèa m√£n.
 */
function getPlayersByScore(players, type) {
    const activePlayers = players.filter(p => !p.isDefeated && !p.disconnected);
    if (activePlayers.length === 0) return [];
    
    const scores = activePlayers.map(p => p.score);
    const criticalScore = type === 'highest' ? Math.max(...scores) : Math.min(...scores);
    
    return activePlayers.filter(p => p.score === criticalScore);
}


// --- LOGIC CHO BOT (Tr√≠ tu·ªá nh√¢n t·∫°o) ---
// T√°ch logic AI ra ƒë√¢y ƒë·ªÉ gi·ªØ cho c√°c h√†m lu·ªìng game s·∫°ch s·∫Ω.

/**
 * K√≠ch ho·∫°t h√†nh ƒë·ªông cho c√°c bot trong giai ƒëo·∫°n L·ª±a Ch·ªçn.
 * @param {string} roomCode
 * @param {Object} rooms
 * @param {Server} io
 */
function triggerBotChoices(roomCode, rooms, io) {
    rooms[roomCode]?.gameState?.players.forEach(p => {
        if (p.isBot && !p.isDefeated) {
            // Bot s·∫Ω ch·ªçn sau m·ªôt kho·∫£ng th·ªùi gian ng·∫´u nhi√™n ƒë·ªÉ m√¥ ph·ªèng ng∆∞·ªùi th·∫≠t.
            setTimeout(() => {
                if (!p.chosenAction) {
                    let choice;
                    // H√†nh vi c·ªßa bot d·ª±a tr√™n "t√≠nh c√°ch" ƒë∆∞·ª£c g√°n l√∫c t·∫°o.
                    switch(p.personality) {
                        case 'aggressive': // ∆Øu ti√™n Ph√° Ho·∫°i
                            choice = Math.random() < 0.7 ? 'Ph√° Ho·∫°i' : 'Gi·∫£i M√£';
                            break;
                        case 'cautious': // ∆Øu ti√™n Gi·∫£i M√£ v√† Quan S√°t
                            choice = Math.random() < 0.75 ? 'Gi·∫£i M√£' : 'Quan S√°t';
                            break;
                        default: // Ng·∫´u nhi√™n ho√†n to√†n
                            choice = ['Gi·∫£i M√£', 'Ph√° Ho·∫°i', 'Quan S√°t'][Math.floor(Math.random() * 3)];
                    }
                    handlePlayerChoice(roomCode, p.id, choice, rooms, io);
                }
            }, Math.random() * 5000 + 2000); // Ch·ªçn sau 2-7 gi√¢y
        }
    });
}

/**
 * K√≠ch ho·∫°t h√†nh ƒë·ªông cho c√°c bot trong giai ƒëo·∫°n Ho√†ng H√¥n.
 * @param {string} roomCode
 * @param {Object} rooms
 * @param {Server} io
 */
function triggerBotChaosAction(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;

    const bots = gs.players.filter(p => p.isBot && !p.isDefeated);
    const potentialTargets = gs.players.filter(p => !p.isDefeated);
    if (bots.length === 0 || potentialTargets.length < 2) return;

    bots.forEach(bot => {
        setTimeout(() => {
            // Ki·ªÉm tra l·∫°i tr·∫°ng th√°i tr∆∞·ªõc khi h√†nh ƒë·ªông, v√¨ c√≥ th·ªÉ ng∆∞·ªùi kh√°c ƒë√£ k·∫øt th√∫c phase
            if (gs.phase !== 'chaos') return;

            const validTargets = potentialTargets.filter(p => p.id !== bot.id);
            if (validTargets.length === 0) return;

            const target = validTargets[Math.floor(Math.random() * validTargets.length)];
            const actionProbability = bot.personality === 'aggressive' ? 0.6 : (bot.personality === 'cautious' ? 0.3 : 0.4);

            if (Math.random() < actionProbability) {
                // Bot hi·∫øu chi·∫øn s·∫Ω ∆∞u ti√™n V·∫°ch Tr·∫ßn, bot c·∫©n tr·ªçng ∆∞u ti√™n Ph·ªëi H·ª£p.
                const actionType = (bot.personality === 'cautious' && Math.random() < 0.8) ? 'Ph·ªëi H·ª£p' : 'V·∫°ch Tr·∫ßn';
                
                if (actionType === 'V·∫°ch Tr·∫ßn') {
                    const guess = ['Gi·∫£i M√£', 'Ph√° Ho·∫°i', 'Quan S√°t'][Math.floor(Math.random() * 3)];
                    handleChaosAction(roomCode, bot.id, target.id, 'V·∫°ch Tr·∫ßn', guess, rooms, io);
                } else {
                    handleChaosAction(roomCode, bot.id, target.id, 'Ph·ªëi H·ª£p', null, rooms, io);
                }
            } else {
                // ƒê√¥i khi bot s·∫Ω ch·ªçn b·ªè qua
                gs.roundData.votesToSkip.add(bot.id);
                io.to(roomCode).emit('updateSkipVoteCount', gs.roundData.votesToSkip.size, potentialTargets.length);
            }
        }, Math.random() * 10000 + 5000); // H√†nh ƒë·ªông sau 5-15 gi√¢y
    });
}

/**
 * X·ª≠ l√Ω h√†nh ƒë·ªông B√πa L√∫ L·∫´n c·ªßa Bot (n·∫øu n√≥ r√∫t ph·∫£i Ti·∫øng V·ªçng n√†y).
 * @param {string} roomCode
 * @param {string} botId
 * @param {Object} rooms
 * @param {Server} io
 */
function handleBotAmnesia(roomCode, botId, rooms, io) {
    const gs = rooms[roomCode].gameState;
    const bot = gs.players.find(p => p.id === botId);
    io.to(roomCode).emit('logMessage', { type: 'warning', message: `üß† ${bot.name} (Bot) ƒëang s·ª≠ d·ª•ng B√πa L√∫ L·∫´n...` });

    setTimeout(() => {
        const activePlayers = gs.players.filter(p => !p.isDefeated);
        if (activePlayers.length < 2) {
            startChaosPhase(roomCode, rooms, io); // Kh√¥ng ƒë·ªß ng∆∞·ªùi ƒë·ªÉ ho√°n ƒë·ªïi
            return;
        }
        
        // Ch·ªçn ng·∫´u nhi√™n 2 ng∆∞·ªùi kh√°c nhau
        let p1Idx = Math.floor(Math.random() * activePlayers.length);
        let p2Idx;
        do {
            p2Idx = Math.floor(Math.random() * activePlayers.length);
        } while (p1Idx === p2Idx);
        
        const p1 = activePlayers[p1Idx];
        const p2 = activePlayers[p2Idx];
        
        // Ho√°n ƒë·ªïi h√†nh ƒë·ªông
        [p1.chosenAction, p2.chosenAction] = [p2.chosenAction, p1.chosenAction];
        
        io.to(roomCode).emit('logMessage', { type: 'warning', message: `üß† H√†nh ƒë·ªông c·ªßa **${p1.name}** v√† **${p2.name}** ƒë√£ b·ªã ho√°n ƒë·ªïi!` });
        startChaosPhase(roomCode, rooms, io); // Ti·∫øp t·ª•c sang giai ƒëo·∫°n Ho√†ng H√¥n
    }, 3000); // Gi·∫£ v·ªù suy nghƒ© 3 gi√¢y
}


// --- VI. EXPORTS ---
module.exports = {
    // Kh·ªüi t·∫°o v√† c√†i ƒë·∫∑t
    createGameState,
    // Lu·ªìng ch∆°i
    startNewRound,
    // H√†nh ƒë·ªông ng∆∞·ªùi ch∆°i & Bot
    handlePlayerChoice,
    handleChaosAction,
    handleUseSkill,
    // Ti·ªán √≠ch v√† ki·ªÉm tra
    checkRoleVictory,
    handleBotAmnesia
};