// game/logic.js
// ======================================================================
// CORE GAME LOGIC ("The Brain")
// Phi√™n b·∫£n ƒë√£ ƒë∆∞·ª£c tinh g·ªçn v√† t·ªëi ∆∞u h√≥a.
// ======================================================================

const config = require('./config.js');
const { ROLES, DECREES, SKILL_COSTS, GAME_CONSTANTS, ARTIFACTS } = config;
const User = require('./models/User');

// ƒê·ªëi t∆∞·ª£ng ch·ª©a logic ra quy·∫øt ƒë·ªãnh cho c√°c Bot
const BotAI = {
    makeDecision(bot, gs, phase, rooms, io) {
        if (bot.isDefeated || (phase === 'twilight' && gs.roundData.actedInTwilight.has(bot.id))) {
            return;
        }

        const activePlayers = gs.players.filter(p => !p.isDefeated && !p.disconnected);
        const nonBotPlayers = activePlayers.filter(p => !p.isBot);
        const leaders = getPlayersByScore(nonBotPlayers, 'highest');
        const laggards = getPlayersByScore(nonBotPlayers, 'lowest');
        const myRole = ROLES[bot.roleId];

        // 1. QUY·∫æT ƒê·ªäNH D√ôNG K·ª∏ NƒÇNG (m·ªôt l·∫ßn m·ªói v√≤ng)
        if (!bot.skillUsedThisRound && myRole.hasActiveSkill) {
            let cost = SKILL_COSTS[bot.skillUses] ?? SKILL_COSTS[SKILL_COSTS.length - 1];
            if (bot.score >= cost) {
                let useSkillChance = 0.3; 
                let payload = {};
                let target = null;

                switch (bot.roleId) {
                    case 'CULTIST': // K·∫ª Hi·∫øn T·∫ø mu·ªën m·∫•t ƒëi·ªÉm, n√™n s·∫Ω d√πng skill li√™n t·ª•c
                        useSkillChance = 0.9;
                        break;
                    case 'INQUISITOR': // K·∫ª Ph√°n X·ª≠ d√πng skill n·∫øu c√≥ nhi·ªÅu k·∫ª t√¨nh nghi
                        if (activePlayers.length > 4) useSkillChance = 0.6;
                        break;
                    case 'MAGNATE': // Nh√† T√†i Phi·ªát ƒë·∫ßu t∆∞ v√†o ng∆∞·ªùi m·∫°nh nh·∫•t
                        target = leaders[0];
                        if (target) {
                            payload.targetId = target.id;
                            useSkillChance = 0.7;
                        }
                        break;
                    case 'PRIEST': // Th·∫ßy T·∫ø b·∫£o v·ªá ng∆∞·ªùi y·∫øu th·∫ø nh·∫•t
                        target = laggards[0];
                        if (target) {
                            payload.targetId = target.id;
                            useSkillChance = 0.5;
                        }
                        break;
						 case 'REBEL':
                        // K·∫ª N·ªïi Lo·∫°n c√≥ m·ª•c ti√™u th·∫Øng ri√™ng n√™n r·∫•t mu·ªën d√πng k·ªπ nƒÉng.
                        useSkillChance = 0.8; 
                        
                        // AI K·∫ª N·ªïi Lo·∫°n s·∫Ω lu√¥n tuy√™n b·ªë h√†nh ƒë·ªông g√¢y r·ªëi nh·∫•t l√† "Ph√° Ho·∫°i".
                        payload.declaredAction = 'Ph√° Ho·∫°i'; 
                        
                        // V√† s·∫Ω nh·∫Øm v√†o ng∆∞·ªùi ch∆°i (kh√¥ng ph·∫£i Bot) ƒëang c√≥ ƒëi·ªÉm cao nh·∫•t.
                        target = leaders[0]; 
                        if (target) {
                            payload.punishTargetId = target.id;
                        } else {
                            // N·∫øu kh√¥ng c√≥ m·ª•c ti√™u h·ª£p l·ªá, kh√¥ng d√πng k·ªπ nƒÉng.
                            useSkillChance = 0; 
                        }
                        break;
                }

                if (Math.random() < useSkillChance) {
                    // T·∫°o m·ªôt socket gi·∫£ ƒë·ªÉ truy·ªÅn v√†o h√†m handleUseSkill
                    const fakeSocket = { id: bot.id };
                    // B√¢y gi·ªù, payload ƒë√£ ch·ª©a ƒë·∫ßy ƒë·ªß th√¥ng tin c·∫ßn thi·∫øt cho K·∫ª N·ªïi Lo·∫°n
                    handleUseSkill(fakeSocket, gs.roomCode, payload, rooms, io);
                    return; // D·ª´ng l·∫°i sau khi d√πng skill ƒë·ªÉ tr√°nh h√†nh ƒë·ªông 2 l·∫ßn
                }
            }
        }
        
        // 2. QUY·∫æT ƒê·ªäNH H√ÄNH ƒê·ªòNG THEO GIAI ƒêO·∫†N
        switch (phase) {
            case 'exploration':
                this.decideExplorationAction(bot, gs, nonBotPlayers, leaders, laggards, rooms, io);
                break;
            case 'coordination':
            case 'twilight':
                this.decideTwilightOrCoordinationAction(bot, gs, phase, nonBotPlayers, leaders, laggards, rooms, io);
                break;
        }
    },

    decideExplorationAction(bot, gs, nonBotPlayers, leaders, laggards, rooms, io) {
        let choice = 'Quan S√°t';
        let payload = {};
        let target = null;
        
        switch (bot.roleId) {
            case 'INQUISITOR':
            case 'PEACEMAKER':
            case 'MAGNATE':
                choice = 'Gi·∫£i M√£';
                break;
            case 'CULTIST':
            case 'REBEL':
                choice = 'Ph√° Ho·∫°i';
                target = leaders[0] || nonBotPlayers[0];
                if (target) payload.targetId = target.id;
                break;
            default:
                if (bot.score < 5) {
                    choice = 'Gi·∫£i M√£';
                } else {
                    choice = (Math.random() < 0.6) ? 'Gi·∫£i M√£' : 'Ph√° Ho·∫°i';
                    if (choice === 'Ph√° Ho·∫°i') {
                        target = leaders[0] || nonBotPlayers[0];
                        if (target) payload.targetId = target.id;
                    }
                }
                break;
        }
        
        if (choice === 'Ph√° Ho·∫°i' && !payload.targetId) {
            choice = 'Quan S√°t';
        }

        handlePlayerChoice(gs.roomCode, bot.id, choice, rooms, io, payload);
    },

    decideTwilightOrCoordinationAction(bot, gs, phase, nonBotPlayers, leaders, laggards, rooms, io) {
        if (Math.random() > 0.8 || nonBotPlayers.length === 0) {
            handleVoteToSkip(gs.roomCode, bot.id, phase, rooms, io);
            return;
        }

        let target = laggards[0] || nonBotPlayers[Math.floor(Math.random() * nonBotPlayers.length)];
        if (!target) {
             handleVoteToSkip(gs.roomCode, bot.id, phase, rooms, io);
             return;
        }

        if (phase === 'coordination') {
            handleCoordination(gs.roomCode, bot.id, target.id, rooms, io);
        } else if (phase === 'twilight') {
            let guess = 'Gi·∫£i M√£';
            switch (bot.roleId) {
                case 'INQUISITOR':
                    guess = 'Ph√° Ho·∫°i';
                    break;
                case 'CULTIST':
                    guess = 'Ph√° Ho·∫°i'; 
                    break;
                default:
                    if (target.score < 0) {
                        guess = 'Gi·∫£i M√£';
                    } else {
                        guess = (Math.random() < 0.5) ? 'Gi·∫£i M√£' : 'Ph√° Ho·∫°i';
                    }
                    break;
            }
            io.to(gs.roomCode).emit('playerAccused', { initiatorId: bot.id, targetId: target.id });
           io.to(gs.roomCode).emit('logMessage', { type: 'info', message: `üî• M·ªôt ng∆∞·ªùi ch∆°i ƒë√£ V·∫°ch Tr·∫ßn ng∆∞·ªùi kh√°c!` });
            handleTwilightAction(gs.roomCode, bot.id, target.id, 'V·∫°ch Tr·∫ßn', guess, rooms, io);
        }
    }
};

// --- H√ÄM CHO CH·ª®C NƒÇNG CH∆†I L·∫†I ---
function resetRoomForRematch(room) {
    if (!room) return;
	 if (room.gameState) {
        room.players = room.gameState.players.filter(p => !p.disconnected);
    }
    room.gameState = null;
    room.players.forEach(player => {
        if (!player.isBot) {
            player.isReady = false;
        }
        delete player.score;
        delete player.chosenAction;
        delete player.roleId;
        delete player.artifacts;
        delete player.sabotageTargetId;
    });
    console.log(`[Rematch] ƒê√£ reset ph√≤ng.`);
}

// --- H√ÄM LOGIC C·ªî V·∫¨T ---
function handleFindArtifact(player, type, gs, io) {
    const availableArtifacts = Object.values(ARTIFACTS).filter(a =>
        a.type === type && gs.artifactPool.includes(a.id)
    );
    if (availableArtifacts.length === 0) return;

    const foundArtifact = availableArtifacts[Math.floor(Math.random() * availableArtifacts.length)];
    gs.artifactPool = gs.artifactPool.filter(id => id !== foundArtifact.id); 

    if (player.artifacts.length === 0) {
        player.artifacts.push(foundArtifact);
        io.to(player.id).emit('artifactUpdate', {
            artifacts: player.artifacts,
            message: `B·∫°n ƒë√£ t√¨m th·∫•y: ${foundArtifact.name}!`
        });
        io.to(player.id).emit('logMessage', {type: 'success', message: `B·∫°n ƒë√£ t√¨m th·∫•y: <b>${foundArtifact.name}</b>!`});
    } else {
        const currentArtifact = player.artifacts[0];
        io.to(player.id).emit('promptArtifactChoice', {
            currentArtifact: currentArtifact,
            newArtifact: foundArtifact
        });
    }
}

function handleArtifactDecision(roomCode, playerId, decision, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    const player = gs.players.find(p => p.id === playerId);
    if (!player) return;

    const newArtifact = ARTIFACTS[decision.newArtifactId];

    if (decision.choice === 'take_new') {
        const oldArtifactId = player.artifacts[0].id;
        gs.artifactPool.push(oldArtifactId);
        player.artifacts = [newArtifact];
        io.to(player.id).emit('logMessage', {type: 'success', message: `B·∫°n ƒë√£ nh·∫≠n <b>${newArtifact.name}</b> v√† tr·∫£ l·∫°i <b>${ARTIFACTS[oldArtifactId].name}</b>.`});
    } else {
        gs.artifactPool.push(newArtifact.id);
        io.to(player.id).emit('logMessage', {type: 'info', message: `B·∫°n ƒë√£ quy·∫øt ƒë·ªãnh gi·ªØ l·∫°i <b>${player.artifacts[0].name}</b>.`});
    }
    io.to(player.id).emit('artifactUpdate', { artifacts: player.artifacts });
}


// --- C√ÅC H√ÄM TI·ªÜN √çCH & KH·ªûI T·∫†O ---
function getPlayersByScore(players, type) {
    const activePlayers = players.filter(p => !p.isDefeated && !p.disconnected);
    if (activePlayers.length === 0) return [];
    const scores = activePlayers.map(p => p.score);
    if (scores.length === 0) return [];
    const criticalScore = type === 'highest' ? Math.max(...scores) : Math.min(...scores);
    return activePlayers.filter(p => p.score === criticalScore);
}

function initializeAssassin(assassin, allPlayers) {
    const potentialTargets = allPlayers.filter(p => p.id !== assassin.id);
    if (potentialTargets.length > 0) {
        assassin.bountyTargetId = potentialTargets[Math.floor(Math.random() * potentialTargets.length)].id;
    }
}

// [S·ª¨A L·ªñI & N√ÇNG C·∫§P] K·∫ª B·∫Øt Ch∆∞·ªõc gi·ªù s·∫Ω bi·∫øt vai tr√≤ c·ªßa m·ª•c ti√™u
function initializeMimic(mimic, allPlayers, io) {
    const potentialTargets = allPlayers.filter(p => 
        p.id !== mimic.id && 
        !p.disconnected && 
        p.roleId !== 'MIMIC'
    );

    if (potentialTargets.length > 0) {
        const targetPlayer = potentialTargets[Math.floor(Math.random() * potentialTargets.length)];
        mimic.mimicTargetId = targetPlayer.id;
        const targetRole = ROLES[targetPlayer.roleId];
        
        mimic.canMimicSkill = targetRole.hasActiveSkill;

        io.to(mimic.id).emit('privateInfo', {
            title: "Sao Ch√©p", 
            text: `ƒê√™m nay b·∫°n s·∫Ω sao ch√©p h√†nh ƒë·ªông c·ªßa **${targetPlayer.name}**. ` + 
                  (targetRole.hasActiveSkill ? `B·∫°n c√≥ th·ªÉ d√πng k√© k·ªπ nƒÉng c·ªßa h·ªç.` : `H·ªç kh√¥ng c√≥ k·ªπ nƒÉng k√≠ch ho·∫°t ƒë·ªÉ b·∫°n d√πng k√©.`)
        });

        const updatedRoleData = { 
            ...ROLES[mimic.roleId], 
            id: mimic.roleId,
            canMimicSkill: mimic.canMimicSkill,
            currentSkillCost: SKILL_COSTS[mimic.skillUses] ?? SKILL_COSTS[SKILL_COSTS.length - 1]
        };
        io.to(mimic.id).emit('yourRoleIs', updatedRoleData);
     
    } else {
        mimic.mimicTargetId = null;
        mimic.canMimicSkill = false;
         io.to(mimic.id).emit('privateInfo', {
            title: "L·ªói Sao Ch√©p", 
            text: `Kh√¥ng c√≤n m·ª•c ti√™u h·ª£p l·ªá ƒë·ªÉ b·∫°n sao ch√©p. B·∫°n s·∫Ω kh√¥ng h√†nh ƒë·ªông.`
        });
    }
}

const roleInitializers = { 'ASSASSIN': initializeAssassin };

function initializeSpecialRoles(gs, io) {
    gs.players.forEach(player => {
        if (roleInitializers[player.roleId]) {
            roleInitializers[player.roleId](player, gs.players, io);
        }
    });
}
function createGameState(players, io, settings = {}) {
    console.log('[GameState] ƒêang t·∫°o v√°n ƒë·∫•u m·ªõi v·ªõi c√°c c√†i ƒë·∫∑t:', settings);

    // --- B∆Ø·ªöC 1: THI·∫æT L·∫¨P C√ÅC THAM S·ªê C∆† B·∫¢N C·ª¶A GAME ---
    // T√≠ch h·ª£p c√°c t√πy ch·ªânh c·ªßa Host ho·∫∑c s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh.

    const numPlayers = players.length;

    // S·ª≠ d·ª•ng ƒëi·ªÉm th·∫Øng t·ª´ settings, n·∫øu kh√¥ng c√≥ th√¨ t√≠nh theo s·ªë ng∆∞·ªùi ch∆°i.
    // Vi·ªác gi·ªõi h·∫°n (clamp) ƒëi·ªÉm s·ªë gi√∫p tr√°nh c√°c gi√° tr·ªã b·∫•t th∆∞·ªùng.
    const winScore = settings.winScore 
        ? Math.max(5, Math.min(50, settings.winScore)) 
        : (numPlayers <= 4 ? 15 : (numPlayers <= 8 ? 20 : 25));
    
    const loseScore = -winScore;

    // L·∫•y danh s√°ch c√°c vai tr√≤ v√† ti·∫øng v·ªçng b·ªã c·∫•m t·ª´ settings.
    const bannedRoles = settings.bannedRoles || [];
    const bannedDecrees = settings.bannedDecrees || [];
    
    // --- B∆Ø·ªöC 2: G√ÅN VAI TR√í ƒê·ªòC NH·∫§T (ƒê√É L·ªåC C√ÅC VAI TR√í B·ªä C·∫§M) ---
    // ƒê√¢y l√† ph·∫ßn c·ªët l√µi c·ªßa t√≠nh nƒÉng "C·∫•m Vai Tr√≤".

    // 1. L·ªçc ra danh s√°ch c√°c vai tr√≤ c√≥ th·ªÉ s·ª≠ d·ª•ng.
    const availableRoles = config.ALL_ROLE_IDS.filter(id => !bannedRoles.includes(id));

    // 2. Ki·ªÉm tra m·ªôt tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: N·∫øu Host c·∫•m qu√° nhi·ªÅu vai tr√≤.
    if (availableRoles.length < numPlayers) {
        console.error(`[GameState Error] Kh√¥ng ƒë·ªß vai tr√≤ ƒë·ªÉ chia! C·∫ßn ${numPlayers} nh∆∞ng ch·ªâ c√≥ ${availableRoles.length} sau khi l·ªçc.`);
        // Trong m·ªôt m√¥i tr∆∞·ªùng production, b·∫°n n√™n g·ª≠i l·ªói v·ªÅ cho client.
        // ·ªû ƒë√¢y, ch√∫ng ta s·∫Ω ti·∫øp t·ª•c nh∆∞ng c√≥ th·ªÉ s·∫Ω g√¢y l·ªói.
    }

    // 3. X√°o tr·ªôn danh s√°ch vai tr√≤ kh·∫£ d·ª•ng b·∫±ng thu·∫≠t to√°n Fisher-Yates.
    for (let i = availableRoles.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [availableRoles[i], availableRoles[j]] = [availableRoles[j], availableRoles[i]];
    }

    // 4. L·∫•y ƒë√∫ng s·ªë l∆∞·ª£ng vai tr√≤ c·∫ßn thi·∫øt t·ª´ ƒë·∫ßu danh s√°ch ƒë√£ x√°o tr·ªôn.
    const rolesInThisGame = availableRoles.slice(0, numPlayers);
    
    // --- B∆Ø·ªöC 3: KH·ªûI T·∫†O ƒê·ªêI T∆Ø·ª¢NG GAMESTATE HO√ÄN CH·ªàNH ---
    // ƒê√¢y l√† "Single Source of Truth" cho to√†n b·ªô v√°n ƒë·∫•u.

    const gameState = {
        players: players.map((p, index) => ({
            ...p,
          score: 0,
            roleId: rolesInThisGame[index], // G√°n vai tr√≤ ƒë√£ ƒë∆∞·ª£c x√°o tr·ªôn v√† l·ªçc
            artifacts: [],
            
            // Tr·∫°ng th√°i theo d√µi ti·∫øn tr√¨nh d√†i h·∫°n (cho ƒëi·ªÅu ki·ªán th·∫Øng ri√™ng)
            skillUses: 0,
            consecutiveSuccessAccusations: 0, // cho Prophet
            hauntSuccessCount: 0,              // cho Phantom
            hasReached7: false,                // cho Gambler
            hasReachedMinus7: false,           // cho Gambler
            loneWolfWins: 0,                   // cho Rebel
            bountyTargetId: null,              // cho Assassin
            mimicTargetId: null,               // cho Mimic
            canMimicSkill: false,              // cho Mimic
            
            // Tr·∫°ng th√°i t·∫°m th·ªùi, ƒë∆∞·ª£c reset m·ªói v√≤ng
            chosenAction: null,
            sabotageTargetId: null,
            isBlessed: false,                  // b·ªüi Priest
            skillUsedThisRound: false,
            isSkillDisabled: false,
            hasTripleVote: false,              // b·ªüi Cultist
            
            // ƒê·∫£m b·∫£o c√°c thu·ªôc t√≠nh k·∫øt n·ªëi ƒë∆∞·ª£c kh·ªüi t·∫°o
            disconnected: p.disconnected || false,
            disconnectTime: p.disconnectTime || null,
        })),
      currentRound: 0,
        winScore,       // ƒêi·ªÉm th·∫Øng ƒë√£ ƒë∆∞·ª£c t√πy ch·ªânh
        loseScore,      // ƒêi·ªÉm thua t∆∞∆°ng ·ª©ng
        phase: 'waiting', // Tr·∫°ng th√°i ban ƒë·∫ßu
        roundData: {},    // D·ªØ li·ªáu t·∫°m th·ªùi c·ªßa m·ªói v√≤ng
        
        // C√°c b·ªô b√†i v√† c√†i ƒë·∫∑t
        decreeDeck: [],   // S·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o ·ªü b∆∞·ªõc 4
        decreeDiscard: [],
        artifactPool: [...config.ALL_ARTIFACT_IDS], // B·ªÉ c·ªï v·∫≠t chung
        rolesInGame: rolesInThisGame, // L∆∞u l·∫°i c√°c vai tr√≤ c√≥ trong game n√†y
        settings: settings, // L∆∞u l·∫°i c√°c c√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng cho v√°n ƒë·∫•u
        
        // C√°c bi·∫øn theo d√µi kh√°c
        consecutiveDraws: 0, // cho Peacemaker
        nextDecreeChooser: null, // cho Di S·∫£n K·∫ª Ti√™n Phong
        failedAccusationsThisRound: 0, // cho Mind Breaker
    };

    // --- B∆Ø·ªöC 4: KH·ªûI T·∫†O C√ÅC B·ªò B√ÄI V√Ä VAI TR√í ƒê·∫∂C BI·ªÜT ---
    
    // 1. Kh·ªüi t·∫°o b·ªô b√†i Ti·∫øng V·ªçng, l·ªçc c√°c l√° b·ªã c·∫•m v√† x√°o tr·ªôn.
    const availableDecrees = config.ALL_DECREE_IDS.filter(id => !bannedDecrees.includes(id));
    for (let i = availableDecrees.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [availableDecrees[i], availableDecrees[j]] = [availableDecrees[j], availableDecrees[i]];
    }
    gameState.decreeDeck = availableDecrees;
    
    // 2. G·ªçi c√°c h√†m kh·ªüi t·∫°o cho nh·ªØng vai tr√≤ c·∫ßn thi·∫øt l·∫≠p ban ƒë·∫ßu (VD: Assassin, Mimic).
    // H√†m n√†y s·∫Ω duy·ªát qua ng∆∞·ªùi ch∆°i v√† g·ªçi h√†m kh·ªüi t·∫°o t∆∞∆°ng ·ª©ng v·ªõi vai tr√≤ c·ªßa h·ªç.
    initializeSpecialRoles(gameState, io);

    console.log('[GameState] T·∫°o GameState th√†nh c√¥ng.');
    
    // --- B∆Ø·ªöC 5: TR·∫¢ V·ªÄ ƒê·ªêI T∆Ø·ª¢NG GAMESTATE HO√ÄN CH·ªàNH ---
    return gameState;
}

function shuffleDecreeDeck(gs) {
    gs.decreeDeck = [...config.ALL_DECREE_IDS];
    for (let i = gs.decreeDeck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [gs.decreeDeck[i], gs.decreeDeck[j]] = [gs.decreeDeck[j], gs.decreeDeck[i]];
    }
    gs.decreeDiscard = [];
}

function startNewRound(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;

    gs.currentRound++;
    gs.phase = 'exploration';
      gs.roundData = { decrees: [], coordinationVotes: [], actedInTwilight: new Set(), failedAccusationsThisRound: 0, linkedPlayers: [] };
	   const RECONNECT_WINDOW_MS = 120000; // 2 ph√∫t
    gs.players.forEach(p => {
        if (p.disconnected && (Date.now() - p.disconnectTime > RECONNECT_WINDOW_MS)) {
            if (!p.isDefeated) {
                p.isDefeated = true; // ƒê√°nh d·∫•u l√† ƒë√£ thua
                io.to(roomCode).emit('logMessage', { type: 'error', message: `${p.name} ƒë√£ ng·∫Øt k·∫øt n·ªëi qu√° l√¢u v√† b·ªã lo·∫°i.` });
            }
        }
    });

    // [S·ª¨A L·ªñI] K·∫ª B·∫Øt Ch∆∞·ªõc ch·ªâ ƒë∆∞·ª£c kh·ªüi t·∫°o m·ªôt l·∫ßn ·ªü ƒë·∫ßu m·ªói v√≤ng m·ªõi
    const mimic = gs.players.find(p => p.roleId === 'MIMIC' && !p.isDefeated);
    if (mimic) { initializeMimic(mimic, gs.players, io); }

    io.to(roomCode).emit('newRound', {
        roundNumber: gs.currentRound, players: gs.players, duration: GAME_CONSTANTS.CHOICE_DURATION
    });
    gs.roundData.choiceTimer = setTimeout(() => {
        const currentRoom = rooms[roomCode];
        if (!currentRoom || !currentRoom.gameState || currentRoom.gameState.phase !== 'exploration') return;
         const activePlayers = currentRoom.gameState.players.filter(p => !p.isDefeated); // L·∫•y c·∫£ ng∆∞·ªùi disconnected
        
        activePlayers.forEach(p => {
            // N·∫øu ng∆∞·ªùi ch∆°i ch∆∞a ch·ªçn h√†nh ƒë·ªông (bao g·ªìm c·∫£ ng∆∞·ªùi ƒëang ng·∫Øt k·∫øt n·ªëi)
            if (!p.chosenAction) {
                // Ch·ªçn m·ªôt trong 3 h√†nh ƒë·ªông m·ªôt c√°ch ng·∫´u nhi√™n
                const choice = ['Gi·∫£i M√£', 'Ph√° Ho·∫°i', 'Quan S√°t'][Math.floor(Math.random() * 3)];
                let payload = {};
                if (choice === 'Ph√° Ho·∫°i') {
                    // Ch·ªçn m·ªôt m·ª•c ti√™u ng·∫´u nhi√™n c√≤n s·ªëng v√† kh√¥ng ph·∫£i ch√≠nh m√¨nh
                    const potentialTargets = activePlayers.filter(t => t.id !== p.id && !t.isDefeated);
                    if (potentialTargets.length > 0) {
                        payload.targetId = potentialTargets[Math.floor(Math.random() * potentialTargets.length)].id;
                    }
                }
                // G·ªçi h√†m x·ª≠ l√Ω h√†nh ƒë·ªông cho ng∆∞·ªùi ch∆°i n√†y
                handlePlayerChoice(roomCode, p.id, choice, rooms, io, payload);
            }
        });
    }, GAME_CONSTANTS.CHOICE_DURATION * 1000);

    triggerBotChoices(roomCode, rooms, io);
}

function handlePlayerChoice(roomCode, playerId, choice, rooms, io, payload = {}) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || gs.phase !== 'exploration') return;
    const player = gs.players.find(p => p.id === playerId);

    if (player && !player.chosenAction && !player.isDefeated) {
        player.chosenAction = choice;
        if (choice === 'Ph√° Ho·∫°i' && payload.targetId) {
            player.sabotageTargetId = payload.targetId;
        }
        io.to(roomCode).emit('playerChose', playerId);

        const activePlayers = gs.players.filter(p => !p.isDefeated && !p.disconnected);
        if (activePlayers.every(p => p.chosenAction)) {
            clearTimeout(gs.roundData.choiceTimer);
            startCoordinationPhase(roomCode, rooms, io);
        }
    }
}
function handleVoteToSkip(roomCode, playerId, phase, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || (gs.phase !== 'coordination' && gs.phase !== 'twilight')) return;

    // === B·∫ÆT ƒê·∫¶U D√íNG KI·ªÇM TRA M·ªöI ===
    // √Åp d·ª•ng ki·ªÉm tra t∆∞∆°ng t·ª± cho h√†nh ƒë·ªông skip/rest
    if (gs.roundData.actedInTwilight.has(playerId)) {
        return;
    }

    gs.roundData.actedInTwilight.add(playerId);

    if (phase === 'coordination') {
        if (!gs.roundData.votesToSkipcoordination) gs.roundData.votesToSkipcoordination = new Set();
        gs.roundData.votesToSkipcoordination.add(playerId);
    } else {
        if (!gs.roundData.votesToSkiptwilight) gs.roundData.votesToSkiptwilight = new Set();
        gs.roundData.votesToSkiptwilight.add(playerId);
    }
    
    const buttonId = phase === 'coordination' ? 'skip-coordination-btn' : 'twilight-rest-btn';
    const voteSet = phase === 'coordination' ? gs.roundData.votesToSkipcoordination : gs.roundData.votesToSkiptwilight;

    io.to(roomCode).emit('updateSkipVoteCount', { 
        buttonId: buttonId,
        count: voteSet.size,
        total: gs.players.filter(p => !p.isDefeated && !p.disconnected).length
    });

    const activePlayersCount = gs.players.filter(p => !p.isDefeated && !p.disconnected).length;
    if (gs.roundData.actedInTwilight.size >= activePlayersCount) {
        if (phase === 'coordination') {
            clearTimeout(gs.roundData.coordinationTimer);
            io.to(roomCode).emit('logMessage', { type: 'info', message: "Giai ƒëo·∫°n Ph·ªëi h·ª£p k·∫øt th√∫c." });
            io.to(roomCode).emit('coordinationPhaseEnded');
            setTimeout(() => revealDecreeAndContinue(roomCode, rooms, io), 2000);
        } else if (phase === 'twilight') {
            endTwilightPhase("T·∫•t c·∫£ Th·ª£ SƒÉn ƒë√£ quy·∫øt ƒë·ªãnh h√†nh ƒë·ªông trong ho√†ng h√¥n.", roomCode, rooms, io);
        }
    }
}

function startCoordinationPhase(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;

    gs.phase = 'coordination';
    gs.roundData.actedInTwilight = new Set();
    gs.roundData.votesToSkipcoordination = new Set();

    const DURATION = 15;
    io.to(roomCode).emit('coordinationPhaseStarted', { duration: DURATION });
    
    gs.roundData.coordinationTimer = setTimeout(() => {
        if (!rooms[roomCode] || rooms[roomCode].gameState.phase !== 'coordination') return;
        revealDecreeAndContinue(roomCode, rooms, io);
    }, DURATION * 1000);
}

function handleUseArtifact(socket, roomCode, artifactId, payload, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    const player = gs.players.find(p => p.id === socket.id);
    const artifactIndex = player.artifacts.findIndex(a => a.id === artifactId);

    if (!player || artifactIndex === -1) return;
    
    io.to(roomCode).emit('logMessage', { type: 'warning', message: `üìú M·ªôt C·ªï v·∫≠t b√≠ ·∫©n ƒë√£ k√≠ch ho·∫°t!` });
    
    const artifact = player.artifacts[artifactIndex];
    artifact.usedThisRound = true;

    // Ch·ªâ x√≥a v√† tr·∫£ v·ªÅ b·ªÉ nh·ªØng C·ªï v·∫≠t d√πng 1 l·∫ßn ngay l·∫≠p t·ª©c
    if (artifact.is_activatable) {
        player.artifacts.splice(artifactIndex, 1);
        gs.artifactPool.push(artifactId);
    }
    
    io.to(player.id).emit('artifactUpdate', { artifacts: player.artifacts });
}

function handleCoordination(roomCode, initiatorId, targetId, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    const initiator = gs.players.find(p => p.id === initiatorId);
    const target = gs.players.find(p => p.id === targetId);
    if (!initiator || !target) return;

    gs.roundData.coordinationVotes.push({ initiatorId, targetId });
    io.to(roomCode).emit('logMessage', { type: 'info', message: `ü§ù **${initiator.name}** ƒë√£ ƒë·ªÅ ngh·ªã Ph·ªëi H·ª£p v·ªõi **${target.name}**.` });

    if (target.roleId === 'ASSASSIN') {
        io.to(target.id).emit('privateInfo', { title: 'B·ªã Nh·∫Øm ƒê·∫øn', text: `**${initiator.name}** ƒë√£ Ph·ªëi H·ª£p v·ªõi b·∫°n. H√†nh ƒë·ªông b√≠ m·∫≠t c·ªßa h·ªç l√†: **${initiator.chosenAction}**` });
    }
}

function revealDecreeAndContinue(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    gs.phase = 'decree';
    if (gs.currentRound === 1) {
        io.to(roomCode).emit('logMessage', { type: 'info', message: "ƒê√™m ƒë·∫ßu ti√™n y√™n tƒ©nh, kh√¥ng c√≥ Ti·∫øng V·ªçng." });
        startTwilightPhase(roomCode, rooms, io);
        return;
    }

    if (gs.decreeDeck.length === 0) shuffleDecreeDeck(gs);
    const decreeChooser = gs.nextDecreeChooser || getPlayersByScore(gs.players.filter(p => !p.isDefeated), 'lowest')[0];
    gs.nextDecreeChooser = null;

    let decreesToReveal = [];
    let firstDecreeId = gs.decreeDeck.pop();
    gs.decreeDiscard.push(firstDecreeId);

    if (firstDecreeId === 'DEM_SONG_TRUNG') {
        decreesToReveal.push({ ...DECREES[firstDecreeId], id: firstDecreeId });
        if (gs.decreeDeck.length === 0) shuffleDecreeDeck(gs);
        firstDecreeId = gs.decreeDeck.pop();
        gs.decreeDiscard.push(firstDecreeId);
    }
    decreesToReveal.push({ ...DECREES[firstDecreeId], id: firstDecreeId });
    gs.roundData.decrees = decreesToReveal;

    io.to(roomCode).emit('decreeRevealed', {
        drawerName: decreeChooser?.name || 'Ng√¥i ƒë·ªÅn',
        decrees: decreesToReveal.map(d => ({ name: d.name, description: d.description }))
    });

    let continueToTwilight = true;
    decreesToReveal.forEach(decree => {
        switch (decree.id) {
            case 'VU_DIEU_HON_LOAN':
               const allActions = gs.players.filter(p => !p.isDefeated && !p.disconnected).map(p => p.chosenAction);
                for (let i = allActions.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1)); [allActions[i], allActions[j]] = [allActions[j], allActions[i]]; }
                gs.players.filter(p => !p.isDefeated && !p.disconnected).forEach((p, i) => { p.chosenAction = allActions[i]; });
                io.to(roomCode).emit('logMessage', { type: 'warning', message: 'V≈© ƒêi·ªáu H·ªón Lo·∫°n! H√†nh ƒë·ªông c·ªßa m·ªçi ng∆∞·ªùi ƒë√£ b·ªã x√°o tr·ªôn!' });
                break;
            case 'AO_GIAC_DICH_CHUYEN':
               const activePlayers = gs.players.filter(p => !p.isDefeated && !p.disconnected);
                if (activePlayers.length > 1) {
                    const lastAction = activePlayers[activePlayers.length - 1].chosenAction;
                    for (let i = activePlayers.length - 1; i > 0; i--) { activePlayers[i].chosenAction = activePlayers[i - 1].chosenAction; }
                    activePlayers[0].chosenAction = lastAction;
                }
                io.to(roomCode).emit('logMessage', { type: 'warning', message: '·∫¢o Gi√°c D·ªãch Chuy·ªÉn! H√†nh ƒë·ªông ƒë√£ ƒë∆∞·ª£c chuy·ªÉn cho ng∆∞·ªùi b√™n c·∫°nh!' });
                break;
            case 'BUA_LU_LAN':
                continueToTwilight = false;
                gs.phase = 'amnesia_selection';
                if (decreeChooser) {
                    io.to(decreeChooser.id).emit('promptAmnesiaAction', { validTargets: gs.players.filter(p => !p.isDefeated).map(p => ({id: p.id, name: p.name})) });
                    io.to(roomCode).emit('logMessage', { type: 'warning', message: `üß† ${decreeChooser.name} ƒëang ho√°n ƒë·ªïi h√†nh ƒë·ªông c·ªßa hai ng∆∞·ªùi!` });
                }
                break;
            case 'DAU_TRUONG_SINH_TU':
                continueToTwilight = false;
                gs.phase = 'arena_picking';
                gs.roundData.arena = { duelist1: null, duelist2: null, bets: {} };
                if (decreeChooser) {
                    io.to(roomCode).emit('logMessage', { type: 'warning', message: `‚öîÔ∏è ${decreeChooser.name} ƒëang ch·ªçn ra hai ƒê·∫•u Sƒ©!` });
                    io.to(decreeChooser.id).emit('promptArenaPick', { validTargets: gs.players.filter(p => !p.isDefeated).map(p => ({ id: p.id, name: p.name })) });
                }
                break;
        }
    });
	
    
    if (continueToTwilight) {
        setTimeout(() => startTwilightPhase(roomCode, rooms, io), GAME_CONSTANTS.DECREE_REVEAL_DELAY);
    }
}

function handleAmnesiaAction(roomCode, data, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || gs.phase !== 'amnesia_selection') return;
    const p1 = gs.players.find(p => p.id === data.player1Id);
    const p2 = gs.players.find(p => p.id === data.player2Id);
    if (p1 && p2) {
        [p1.chosenAction, p2.chosenAction] = [p2.chosenAction, p1.chosenAction];
        io.to(roomCode).emit('logMessage', { type: 'warning', message: `üß† H√†nh ƒë·ªông c·ªßa **${p1.name}** v√† **${p2.name}** ƒë√£ b·ªã ho√°n ƒë·ªïi!` });
    }
    startTwilightPhase(roomCode, rooms, io);
}

function handleArenaPick(roomCode, data, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || gs.phase !== 'arena_picking') return;
    gs.roundData.arena.duelist1 = gs.players.find(p => p.id === data.player1Id);
    gs.roundData.arena.duelist2 = gs.players.find(p => p.id === data.player2Id);
    if (!gs.roundData.arena.duelist1 || !gs.roundData.arena.duelist2) return;
    io.to(roomCode).emit('logMessage', { type: 'info', message: `Hai ƒê·∫•u Sƒ©: **${gs.roundData.arena.duelist1.name}** v√† **${gs.roundData.arena.duelist2.name}**!` });
    gs.phase = 'arena_betting';
    const spectators = gs.players.filter(p => !p.isDefeated && p.id !== data.player1Id && p.id !== data.player2Id);
    spectators.forEach(s => {
        io.to(s.id).emit('promptArenaBet', {
            duelist1: { id: gs.roundData.arena.duelist1.id, name: gs.roundData.arena.duelist1.name },
            duelist2: { id: gs.roundData.arena.duelist2.id, name: gs.roundData.arena.duelist2.name },
            maxBet: Math.max(0, Math.min(2, s.score))
        });
    });
    io.to(roomCode).emit('logMessage', { type: 'info', message: `C√°c Kh√°n Gi·∫£ c√≥ 20 gi√¢y ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!` });
    setTimeout(() => resolveArenaDuel(roomCode, rooms, io), 20000);
}

function handleArenaBet(roomCode, playerId, betData, rooms) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || gs.phase !== 'arena_betting') return;
    const player = gs.players.find(p => p.id === playerId);
    if (!player) return;
    const amount = Math.max(0, Math.min(betData.amount, 2, player.score));
    gs.roundData.arena.bets[playerId] = { targetId: betData.targetId, amount };
}

function resolveArenaDuel(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || (gs.phase !== 'arena_betting' && gs.phase !== 'arena_picking')) return;
    gs.phase = 'arena_resolved';
    const { duelist1, duelist2, bets } = gs.roundData.arena;
    if (!duelist1 || !duelist2) return;
    const d1_success = duelist1.chosenAction === duelist2.chosenAction;
    const duelWinner = d1_success ? duelist1 : duelist2;
    io.to(roomCode).emit('logMessage', { type: 'warning', message: `Tr·∫≠n ƒë·∫•u k·∫øt th√∫c! H√†nh ƒë·ªông c·ªßa ${duelist1.name}: **${duelist1.chosenAction}**, c·ªßa ${duelist2.name}: **${duelist2.chosenAction}**.` });
    io.to(roomCode).emit('logMessage', { type: 'success', message: `**${duelWinner.name}** ƒë√£ chi·∫øn th·∫Øng trong tr·∫≠n tay ƒë√¥i!` });
    for (const spectatorId in bets) {
        const bet = bets[spectatorId];
        const spectator = gs.players.find(p => p.id === spectatorId);
        if (spectator) {
            if (bet.targetId === duelWinner.id) {
                spectator.score += bet.amount;
                io.to(spectatorId).emit('privateInfo', { title: "Th·∫Øng C∆∞·ª£c!", text: `B·∫°n ƒëo√°n ƒë√∫ng v√† nh·∫≠n ${bet.amount} Ti·∫øn ƒê·ªô.` });
            } else {
                spectator.score -= bet.amount;
                io.to(spectatorId).emit('privateInfo', { title: "Thua C∆∞·ª£c!", text: `B·∫°n ƒëo√°n sai v√† m·∫•t ${bet.amount} Ti·∫øn ƒê·ªô.` });
            }
        }
    }
    io.to(roomCode).emit('updatePlayerCards', gs.players.map(p => ({id: p.id, score: p.score})));
    setTimeout(() => calculateScoresAndEndRound(roomCode, rooms, io), 4000);
}
         
function startTwilightPhase(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    
    gs.phase = 'twilight';
    gs.roundData.votesToSkiptwilight = new Set();

    io.to(roomCode).emit('twilightPhaseStarted', { duration: GAME_CONSTANTS.CHAOS_DURATION });

    gs.roundData.twilightTimer = setTimeout(() => {
        endTwilightPhase("H·∫øt gi·ªù cho giai ƒëo·∫°n Ho√†ng H√¥n.", roomCode, rooms, io);
    }, GAME_CONSTANTS.CHAOS_DURATION * 1000);
}


function endTwilightPhase(message, roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
     if (!gs || (gs.phase !== 'twilight' && gs.phase !== 'reveal_pending' && gs.phase !== 'amnesia_selection')) return;
    
    if (gs.roundData.decrees.some(d => d.id === 'GIAO_UOC_BAT_BUOC')) {
        let penaltyMessage = "Nh·ªØng ng∆∞·ªùi kh√¥ng tu√¢n th·ªß Giao ∆Ø·ªõc B·∫Øt Bu·ªôc ƒë√£ ph·∫£i tr·∫£ gi√°: ";
        let penalized = [];
        gs.players.forEach(p => {
            if(!gs.roundData.actedInTwilight.has(p.id) && !p.isDefeated && !p.isBot) {
                p.score -= 2;
                penalized.push(p.name);
            }
        });
        if(penalized.length > 0) {
             io.to(roomCode).emit('logMessage', { type: 'error', message: penaltyMessage + penalized.join(', ') });
        }
    }

    gs.phase = 'reveal_pending';
    clearTimeout(gs.roundData.twilightTimer);
	 io.to(roomCode).emit('forceCloseTwilightOverlay');
    io.to(roomCode).emit('chaosActionResolved', { message });
    setTimeout(() => calculateScoresAndEndRound(roomCode, rooms, io), 3000);
}

function handleTwilightAction(roomCode, initiatorId, targetId, actionType, guess, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || gs.phase !== 'twilight') return;

    const initiator = gs.players.find(p => p.id === initiatorId);
    const target = gs.players.find(p => p.id === targetId);
    if (!initiator || !target || initiator.id === target.id) return;
    
    // === B·∫ÆT ƒê·∫¶U D√íNG KI·ªÇM TRA M·ªöI ===
    // N·∫øu ng∆∞·ªùi ch∆°i n√†y ƒë√£ c√≥ trong danh s√°ch h√†nh ƒë·ªông, b·ªè qua y√™u c·∫ßu n√†y
    if (gs.roundData.actedInTwilight.has(initiatorId)) {
        console.log(`[Logic Warning] Player ${initiator.name} (${initiatorId}) tried to act more than once in Twilight.`);
        return; 
    }
    // === K·∫æT TH√öC D√íNG KI·ªÇM TRA M·ªöI ===

    gs.roundData.actedInTwilight.add(initiator.id);

    const amuletIndex = initiator.artifacts.findIndex(a => a.id === 'AMULET_OF_CLARITY');
    const hasAmulet = amuletIndex !== -1;

    if (target.roleId === 'ASSASSIN') {
        io.to(target.id).emit('privateInfo', { title: 'B·ªã Nh·∫Øm ƒê·∫øn', text: `**${initiator.name}** ƒë√£ V·∫°ch Tr·∫ßn b·∫°n. H√†nh ƒë·ªông b√≠ m·∫≠t c·ªßa h·ªç l√†: **${initiator.chosenAction || 'Ch∆∞a ch·ªçn'}**` });
    }

    if (actionType === 'V·∫°ch Tr·∫ßn') {
        const success = (guess === target.chosenAction);
        let message = `üî• **${initiator.name}** ƒë√£ V·∫°ch Tr·∫ßn **${target.name}** v√† ph√°n ƒëo√°n **${success ? "ƒê√öNG" : "SAI"}**!`;
        
        if (success) {
            const isChallengeDecreeActive = gs.roundData.decrees.some(d => d.id === 'THACH_THUC_KE_DAN_DAU');
            const leaders = getPlayersByScore(gs.players, 'highest');

            if (isChallengeDecreeActive && leaders.some(leader => leader.id === target.id)) {
                [initiator.score, target.score] = [target.score, initiator.score];
                message = `‚öîÔ∏è **${initiator.name}** ƒë√£ th√°ch th·ª©c th√†nh c√¥ng K·∫ª D·∫´n ƒê·∫ßu! ƒêi·ªÉm s·ªë c·ªßa h·ªç ƒë√£ b·ªã ho√°n ƒë·ªïi!`;
            } else {
                const pointGain = hasAmulet ? 4 : 2;
                initiator.score += pointGain;
                target.score -= 2;

                if (initiator.roleId === 'INQUISITOR' && target.chosenAction === 'Ph√° Ho·∫°i') {
                    initiator.score += 1;
                }
                
                const assassin = gs.players.find(p => p.roleId === 'ASSASSIN' && !p.isDefeated);
                if (assassin && assassin.bountyTargetId === target.id) {
                    if (initiator.id === assassin.id) {
                        target.score = Math.floor(target.score / 2);
                        io.to(roomCode).emit('logMessage', { type: 'warning', message: `üí• **${assassin.name}** ƒë√£ ho√†n th√†nh h·ª£p ƒë·ªìng, ƒëi·ªÉm c·ªßa **${target.name}** b·ªã chia ƒë√¥i!` });
                    } else {
                        target.score -= 2;
                        io.to(roomCode).emit('logMessage', { type: 'error', message: `üéØ **${target.name}** l√† m·ª•c ti√™u b·ªã sƒÉn ƒëu·ªïi v√† ph·∫£i ch·ªãu h√¨nh ph·∫°t n·∫∑ng h∆°n!` });
                    }
                }
            }
			 if (initiator.roleId === 'PROPHET') {
                initiator.consecutiveSuccessAccusations = (initiator.consecutiveSuccessAccusations || 0) + 1;
            }
        } else { // V·∫°ch Tr·∫ßn th·∫•t b·∫°i
            let pointLoss;
            if (hasAmulet) {
                pointLoss = 1;
            } else if (initiator.roleId === 'PROPHET') {
                pointLoss = 1;
            } else {
                pointLoss = 2;
            }
            
            initiator.score -= pointLoss;
            target.score += 2;
            gs.roundData.failedAccusationsThisRound++;
            
			if (initiator.roleId === 'PROPHET') {
                initiator.consecutiveSuccessAccusations = 0;
            }
        } 
        
		if (hasAmulet) {
            initiator.artifacts.splice(amuletIndex, 1);
            gs.artifactPool.push('AMULET_OF_CLARITY');
            io.to(initiator.id).emit('artifactUpdate', { artifacts: initiator.artifacts });
            io.to(roomCode).emit('logMessage', {type: 'info', message: `B√πa Ch√∫ Minh M·∫´n c·ªßa ${initiator.name} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!`});
        }
        
        io.to(roomCode).emit('logMessage', { type: success ? 'success' : 'error', message });
        io.to(roomCode).emit('updatePlayerCards', gs.players.map(p => ({ id: p.id, score: p.score })));
    }
    
    const activePlayersCount = gs.players.filter(p => !p.isDefeated && !p.disconnected).length;
    if (gs.roundData.actedInTwilight.size >= activePlayersCount) {
        endTwilightPhase("T·∫•t c·∫£ Th·ª£ SƒÉn ƒë√£ quy·∫øt ƒë·ªãnh h√†nh ƒë·ªông trong ho√†ng h√¥n.", roomCode, rooms, io);
    }
}
async function updatePlayerStats(playerObject, didWin, xpGained) {
    // Kh√¥ng c·∫≠p nh·∫≠t cho Bot ho·∫∑c ng∆∞·ªùi ch∆°i kh√¥ng c√≥ ID trong database (kh√°ch)
    if (playerObject.isBot || !playerObject.dbId) {
        return;
    }

    try {
        const update = {
            $inc: {
                'stats.gamesPlayed': 1,
                'stats.wins': didWin ? 1 : 0,
                'xp': xpGained
            }
        };
        // T√¨m v√† c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng d·ª±a tr√™n dbId ƒë√£ ƒë∆∞·ª£c l∆∞u khi h·ªç tham gia ph√≤ng
        await User.findByIdAndUpdate(playerObject.dbId, update);
        
        console.log(`[Stats] ƒê√£ c·∫≠p nh·∫≠t ch·ªâ s·ªë cho ng∆∞·ªùi d√πng: ${playerObject.username}.`);
        
        // N√¢ng cao: Th√™m logic ki·ªÉm tra v√† l√™n c·∫•p ·ªü ƒë√¢y n·∫øu c·∫ßn
        // const updatedUser = await User.findById(playerObject.dbId);
        // if (updatedUser.xp >= calculateXpForNextLevel(updatedUser.level)) { ... }

    } catch (error) {
        console.error(`[Stats Error] L·ªói c·∫≠p nh·∫≠t ch·ªâ s·ªë cho ng∆∞·ªùi ch∆°i ${playerObject.name}:`, error);
    }
}

async function handlePostRoundEvents(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;

    // --- B∆Ø·ªöC 1: C·∫¨P NH·∫¨T TI·∫æN TR√åNH VAI TR√í D√ÄI H·∫†N (GI·ªÆ NGUY√äN) ---
    gs.players.forEach(p => {
        if (!p.isDefeated) {
            if (p.score >= 7) p.hasReached7 = true;
            if (p.score <= -7) p.hasReachedMinus7 = true;
            if (gs.roundData.roundWinners?.includes(p.id) && gs.roundData.roundWinners.length === 1) {
                p.loneWolfWins = (p.loneWolfWins || 0) + 1;
            }
        }
    });

    // --- B∆Ø·ªöC 2: X√ÅC ƒê·ªäNH TR·∫†NG TH√ÅI K·∫æT TH√öC GAME ---
    const allWinners = [];
    let gameEndReason = null;
    
    // ∆Øu ti√™n 1: Th·∫Øng b·∫±ng Thi√™n M·ªánh (Vai tr√≤)
    const winnerByRole = checkRoleVictory(gs);
    if (winnerByRole) {
        allWinners.push(winnerByRole);
        gameEndReason = `ƒë√£ ho√†n th√†nh Thi√™n M·ªánh "${ROLES[winnerByRole.roleId].name}"!`;
    }

    // ∆Øu ti√™n 2: Th·∫Øng/Thua b·∫±ng ƒêi·ªÉm s·ªë
    // (Ch·ªâ ki·ªÉm tra n·∫øu ch∆∞a c√≥ ai th·∫Øng b·∫±ng vai tr√≤, ho·∫∑c cho ph√©p nhi·ªÅu ng∆∞·ªùi c√πng th·∫Øng)
    const winnersByScore = gs.players.filter(p => p.score >= gs.winScore);
    const losersByScore = gs.players.filter(p => p.score <= gs.loseScore);

    if (winnersByScore.length > 0) {
        winnersByScore.forEach(winner => {
            if (!allWinners.some(w => w.id === winner.id)) {
                allWinners.push(winner);
            }
        });
        if (!gameEndReason) {
             gameEndReason = `ƒë·∫°t ${gs.winScore} ƒëi·ªÉm.`;
        }
    }
    
    const isGameOver = allWinners.length > 0 || losersByScore.length > 0;

    // --- B∆Ø·ªöC 3: X·ª¨ L√ù KHI GAME K·∫æT TH√öC ---
    if (isGameOver) {
        gs.phase = 'gameover';
        
        const winnerNames = allWinners.map(w => w.name).join(', ');
        const finalReason = allWinners.length > 0 
            ? `Ng∆∞·ªùi chi·∫øn th·∫Øng l√† ${winnerNames}! L√Ω do: ${gameEndReason}`
            : `Tr√≤ ch∆°i k·∫øt th√∫c v√¨ ${losersByScore[0].name} ƒë·∫°t ${gs.loseScore} ƒëi·ªÉm.`;

        // G·ª≠i th√¥ng b√°o k·∫øt th√∫c game cho client
        io.to(roomCode).emit('gameOver', { 
            winners: allWinners.map(w => ({ name: w.name, id: w.id })),
            losers: losersByScore.map(l => ({ name: l.name, id: l.id })),
            reason: finalReason 
        });

        // --- B∆Ø·ªöC 4: C·∫¨P NH·∫¨T DATABASE (LOGIC QUAN TR·ªåNG) ---
        const allLosers = gs.players.filter(p => !allWinners.some(w => w.id === p.id));
        const updates = []; // M·∫£ng ch·ª©a c√°c promise c·∫≠p nh·∫≠t

        allWinners.forEach(winner => {
            updates.push(updatePlayerStats(winner, true, 50)); // Th·∫Øng ƒë∆∞·ª£c 50 XP
        });
        
        allLosers.forEach(loser => {
            updates.push(updatePlayerStats(loser, false, 15)); // Thua ƒë∆∞·ª£c 15 XP
        });
        
        // Th·ª±c thi t·∫•t c·∫£ c√°c c·∫≠p nh·∫≠t m·ªôt c√°ch song song ƒë·ªÉ tƒÉng hi·ªáu su·∫•t
        try {
            await Promise.all(updates);
            console.log('[Stats] Ho√†n t·∫•t c·∫≠p nh·∫≠t ch·ªâ s·ªë cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i.');
        } catch (error) {
            console.error('[Stats Error] ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t song song:', error);
        }
        
    } 
    // N·∫øu game ch∆∞a k·∫øt th√∫c, kh√¥ng l√†m g√¨ c·∫£, ch·ªù Host b·∫Øt ƒë·∫ßu v√≤ng m·ªõi.
}




function checkRoleVictory(gs) {
    for (const player of gs.players) {
        if (player.isDefeated) continue;
        let isWinner = false;
        switch (player.roleId) {
            case 'PROPHET':
                isWinner = player.consecutiveSuccessAccusations >= 3 && player.score >= (gs.winScore * 2/3);
                break;
            case 'PEACEMAKER':
                isWinner = gs.consecutiveDraws >= 3;
                break;
            case 'GAMBLER':
                isWinner = player.hasReached7 && player.hasReachedMinus7;
                break;
            case 'REBEL':
                isWinner = player.loneWolfWins >= 3;
                break;
            case 'MIND_BREAKER':
                const totalFailedAccusations = gs.players.reduce((sum, p) => sum + (p.totalFailedAccusations || 0), 0);
                isWinner = totalFailedAccusations >= 5;
                break;
            case 'PHANTOM':
                isWinner = player.hauntSuccessCount >= 5;
                break;
            case 'CULTIST':
                isWinner = player.score <= gs.loseScore;
                break;
        }
        if (isWinner) return player;
    }
    return null;
}

function triggerBotPhaseAction(roomCode, rooms, io, phase) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;

    const bots = gs.players.filter(p => p.isBot && !p.isDefeated);
    
    bots.forEach((bot, index) => {
        setTimeout(() => {
            if(gs) gs.roomCode = roomCode;
            BotAI.makeDecision(bot, gs, phase, rooms, io);
        }, 2000 + (index * 1500) + (Math.random() * 1000));
    });
}

function triggerBotChoices(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    
    const bots = gs.players.filter(p => p.isBot && !p.isDefeated && !p.chosenAction);

    bots.forEach((bot, index) => {
        setTimeout(() => {
            if (gs.phase === 'exploration' && !bot.chosenAction) {
                if(gs) gs.roomCode = roomCode;
                BotAI.makeDecision(bot, gs, 'exploration', rooms, io);
            }
        }, 2000 + (index * 1000) + (Math.random() * 500));
    });
}

// [S·ª¨A L·ªñI LOGIC] Kh·∫Øc ph·ª•c l·ªói l·∫∑p v√† tr·ª´ ƒëi·ªÉm sai c·ªßa K·∫ª B·∫Øt Ch∆∞·ªõc.
function handleUseSkill(socket, roomCode, payload, rooms, io, _isMimicCall = false) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    const player = gs.players.find(p => p.id === socket.id);

    if (!_isMimicCall) {
        if (!player || player.isDefeated || player.isSkillDisabled || player.skillUsedThisRound) {
            return io.to(socket.id).emit('privateInfo', { title: 'L·ªói', text: 'Kh√¥ng th·ªÉ d√πng k·ªπ nƒÉng!' });
        }
        if (player.roleId === 'MIMIC' && !player.canMimicSkill) {
            return io.to(socket.id).emit('privateInfo', { title: 'L·ªói', text: 'Ng∆∞·ªùi b·∫°n ƒëang sao ch√©p kh√¥ng c√≥ k·ªπ nƒÉng k√≠ch ho·∫°t!' });
        }
        const cost = SKILL_COSTS[player.skillUses] ?? SKILL_COSTS[SKILL_COSTS.length - 1];
        if (player.score < cost) {
            return io.to(socket.id).emit('privateInfo', { title: 'L·ªói', text: `Kh√¥ng ƒë·ªß Ti·∫øn ƒê·ªô ƒë·ªÉ d√πng k·ªπ nƒÉng (c·∫ßn ${cost})!` });
        }
        player.score -= cost;
        player.skillUsedThisRound = true;
        player.skillUses++;
        
        io.to(roomCode).emit('logMessage', { type: 'info', message: `‚ú® M·ªôt k·ªπ nƒÉng b√≠ ·∫©n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t...` });
        io.to(roomCode).emit('updatePlayerCards', [{ id: player.id, score: player.score }]);

        const roleData = { ...ROLES[player.roleId], id: player.roleId };
        roleData.currentSkillCost = SKILL_COSTS[player.skillUses] ?? SKILL_COSTS[SKILL_COSTS.length - 1];
        roleData.canMimicSkill = player.canMimicSkill;
        io.to(player.id).emit('yourRoleIs', roleData);
    }
    
    let effectiveRoleId = player.roleId;

    if (player.roleId === 'MIMIC') {
        const mimicTarget = gs.players.find(p => p.id === player.mimicTargetId);
        if (!mimicTarget || !ROLES[mimicTarget.roleId].hasActiveSkill) {
            return;
        }
        effectiveRoleId = mimicTarget.roleId;
        io.to(roomCode).emit('logMessage', { type: 'info', message: `üé≠ M·ªôt ng∆∞·ªùi ch∆°i ƒëang b·∫Øt ch∆∞·ªõc k·ªπ nƒÉng c·ªßa ng∆∞·ªùi kh√°c!` });
    }

    switch (effectiveRoleId) {
        case 'PROPHET':
        case 'PEACEMAKER':
        case 'PRIEST':
        case 'PHANTOM':
            player.skillTargetId = payload.targetId;
            if (effectiveRoleId === 'PROPHET') {
                const targetPlayer = gs.players.find(p => p.id === payload.targetId);
                if (targetPlayer) io.to(player.id).emit('privateInfo', { title: 'Thi√™n L√Ω Nh√£n (K√©)', text: `H√†nh ƒë·ªông c·ªßa ${targetPlayer.name} l√†: **${targetPlayer.chosenAction || 'Ch∆∞a ch·ªçn'}**.` });
            }
            break;
           
        case 'MIND_BREAKER':
            const targetPlayerMB = gs.players.find(p => p.id === payload.targetId);
            if (targetPlayerMB && payload.chosenAction) {
                targetPlayerMB.chosenAction = payload.chosenAction;
                io.to(roomCode).emit('logMessage', { type: 'warning', message: `üß† M·ªôt th·∫ø l·ª±c v√¥ h√¨nh ƒë√£ ƒëi·ªÅu khi·ªÉn h√†nh ƒë·ªông c·ªßa m·ªôt ng∆∞·ªùi ch∆°i.` });
                io.to(roomCode).emit('playerChose', targetPlayerMB.id);
            }
            break;
		
        case 'MAGNATE':
        case 'THIEF':
        case 'DOUBLE_AGENT':
            player.skillActive = true;
            player.skillTargetId = payload.targetId;
            break;
            
        case 'GAMBLER':
            player.skillActive = true;
            player.gamblerBet = payload.chosenFaction;
            break;

        case 'REBEL':
            player.skillActive = true;
            player.rebelDeclaration = payload.declaredAction;
            player.rebelPunishTarget = payload.punishTargetId;
             io.to(roomCode).emit('logMessage', { type: 'info', message: `üì¢ K·∫ª n·ªïi lo·∫°n ƒë√£ tuy√™n b·ªë s·∫Ω **${payload.declaredAction}**!N·∫øu h·ªç l√† ng∆∞·ªùi duy nh·∫•t, m·ªôt h√¨nh ph·∫°t s·∫Ω ƒë∆∞·ª£c ƒë∆∞a ra.` });
            break;

        case 'INQUISITOR':
            player.skillActive = true;
            break;

        case 'BALANCER':
            const activePlayers = gs.players.filter(p => !p.isDefeated && !p.disconnected);
            const highestPlayers = getPlayersByScore(activePlayers, 'highest');
            const lowestPlayers = getPlayersByScore(activePlayers, 'lowest');
            if (highestPlayers.length > 0 && lowestPlayers.length > 0 && highestPlayers[0].score !== lowestPlayers[0].score) {
                const highestScore = highestPlayers[0].score;
                const lowestScore = lowestPlayers[0].score;
                const avgScore = Math.round((highestScore + lowestScore) / 2);
                highestPlayers.forEach(p => { p.score = avgScore; });
                lowestPlayers.forEach(p => { p.score = avgScore; });
                io.to(roomCode).emit('updatePlayerCards', gs.players.map(p => ({id: p.id, score: p.score})));
            } else {
                io.to(player.id).emit('privateInfo', { title: 'Th·∫•t B·∫°i', text: 'Kh√¥ng th·ªÉ t√°i ph√¢n b·ªë ƒëi·ªÉm s·ªë l√∫c n√†y.' });
                const cost = SKILL_COSTS[player.skillUses - 1] || 0;
                player.score += cost; 
                if (player.skillUses > 0) player.skillUses--; 
                player.skillUsedThisRound = false;
                io.to(roomCode).emit('updatePlayerCards', [{ id: player.id, score: player.score }]);
			}
            break;
            
        case 'CULTIST':
            const effects = ['see_role', 'disable_skill', 'triple_vote'];
            const randomEffect = effects[Math.floor(Math.random() * effects.length)];
            const otherPlayers = gs.players.filter(p => p.id !== player.id && !p.isDefeated);
            if (otherPlayers.length > 0) {
                if (randomEffect === 'see_role') {
                    const randomPlayer = otherPlayers[Math.floor(Math.random() * otherPlayers.length)];
                    io.to(player.id).emit('privateInfo', {title: 'Nghi L·ªÖ H·∫Øc √Åm', text: `B·∫°n th·∫•y vai tr√≤ c·ªßa ${randomPlayer.name} l√†: **${ROLES[randomPlayer.roleId].name}**`});
                } else if (randomEffect === 'disable_skill') {
                    const randomPlayer = otherPlayers[Math.floor(Math.random() * otherPlayers.length)];
                    randomPlayer.isSkillDisabled = true;
                } else {
                    player.hasTripleVote = true;
                }
            }
            break;
    }
}
function calculateScoresAndEndRound(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    gs.phase = 'reveal';

    const results = { messages: [], roundSummary: [], isDraw: false, winner: null, roundWinners: [] };
    const activePlayers = gs.players.filter(p => !p.isDefeated && !p.disconnected);
    if (activePlayers.length === 0) return handlePostRoundEvents(roomCode, rooms, io);

    activePlayers.forEach(p => {
        results.roundSummary.push({
            id: p.id, name: p.name, oldScore: p.score, newScore: 0,
            changes: [], chosenAction: p.chosenAction,
            actionWasNullified: false
        });
    });
   const applyPointChange = (playerId, amount, reason) => {
        const summary = results.roundSummary.find(s => s.id === playerId);
        if (!summary || amount === 0) return;
        const player = gs.players.find(p => p.id === playerId);
        const wardIndex = player.artifacts.findIndex(a => a.id === 'GOLDEN_WARD');
        if (wardIndex !== -1 && amount < 0) {
            player.artifacts.splice(wardIndex, 1);
            gs.artifactPool.push('GOLDEN_WARD');
            io.to(player.id).emit('artifactUpdate', { artifacts: player.artifacts });
            io.to(roomCode).emit('logMessage', { type: 'info', message: `B√πa H·ªô Th√¢n ƒë√£ b·∫£o v·ªá m·ªôt ng∆∞·ªùi ch∆°i kh·ªèi b·ªã m·∫•t ƒëi·ªÉm!` });
            return;
        }
        summary.changes.push({ reason, amount });
    };


	  // B∆Ø·ªöC A: X·ª¨ L√ù C√ÅC TI·∫æNG V·ªåNG THAY ƒê·ªîI H√ÄNH ƒê·ªòNG
    gs.roundData.decrees.forEach(decree => {
        if (decree.id === 'VU_DIEU_HON_LOAN') {
            const allActions = activePlayers.map(p => p.chosenAction);
            for (let i = allActions.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1)); [allActions[i], allActions[j]] = [allActions[j], allActions[i]]; }
            activePlayers.forEach((p, i) => { p.chosenAction = allActions[i]; });
            io.to(roomCode).emit('logMessage', { type: 'warning', message: 'V≈© ƒêi·ªáu H·ªón Lo·∫°n! H√†nh ƒë·ªông c·ªßa m·ªçi ng∆∞·ªùi ƒë√£ b·ªã x√°o tr·ªôn!' });
        } else if (decree.id === 'AO_GIAC_DICH_CHUYEN') {
            if (activePlayers.length > 1) {
                const lastAction = activePlayers[activePlayers.length - 1].chosenAction;
                for (let i = activePlayers.length - 1; i > 0; i--) { activePlayers[i].chosenAction = activePlayers[i - 1].chosenAction; }
                activePlayers[0].chosenAction = lastAction;
            }
            io.to(roomCode).emit('logMessage', { type: 'warning', message: '·∫¢o Gi√°c D·ªãch Chuy·ªÉn! H√†nh ƒë·ªông ƒë√£ ƒë∆∞·ª£c chuy·ªÉn cho ng∆∞·ªùi b√™n c·∫°nh!' });
        }
    });
	  // B∆Ø·ªöC B: K·∫∫ B·∫ÆT CH∆Ø·ªöC SAO CH√âP H√ÄNH ƒê·ªòNG "CU·ªêI C√ôNG"
    const mimics = activePlayers.filter(p => p.roleId === 'MIMIC' && p.mimicTargetId);
    mimics.forEach(mimic => {
        const target = gs.players.find(p => p.id === mimic.mimicTargetId);
        if (target) {
            mimic.chosenAction = target.chosenAction;
            io.to(mimic.id).emit('privateInfo', {
                title: 'Sao Ch√©p Th√†nh C√¥ng',
                text: `Sau m·ªçi bi·∫øn ƒë·ªông, h√†nh ƒë·ªông cu·ªëi c√πng b·∫°n sao ch√©p c·ªßa ${target.name} l√†: **${mimic.chosenAction || 'Kh√¥ng l√†m g√¨'}**.`
            });
        }
    });

    // B∆Ø·ªöC C: X·ª¨ L√ù HI·ªÜU ·ª®NG H√ÄNH ƒê·ªòNG V√Ä ƒê·∫æM PHI·∫æU
    activePlayers.forEach(p => {
        if (p.chosenAction === 'Gi·∫£i M√£') {
            const rand = Math.random();
            if (rand < 0.10) handleFindArtifact(p, 'Th√°m Hi·ªÉm', gs, io);
            else if (rand < 0.40) applyPointChange(p.id, 1, 'May m·∫Øn khi Gi·∫£i M√£');
        } else if (p.chosenAction === 'Ph√° Ho·∫°i') {
            const rand = Math.random();
            if (rand < 0.10) handleFindArtifact(p, 'H·ªón Lo·∫°n', gs, io);
            else if (rand < 0.40) {
                const target = gs.players.find(t => t.id === p.sabotageTargetId);
                if (target) applyPointChange(target.id, -1, `·∫¢nh h∆∞·ªüng t·ª´ h√†nh ƒë·ªông`);
            }
        }
    });


    // B∆Ø·ªöC 1 & 2: THI·∫æT L·∫¨P T·ªî H·ª¢P & ƒê·∫æM PHI·∫æU
    const successfulPairs = [];
    (gs.roundData.coordinationVotes || []).forEach(vote => {
        const initiator = activePlayers.find(p => p.id === vote.initiatorId);
        const target = activePlayers.find(p => p.id === vote.targetId);

        if (initiator && target && initiator.chosenAction === target.chosenAction) {
            successfulPairs.push([initiator.id, target.id]);
        } else if (initiator) {
            applyPointChange(initiator.id, -1, 'Tin t∆∞·ªüng nh·∫ßm ng∆∞·ªùi');
        }
    });

    const parent = {};
    const find = (i) => {
        if (parent[i] === i) return i;
        parent[i] = find(parent[i]);
        return parent[i];
    };
    const union = (i, j) => {
        const rootI = find(i);
        const rootJ = find(j);
        if (rootI !== rootJ) parent[rootJ] = rootI;
    };

    activePlayers.forEach(p => { parent[p.id] = p.id; });
    successfulPairs.forEach(pair => union(pair[0], pair[1]));

    const groups = {};
    activePlayers.forEach(p => {
        const root = find(p.id);
        if (!groups[root]) groups[root] = [];
        groups[root].push(p);
    });

    let finalVotes = { 'Gi·∫£i M√£': 0, 'Ph√° Ho·∫°i': 0, 'Quan S√°t': 0 };
    for (const rootId in groups) {
        const group = groups[rootId];
        const firstPlayerInGroup = group[0];
        
        const representativeSummary = results.roundSummary.find(s => s.id === firstPlayerInGroup.id);
        if (firstPlayerInGroup.chosenAction && !representativeSummary.actionWasNullified) {
             finalVotes[firstPlayerInGroup.chosenAction]++;
        }
       
        if (group.length > 1) {
            results.messages.push(`üë• Nh√≥m [${group.map(p => p.name).join(', ')}] ƒë√£ h√†nh ƒë·ªông nh∆∞ m·ªôt!`);
        }
    }

    // B∆Ø·ªöC 3: C√îNG B·ªê K·∫æT QU·∫¢ ƒê√äM
    const loyalVotes = finalVotes['Gi·∫£i M√£'];
    const corruptVotes = finalVotes['Ph√° Ho·∫°i'];
    const isPhanXetDaoNguoc = gs.roundData.decrees.some(d => d.id === 'PHAN_XET_DAO_NGUOC');
   const isDraw = loyalVotes === corruptVotes || loyalVotes === 0 || corruptVotes === 0;
 if (isDraw) {
        results.isDraw = true;
        gs.consecutiveDraws++;
        results.messages.push("‚öñÔ∏è K·∫øt qu·∫£ l√† H√íA!");
    } else {
        // Logic x√°c ƒë·ªãnh phe th·∫Øng ch·ªâ ch·∫°y khi kh√¥ng h√≤a
        results.winner = (isPhanXetDaoNguoc ? (loyalVotes > corruptVotes) : (loyalVotes < corruptVotes)) ? 'Gi·∫£i M√£' : 'Ph√° Ho·∫°i';
        results.roundWinners = activePlayers.filter(p => p.chosenAction === results.winner).map(p => p.id);
        gs.consecutiveDraws = 0;
        results.messages.push(`üèÜ Phe **${results.winner}** th·∫Øng!`);
    }
    
    // B∆Ø·ªöC 4: √ÅP D·ª§NG ƒêI·ªÇM C∆† B·∫¢N
     if (results.isDraw) {
        const observerCount = finalVotes['Quan S√°t'];
        const observerThreshold = Math.floor(activePlayers.length / 2);
        if (observerCount === 0) {
            activePlayers.forEach(p => applyPointChange(p.id, -1, 'H√≤a cu·ªôc (kh√¥ng c√≥ Quan s√°t)'));
        } else if (observerCount < observerThreshold) {
            activePlayers.forEach(p => {
                if (p.chosenAction !== 'Quan S√°t') applyPointChange(p.id, -1, 'H√≤a cu·ªôc (√≠t Quan s√°t)');
            });
        } else {
            activePlayers.forEach(p => {
                const amount = p.chosenAction === 'Quan S√°t' ? -1 : 1;
                applyPointChange(p.id, amount, 'H√≤a cu·ªôc (nhi·ªÅu Quan s√°t)');
            });
        }
    } else {
        const loser = results.winner === 'Gi·∫£i M√£' ? 'Ph√° Ho·∫°i' : 'Gi·∫£i M√£';
        const observerCount = finalVotes['Quan S√°t'];
        const observerThreshold = Math.floor(activePlayers.length / 2);

        activePlayers.forEach(p => {
            if (p.chosenAction === results.winner) {
                applyPointChange(p.id, 2, 'Thu·ªôc phe th·∫Øng');
                if (observerCount >= observerThreshold) {
                    applyPointChange(p.id, 1, 'H∆∞·ªüng l·ª£i t·ª´ Quan s√°t');
                }
            } else if (p.chosenAction === loser) {
                applyPointChange(p.id, -1, 'Thu·ªôc phe thua');
            } else if (p.chosenAction === 'Quan S√°t') {
                if (observerCount < observerThreshold) {
                    applyPointChange(p.id, 3, 'Quan s√°t theo phe th·∫Øng');
                } else {
                    applyPointChange(p.id, -1, 'Quan s√°t qu√° ƒë√¥ng');
                }
            }
        });

        if (observerCount >= observerThreshold) {
            results.messages.push(`üëÅÔ∏è Phe Quan S√°t qu√° ƒë√¥ng, h·ªç b·ªã ph·∫°t v√† phe th·∫Øng ƒë∆∞·ª£c h∆∞·ªüng l·ª£i!`);
        } else if (observerCount > 0) {
            results.messages.push(`üëÅÔ∏è Phe Quan S√°t √≠t v√† ƒë√£ ƒëo√°n ƒë√∫ng, nh·∫≠n ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÉm th∆∞·ªüng!`);
        }
    }
	const inquisitor = activePlayers.find(p => p.roleId === 'INQUISITOR' && p.skillActive);
    if (inquisitor) {
        const saboteurs = activePlayers.filter(p => p.chosenAction === 'Ph√° Ho·∫°i');
        const sabotageCount = saboteurs.length;
        if (sabotageCount > 0) {
            saboteurs.forEach(saboteur => {
                applyPointChange(saboteur.id, -sabotageCount, 'K·ªπ nƒÉng b√≠ ·∫©n');
            });
        }
    }
    
    activePlayers.forEach(player => {
        if (player.skillActive) {
            switch (player.roleId) {
                case 'MAGNATE':
                    const magnateTarget = activePlayers.find(p => p.id === player.skillTargetId);
                    if (magnateTarget && !results.isDraw && magnateTarget.chosenAction === results.winner) {
                        applyPointChange(player.id, 2, 'K·ªπ nƒÉng b√≠ ·∫©n');
                        applyPointChange(magnateTarget.id, 2, '·∫¢nh h∆∞·ªüng t·ª´ k·ªπ nƒÉng');
                    }
                    break;
                case 'THIEF':
                    const thiefTargetSummary = results.roundSummary.find(s => s.id === player.skillTargetId);
                    if (thiefTargetSummary) {
                        const targetGained = thiefTargetSummary.changes.filter(c => c.amount > 0).reduce((sum, change) => sum + change.amount, 0);
                        if (targetGained > 0) {
                            const stolenAmount = Math.floor(targetGained / 2);
                            if (stolenAmount > 0) {
                                applyPointChange(player.id, stolenAmount, 'K·ªπ nƒÉng b√≠ ·∫©n');
                                applyPointChange(thiefTargetSummary.id, -stolenAmount, '·∫¢nh h∆∞·ªüng t·ª´ k·ªπ nƒÉng');
                            }
                        }
                    }
                    break;
                case 'GAMBLER':
                    if (player.gamblerBet && !results.isDraw) {
                        if (player.gamblerBet === results.winner) applyPointChange(player.id, 8, 'K·ªπ nƒÉng b√≠ ·∫©n');
                        else applyPointChange(player.id, -4, 'K·ªπ nƒÉng b√≠ ·∫©n');
                    }
                    break;
                case 'REBEL':
                    if (player.rebelDeclaration && player.rebelPunishTarget) {
                        if (finalVotes[player.rebelDeclaration] === 1 && player.chosenAction === player.rebelDeclaration) {
                            const costPaid = config.SKILL_COSTS[player.skillUses - 1] || 0;
                            const punishment = Math.max(1, costPaid);
                            const punishTarget = activePlayers.find(p => p.id === player.rebelPunishTarget);
                            if (punishTarget) applyPointChange(punishTarget.id, -punishment, '·∫¢nh h∆∞·ªüng t·ª´ k·ªπ nƒÉng');
                        }
                    }
                    break;
                case 'PHANTOM':
                    const hauntTargetSummary = results.roundSummary.find(s => s.id === player.skillTargetId);
                    if (hauntTargetSummary) {
                        const targetGained = hauntTargetSummary.changes.filter(c => c.amount > 0).reduce((sum, change) => sum + change.amount, 0);
                        if (targetGained > 0) {
                            applyPointChange(hauntTargetSummary.id, -1, '·∫¢nh h∆∞·ªüng t·ª´ k·ªπ nƒÉng');
                            applyPointChange(player.id, 1, 'K·ªπ nƒÉng b√≠ ·∫©n');
                            player.hauntSuccessCount = (player.hauntSuccessCount || 0) + 1;
                        }
                    }
                    break;
            }
        }
    });
    
    // B∆Ø·ªöC 5: √ÅP D·ª§NG ƒêI·ªÇM T·ª™ K·ª∏ NƒÇNG, N·ªòI T·∫†I & TI·∫æNG V·ªåNG
    // --- 5.1: X·ª≠ l√Ω k·ªπ nƒÉng ƒë√£ k√≠ch ho·∫°t
     activePlayers.forEach(player => {
        const summary = results.roundSummary.find(s => s.id === player.id);
        switch (player.roleId) {
            // ƒê·ªîI L√ù DO TH√ÄNH "N·ªôi t·∫°i" chung chung
            case 'PEACEMAKER':
                if (results.isDraw) applyPointChange(player.id, 1, 'N·ªôi t·∫°i');
                break;
            case 'GAMBLER':
                let totalLoss = 0;
                summary.changes.forEach(change => { if (change.amount < 0) totalLoss += change.amount; });
                if (totalLoss < 0) {
                    summary.changes = summary.changes.filter(c => c.amount >= 0);
                    const newLoss = Math.random() < 0.5 ? Math.floor(totalLoss / 2) : totalLoss * 2;
                    applyPointChange(player.id, newLoss, 'N·ªôi t·∫°i');
                }
                break;
            case 'MAGNATE':
                const currentChangeForMagnate = summary.changes.reduce((sum, c) => sum + c.amount, 0);
                if ((player.score + currentChangeForMagnate) > 0) applyPointChange(player.id, 1, 'N·ªôi t·∫°i');
                else if ((player.score + currentChangeForMagnate) < 0) applyPointChange(player.id, -1, 'N·ªôi t·∫°i');
                break;
            case 'THIEF':
                let losersCount = activePlayers.filter(p => results.roundSummary.find(s => s.id === p.id).changes.reduce((sum, c) => sum + c.amount, 0) < 0).length;
                if (losersCount >= 2) applyPointChange(player.id, Math.floor(losersCount / 2), 'N·ªôi t·∫°i');
                break;
            case 'MIND_BREAKER':
                if (gs.roundData.failedAccusationsThisRound > 0) applyPointChange(player.id, gs.roundData.failedAccusationsThisRound * 2, 'N·ªôi t·∫°i');
                break;
            case 'CULTIST':
                summary.changes.forEach(change => { if (change.amount < 0) change.amount = Math.min(0, change.amount + 1); });
                break;
            case 'DOUBLE_AGENT':
                if (!results.isDraw && player.chosenAction !== results.winner) applyPointChange(player.id, 1, 'N·ªôi t·∫°i');
                break;
            case 'PHANTOM':
                applyPointChange(player.id, 1, 'N·ªôi t·∫°i');
                break;
        }
    });
    // --- 5.2: X·ª≠ l√Ω n·ªôi t·∫°i v√† Ti·∫øng V·ªçng
    activePlayers.forEach(player => {
        const summary = results.roundSummary.find(s => s.id === player.id);
        
        switch (player.roleId) {
            case 'PEACEMAKER':
                if (results.isDraw) applyPointChange(player.id, 1, 'N·ªôi t·∫°i');
                break;
            case 'GAMBLER':
                let totalLoss = 0;
                summary.changes.forEach(change => { if (change.amount < 0) totalLoss += change.amount; });
                if (totalLoss < 0) {
                    summary.changes = summary.changes.filter(c => c.amount >= 0);
                    const newLoss = Math.random() < 0.5 ? Math.floor(totalLoss / 2) : totalLoss * 2;
                    applyPointChange(player.id, newLoss, 'N·ªôi t·∫°i ');
                }
                break;
            case 'MAGNATE':
                const currentChangeForMagnate = summary.changes.reduce((sum, c) => sum + c.amount, 0);
                if ((player.score + currentChangeForMagnate) > 0) applyPointChange(player.id, 1, 'N·ªôi t·∫°i');
                else if ((player.score + currentChangeForMagnate) < 0) applyPointChange(player.id, -1, 'N·ªôi t·∫°i');
                break;
            case 'THIEF':
                let losersCount = activePlayers.filter(p => results.roundSummary.find(s => s.id === p.id).changes.reduce((sum, c) => sum + c.amount, 0) < 0).length;
                if (losersCount >= 2) applyPointChange(player.id, Math.floor(losersCount / 2), 'N·ªôi t·∫°i');
                break;
            case 'MIND_BREAKER':
                if (gs.roundData.failedAccusationsThisRound > 0) applyPointChange(player.id, gs.roundData.failedAccusationsThisRound * 2, 'N·ªôi t·∫°i');
                break;
            case 'CULTIST':
                summary.changes.forEach(change => { if (change.amount < 0) change.amount = Math.min(0, change.amount + 1); });
                break;
            case 'DOUBLE_AGENT':
                if (!results.isDraw && player.chosenAction !== results.winner) applyPointChange(player.id, 1, 'N·ªôi t·∫°i');
                break;
            case 'PHANTOM':
                applyPointChange(player.id, 1, 'N·ªôi t·∫°i');
                break;
        }
    });

    // --- 5.3: Ti·∫øng V·ªçng ·∫£nh h∆∞·ªüng ƒëi·ªÉm
    if (gs.roundData.decrees.some(d => d.id === 'CONG_NAP')) {
        const highestPlayer = getPlayersByScore(activePlayers, 'highest')[0];
        const lowestPlayer = getPlayersByScore(activePlayers, 'lowest')[0];
        if (highestPlayer && lowestPlayer && highestPlayer.id !== lowestPlayer.id) {
            applyPointChange(highestPlayer.id, -2, 'C·ªëng N·∫°p');
            applyPointChange(lowestPlayer.id, 2, 'Nh·∫≠n C·ªëng N·∫°p');
        }
    }
    if (gs.roundData.decrees.some(d => d.id === 'LOI_NGUYEN_HI_HA')) {
        const playersFellToNegative = activePlayers.some(p => {
            const summary = results.roundSummary.find(s => s.id === p.id);
            const change = summary.changes.reduce((sum, c) => sum + c.amount, 0);
            return (p.score > 0 && (p.score + change) < 0);
        });
        if (playersFellToNegative) {
            activePlayers.forEach(p => {
                const summary = results.roundSummary.find(s => s.id === p.id);
                const currentChange = summary.changes.reduce((sum, c) => sum + c.amount, 0);
                const finalScore = p.score + currentChange;
                if (finalScore < 0) {
                    applyPointChange(p.id, -finalScore, 'L·ªùi Nguy·ªÅn H·ªâ H·∫£');
                } else if (finalScore > 0) {
                    applyPointChange(p.id, -1, 'Ph·∫°t v√¨ "h·∫£ h√™"');
                }
            });
        }
    }

    // B∆Ø·ªöC 6: T·ªîNG K·∫æT & √ÅP D·ª§NG MODIFIER CU·ªêI C√ôNG
    if (gs.roundData.decrees.some(d => d.id === 'VU_NO_HU_VO') && results.isDraw) {
        activePlayers.forEach(p => {
            const summary = results.roundSummary.find(s => s.id === p.id);
            summary.changes = [{ reason: 'V·ª• N·ªï H∆∞ V√¥', amount: -p.score }];
        });
        results.messages.push(`üí• V·ª§ N·ªî H∆Ø V√î! ƒêi·ªÉm c·ªßa m·ªçi ng∆∞·ªùi ƒë√£ v·ªÅ 0!`);
    } else if (gs.roundData.decrees.some(d => d.id === 'DEM_SUY_TAN')) {
        activePlayers.forEach(p => {
            const isLoser = !results.isDraw && p.chosenAction !== results.winner;
            if (results.isDraw || isLoser) {
                const summary = results.roundSummary.find(s => s.id === p.id);
                const currentChange = summary.changes.reduce((sum, c) => sum + c.amount, 0);
                const scoreBeforeHalving = p.score + currentChange;
                const loss = Math.floor(scoreBeforeHalving / 2) - scoreBeforeHalving;
                if (loss < 0) {
                    applyPointChange(p.id, loss, 'ƒê√™m Suy T√†n');
                }
            }
        });
        results.messages.push(`üìâ ƒê√äM SUY T√ÄN! Nh·ªØng k·∫ª th·∫•t b·∫°i ƒë√£ b·ªã tr·ª´ng ph·∫°t n·∫∑ng n·ªÅ!`);
    }

    // Ti·∫øng V·ªçng nh√¢n ƒë√¥i ƒëi·ªÉm lu√¥n ƒë∆∞·ª£c √°p d·ª•ng cu·ªëi c√πng
    if (gs.roundData.decrees.some(d => d.id === 'VONG_AM_KHUECH_DAI')) {
        results.roundSummary.forEach(summary => {
            summary.changes.forEach(change => {
                change.amount *= 2;
            });
        });
        results.messages.push(`üîä V·ªåNG √ÇM KHU·∫æCH ƒê·∫†I! M·ªçi ƒëi·ªÉm s·ªë ƒë·ªÅu ƒë∆∞·ª£c nh√¢n ƒë√¥i!`);
    }

    // C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë cu·ªëi c√πng
   activePlayers.forEach(p => {
        const summary = results.roundSummary.find(s => s.id === p.id);
        const finalTotalChange = summary.changes.reduce((sum, change) => sum + change.amount, 0);
        p.score += finalTotalChange;
        summary.newScore = p.score;
    });

    io.to(roomCode).emit('roundResult', {
        roundNumber: gs.currentRound,
        players: gs.players,
        results,
        finalVoteCounts: finalVotes
    });

    handlePostRoundEvents(roomCode, rooms, io);
}

module.exports = {
    createGameState, startNewRound, handlePlayerChoice, handleCoordination, revealDecreeAndContinue,
    handleTwilightAction, handleUseSkill, handleAmnesiaAction, handleArenaPick, handleArenaBet,
    handleVoteToSkip, triggerBotPhaseAction, calculateScoresAndEndRound, handlePostRoundEvents, checkRoleVictory,
    resetRoomForRematch,
    handleArtifactDecision,
};