// game/logic.js
// ======================================================================
// CORE GAME LOGIC ("The Brain")
// PHI√äN B·∫¢N S·ª¨A L·ªñI K·∫∫ B·∫ÆT CH∆Ø·ªöC V√Ä T√çNH NƒÇNG
// ======================================================================


const config = require('./config.js');
const { ROLES, DECREES, SKILL_COSTS, GAME_CONSTANTS, ARTIFACTS } = config;
const BotAI = {
    // H√†m quy·∫øt ƒë·ªãnh ch√≠nh, ƒë∆∞·ª£c g·ªçi ·ªü m·ªói giai ƒëo·∫°n
    makeDecision(bot, gs, phase, rooms, io) {
        // AI s·∫Ω kh√¥ng h√†nh ƒë·ªông n·∫øu ƒë√£ b·ªã ƒë√°nh b·∫°i ho·∫∑c ƒë√£ h√†nh ƒë·ªông r·ªìi
        if (bot.isDefeated || (phase === 'twilight' && gs.roundData.actedInTwilight.has(bot.id))) {
            return;
        }

        // Ph√¢n t√≠ch t√¨nh h√¨nh
        const activePlayers = gs.players.filter(p => !p.isDefeated && !p.disconnected);
        const nonBotPlayers = activePlayers.filter(p => !p.isBot);
        const leaders = getPlayersByScore(nonBotPlayers, 'highest');
        const laggards = getPlayersByScore(nonBotPlayers, 'lowest');
        const myRole = ROLES[bot.roleId];

        // 1. QUY·∫æT ƒê·ªäNH D√ôNG K·ª∏ NƒÇNG (ch·ªâ m·ªôt l·∫ßn m·ªói v√≤ng)
        // Bot s·∫Ω c√¢n nh·∫Øc d√πng k·ªπ nƒÉng tr∆∞·ªõc khi ch·ªçn h√†nh ƒë·ªông ch√≠nh
        if (!bot.skillUsedThisRound && myRole.hasActiveSkill) {
            let cost = SKILL_COSTS[bot.skillUses] ?? SKILL_COSTS[SKILL_COSTS.length - 1];
            if (bot.score >= cost) {
                // Logic quy·∫øt ƒë·ªãnh d√πng skill d·ª±a tr√™n vai tr√≤
                let useSkillChance = 0.3; // 30% c∆° h·ªôi d√πng skill m·∫∑c ƒë·ªãnh
                let payload = {};
                let target = null;

                switch (bot.roleId) {
                    case 'CULTIST': // K·∫ª Hi·∫øn T·∫ø mu·ªën m·∫•t ƒëi·ªÉm, n√™n s·∫Ω d√πng skill li√™n t·ª•c
                        useSkillChance = 0.9;
                        break;
                    case 'INQUISITOR': // K·∫ª Ph√°n X·ª≠ s·∫Ω d√πng skill n·∫øu c√≥ nhi·ªÅu k·∫ª t√¨nh nghi
                        if (activePlayers.length > 4) useSkillChance = 0.6;
                        break;
                    case 'MAGNATE': // Nh√† T√†i Phi·ªát s·∫Ω ƒë·∫ßu t∆∞ v√†o ng∆∞·ªùi m·∫°nh nh·∫•t
                        target = leaders[0];
                        if (target) {
                            payload.targetId = target.id;
                            useSkillChance = 0.7;
                        }
                        break;
                    case 'PRIEST': // Th·∫ßy T·∫ø s·∫Ω b·∫£o v·ªá ng∆∞·ªùi y·∫øu th·∫ø nh·∫•t
                        target = laggards[0];
                        if (target) {
                            payload.targetId = target.id;
                            useSkillChance = 0.5;
                        }
                        break;
                }

                if (Math.random() < useSkillChance) {
                    // T·∫°o m·ªôt socket gi·∫£ ƒë·ªÉ truy·ªÅn v√†o h√†m handleUseSkill
                    const fakeSocket = { id: bot.id };
                    handleUseSkill(fakeSocket, gs.roomCode, payload, rooms, io);
                    // D·ª´ng l·∫°i sau khi d√πng skill ƒë·ªÉ tr√°nh h√†nh ƒë·ªông 2 l·∫ßn
                    return;
                }
            }
        }
        
        // 2. QUY·∫æT ƒê·ªäNH H√ÄNH ƒê·ªòNG THEO T·ª™NG GIAI ƒêO·∫†N
        switch (phase) {
            case 'exploration':
                this.decideExplorationAction(bot, gs, nonBotPlayers, leaders, laggards, rooms, io);
                break;
            case 'coordination':
            case 'twilight':
                this.decideTwilightOrCoordinationAction(bot, gs, phase, nonBotPlayers, leaders, laggards, rooms, io);
                break;
        }
    },

    // Quy·∫øt ƒë·ªãnh h√†nh ƒë·ªông trong Giai ƒêo·∫°n Th√°m Hi·ªÉm
    decideExplorationAction(bot, gs, nonBotPlayers, leaders, laggards, rooms, io) {
        let choice = 'Quan S√°t';
        let payload = {};
        let target = null;
        
        switch (bot.roleId) {
            case 'INQUISITOR': // Mu·ªën t√¨m k·∫ª Ph√° Ho·∫°i, n√™n s·∫Ω Gi·∫£i M√£ ƒë·ªÉ tƒÉng c∆° h·ªôi th·∫Øng
            case 'PEACEMAKER': // Mu·ªën h√≤a, th∆∞·ªùng ch·ªçn Gi·∫£i M√£ ho·∫∑c Quan S√°t
            case 'MAGNATE': // Mu·ªën theo phe th·∫Øng, th∆∞·ªùng l√† phe ƒë√¥ng ng∆∞·ªùi h∆°n
                choice = 'Gi·∫£i M√£';
                break;
            case 'CULTIST': // Mu·ªën thua, s·∫Ω Ph√° Ho·∫°i ng∆∞·ªùi m·∫°nh nh·∫•t
            case 'REBEL': // G√¢y h·ªón lo·∫°n, s·∫Ω Ph√° Ho·∫°i ng∆∞·ªùi m·∫°nh nh·∫•t
                choice = 'Ph√° Ho·∫°i';
                target = leaders[0] || nonBotPlayers[0];
                if (target) payload.targetId = target.id;
                break;
            default: // C√°c vai tr√≤ kh√°c s·∫Ω c·ªë g·∫Øng th·∫Øng
                // N·∫øu ƒëi·ªÉm ƒëang th·∫•p, s·∫Ω ch∆°i an to√†n (Gi·∫£i M√£)
                // N·∫øu ƒëi·ªÉm ƒëang cao, c√≥ th·ªÉ m·∫°o hi·ªÉm (Ph√° Ho·∫°i)
                if (bot.score < 5) {
                    choice = 'Gi·∫£i M√£';
                } else {
                    choice = (Math.random() < 0.6) ? 'Gi·∫£i M√£' : 'Ph√° Ho·∫°i';
                    if (choice === 'Ph√° Ho·∫°i') {
                        target = leaders[0] || nonBotPlayers[0];
                        if (target) payload.targetId = target.id;
                    }
                }
                break;
        }
        
        // N·∫øu kh√¥ng c√≥ m·ª•c ti√™u cho Ph√° Ho·∫°i, chuy·ªÉn sang Quan S√°t
        if (choice === 'Ph√° Ho·∫°i' && !payload.targetId) {
            choice = 'Quan S√°t';
        }

        handlePlayerChoice(gs.roomCode, bot.id, choice, rooms, io, payload);
    },

    // Quy·∫øt ƒë·ªãnh h√†nh ƒë·ªông trong Ho√†ng H√¥n ho·∫∑c Ph·ªëi H·ª£p
    decideTwilightOrCoordinationAction(bot, gs, phase, nonBotPlayers, leaders, laggards, rooms, io) {
        // Bot s·∫Ω c√≥ 80% c∆° h·ªôi h√†nh ƒë·ªông thay v√¨ b·ªè qua
        if (Math.random() > 0.8 || nonBotPlayers.length === 0) {
            handleVoteToSkip(gs.roomCode, bot.id, phase, rooms, io);
            return;
        }

        let target = laggards[0] || nonBotPlayers[Math.floor(Math.random() * nonBotPlayers.length)];
        if (!target) { // N·∫øu kh√¥ng c√≤n ng∆∞·ªùi ch∆°i n√†o kh√°c
             handleVoteToSkip(gs.roomCode, bot.id, phase, rooms, io);
             return;
        }

        if (phase === 'coordination') {
            // S·∫Ω ph·ªëi h·ª£p v·ªõi ng∆∞·ªùi c√≥ ƒëi·ªÉm th·∫•p (an to√†n h∆°n)
            handleCoordination(gs.roomCode, bot.id, target.id, rooms, io);
        } else if (phase === 'twilight') {
            let guess = 'Gi·∫£i M√£';
            // Logic ƒëo√°n h√†nh ƒë·ªông
            switch (bot.roleId) {
                case 'INQUISITOR': // Lu√¥n ƒëo√°n l√† Ph√° Ho·∫°i ƒë·ªÉ nh·∫≠n bonus
                    guess = 'Ph√° Ho·∫°i';
                    break;
                case 'CULTIST': // C·ªë t√¨nh ƒëo√°n sai ƒë·ªÉ m·∫•t ƒëi·ªÉm
                    // ƒêo√°n h√†nh ƒë·ªông ng∆∞·ª£c l·∫°i v·ªõi nh·ªØng g√¨ ng∆∞·ªùi y·∫øu th·∫ø hay l√†m
                    guess = 'Ph√° Ho·∫°i'; 
                    break;
                default:
                    // Ng∆∞·ªùi y·∫øu th·∫ø th∆∞·ªùng Gi·∫£i M√£, ng∆∞·ªùi m·∫°nh th∆∞·ªùng Ph√° Ho·∫°i
                    if (target.score < 0) {
                        guess = 'Gi·∫£i M√£';
                    } else {
                        guess = (Math.random() < 0.5) ? 'Gi·∫£i M√£' : 'Ph√° Ho·∫°i';
                    }
                    break;
            }
            // T·∫°o m·ªôt ch√∫t ƒë·ªô tr·ªÖ cho h√†nh ƒë·ªông c·ªßa bot
            io.to(gs.roomCode).emit('playerAccused', { initiatorId: bot.id, targetId: target.id });
            io.to(gs.roomCode).emit('logMessage', { type: 'info', message: `ü§ñ **${bot.name}** (Bot) ƒë√£ V·∫°ch Tr·∫ßn **${target.name}**!` });
            handleTwilightAction(gs.roomCode, bot.id, target.id, 'V·∫°ch Tr·∫ßn', guess, rooms, io);
        }
    }
};

// --- H√ÄM CHO CH·ª®C NƒÇNG CH∆†I L·∫†I ---
function resetRoomForRematch(room) {
    if (!room) return;
    room.gameState = null;
    room.players.forEach(player => {
        if (!player.isBot) {
            player.isReady = false;
        }
        delete player.score;
        delete player.chosenAction;
        delete player.roleId;
        delete player.artifacts;
        delete player.sabotageTargetId;
    });
    console.log(`[Rematch] ƒê√£ reset ph√≤ng.`);
}

// --- H√ÄM LOGIC C·ªî V·∫¨T ---
function handleFindArtifact(player, type, gs, io) {
    const availableArtifacts = Object.values(ARTIFACTS).filter(a =>
        a.type === type && gs.artifactPool.includes(a.id)
    );
    if (availableArtifacts.length === 0) return;

    const foundArtifact = availableArtifacts[Math.floor(Math.random() * availableArtifacts.length)];
    gs.artifactPool = gs.artifactPool.filter(id => id !== foundArtifact.id); 

    if (player.artifacts.length === 0) {
        player.artifacts.push(foundArtifact);
        io.to(player.id).emit('artifactUpdate', {
            artifacts: player.artifacts,
            message: `B·∫°n ƒë√£ t√¨m th·∫•y: ${foundArtifact.name}!`
        });
        io.to(player.id).emit('logMessage', {type: 'success', message: `B·∫°n ƒë√£ t√¨m th·∫•y: <b>${foundArtifact.name}</b>!`});
    } else {
        const currentArtifact = player.artifacts[0];
        io.to(player.id).emit('promptArtifactChoice', {
            currentArtifact: currentArtifact,
            newArtifact: foundArtifact
        });
    }
}

function handleArtifactDecision(roomCode, playerId, decision, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    const player = gs.players.find(p => p.id === playerId);
    if (!player) return;

    const newArtifact = ARTIFACTS[decision.newArtifactId];

    if (decision.choice === 'take_new') {
        const oldArtifactId = player.artifacts[0].id;
        gs.artifactPool.push(oldArtifactId);
        player.artifacts = [newArtifact];
        io.to(player.id).emit('logMessage', {type: 'success', message: `B·∫°n ƒë√£ nh·∫≠n <b>${newArtifact.name}</b> v√† tr·∫£ l·∫°i <b>${ARTIFACTS[oldArtifactId].name}</b>.`});
    } else {
        gs.artifactPool.push(newArtifact.id);
        io.to(player.id).emit('logMessage', {type: 'info', message: `B·∫°n ƒë√£ quy·∫øt ƒë·ªãnh gi·ªØ l·∫°i <b>${player.artifacts[0].name}</b>.`});
    }
    io.to(player.id).emit('artifactUpdate', { artifacts: player.artifacts });
}


// --- C√ÅC H√ÄM TI·ªÜN √çCH & KH·ªûI T·∫†O ---
function getPlayersByScore(players, type) {
    const activePlayers = players.filter(p => !p.isDefeated && !p.disconnected);
    if (activePlayers.length === 0) return [];
    const scores = activePlayers.map(p => p.score);
    if (scores.length === 0) return [];
    const criticalScore = type === 'highest' ? Math.max(...scores) : Math.min(...scores);
    return activePlayers.filter(p => p.score === criticalScore);
}

function initializeAssassin(assassin, allPlayers) {
    const potentialTargets = allPlayers.filter(p => p.id !== assassin.id);
    if (potentialTargets.length > 0) {
        assassin.bountyTargetId = potentialTargets[Math.floor(Math.random() * potentialTargets.length)].id;
    }
}

// [S·ª¨A L·ªñI & N√ÇNG C·∫§P] K·∫ª B·∫Øt Ch∆∞·ªõc gi·ªù s·∫Ω bi·∫øt vai tr√≤ c·ªßa m·ª•c ti√™u
function initializeMimic(mimic, allPlayers, io) {
    const potentialTargets = allPlayers.filter(p => p.id !== mimic.id && !p.isDefeated && !p.disconnected);
    if (potentialTargets.length > 0) {
        const targetPlayer = potentialTargets[Math.floor(Math.random() * potentialTargets.length)];
        mimic.mimicTargetId = targetPlayer.id;
        const targetRoleName = ROLES[targetPlayer.roleId]?.name || 'Kh√¥ng r√µ';
        
        io.to(mimic.id).emit('privateInfo', {
            title: "Sao Ch√©p", 
            text: `ƒê√™m nay b·∫°n s·∫Ω sao ch√©p h√†nh ƒë·ªông c·ªßa **${targetPlayer.name}**. D∆∞·ªùng nh∆∞ h·ªç l√† m·ªôt **${targetRoleName}**.`
        });
    }
}

const roleInitializers = { 'ASSASSIN': initializeAssassin }; // [S·ª¨A L·ªñI] X√≥a Mimic kh·ªèi ƒë√¢y

function initializeSpecialRoles(gs, io) {
    gs.players.forEach(player => {
        if (roleInitializers[player.roleId]) {
            roleInitializers[player.roleId](player, gs.players, io);
        }
    });
}
function createGameState(players, io) {
    const numPlayers = players.length;
    let winScore, loseScore;
    if (numPlayers <= 4) { winScore = 15; loseScore = -15; }
    else if (numPlayers <= 8) { winScore = 20; loseScore = -20; }
    else { winScore = 25; loseScore = -25; }

    const rolesToAssign = [...config.ALL_ROLE_IDS];
    for (let i = rolesToAssign.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [rolesToAssign[i], rolesToAssign[j]] = [rolesToAssign[j], rolesToAssign[i]];
    }
    const rolesInThisGame = rolesToAssign.slice(0, numPlayers);
  
    const gameState = {
        players: players.map((p, index) => ({
            ...p,
            score: 0,
            chosenAction: null,
			sabotageTargetId: null,
            roleId: rolesInThisGame[index % rolesInThisGame.length],
            skillUses: 0, 
            artifacts: [],
            consecutiveSuccessAccusations: 0,
            hauntSuccessCount: 0,
            hasReached7: false,
            hasReachedMinus7: false,
            loneWolfWins: 0,
            bountyTargetId: null,
            mimicTargetId: null,
            isBlessed: false,
            blessedById: null,
            skillUsedThisRound: false,
            skillTargetId: null, 
            skillActive: false,
            isSkillDisabled: false,
            hasTripleVote: false,
        })),
       currentRound: 0,
        winScore, loseScore,
        phase: 'waiting',
        roundData: {},
        decreeDeck: [], decreeDiscard: [],
        consecutiveDraws: 0,
        rolesInGame: rolesInThisGame,
        nextDecreeChooser: null,
        failedAccusationsThisRound: 0,
        artifactPool: [...config.ALL_ARTIFACT_IDS],
    };

    initializeSpecialRoles(gameState, io); // Ch·ªâ kh·ªüi t·∫°o c√°c vai tr√≤ c·∫ßn thi·∫øt l√∫c ƒë·∫ßu (S√°t Th·ªß)
    shuffleDecreeDeck(gameState);
    return gameState;
}



function shuffleDecreeDeck(gs) {
    gs.decreeDeck = [...config.ALL_DECREE_IDS];
    for (let i = gs.decreeDeck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [gs.decreeDeck[i], gs.decreeDeck[j]] = [gs.decreeDeck[j], gs.decreeDeck[i]];
    }
    gs.decreeDiscard = [];
}

function startNewRound(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;

    gs.currentRound++;
    gs.phase = 'exploration';
      gs.roundData = { decrees: [], coordinationVotes: [], actedInTwilight: new Set(), failedAccusationsThisRound: 0, linkedPlayers: [] };
    gs.players.forEach(p => {
        if (!p.isDefeated) {
            p.chosenAction = null;
            p.sabotageTargetId = null;
            p.isBlessed = false;
            p.blessedById = null;
            p.skillUsedThisRound = false;
            p.skillActive = false;
            p.skillTargetId = null;
            p.isSkillDisabled = false;
            p.hasTripleVote = false;
            p.skillUses = 0; 
        }
    });

    // [S·ª¨A L·ªñI] K·∫ª B·∫Øt Ch∆∞·ªõc ch·ªâ ƒë∆∞·ª£c kh·ªüi t·∫°o M·ªòT L·∫¶N ·ªü ƒë·∫ßu m·ªói v√≤ng m·ªõi
    const mimic = gs.players.find(p => p.roleId === 'MIMIC' && !p.isDefeated);
    if (mimic) { initializeMimic(mimic, gs.players, io); }

    io.to(roomCode).emit('newRound', {
        roundNumber: gs.currentRound, players: gs.players, duration: GAME_CONSTANTS.CHOICE_DURATION
    });
    gs.roundData.choiceTimer = setTimeout(() => {
        const currentRoom = rooms[roomCode];
        if (!currentRoom || !currentRoom.gameState || currentRoom.gameState.phase !== 'exploration') return;
        const activePlayers = currentRoom.gameState.players.filter(p => !p.isDefeated && !p.disconnected);
        
        activePlayers.forEach(p => {
            if (!p.chosenAction) {
                const choice = ['Gi·∫£i M√£', 'Ph√° Ho·∫°i', 'Quan S√°t'][Math.floor(Math.random() * 3)];
                let payload = {};
                if (choice === 'Ph√° Ho·∫°i') {
                    const potentialTargets = activePlayers.filter(t => t.id !== p.id);
                    if (potentialTargets.length > 0) {
                        payload.targetId = potentialTargets[Math.floor(Math.random() * potentialTargets.length)].id;
                    }
                }
                handlePlayerChoice(roomCode, p.id, choice, rooms, io, payload);
            }
        });
    }, GAME_CONSTANTS.CHOICE_DURATION * 1000);

    triggerBotChoices(roomCode, rooms, io);
}
// ... (c√°c h√†m c√≤n l·∫°i gi·ªØ nguy√™n)

// (Ph·∫ßn c√≤n l·∫°i c·ªßa file logic.js gi·ªØ nguy√™n, ch·ªâ c·∫ßn thay th·∫ø ph·∫ßn ƒë·∫ßu nh∆∞ tr√™n)
// ...
// ...
// ... (Ph·∫ßn c√≤n l·∫°i c·ªßa file logic.js gi·ªØ nguy√™n, ch·ªâ c·∫ßn thay th·∫ø ph·∫ßn ƒë·∫ßu nh∆∞ tr√™n)
// ...
function handlePlayerChoice(roomCode, playerId, choice, rooms, io, payload = {}) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || gs.phase !== 'exploration') return;
    const player = gs.players.find(p => p.id === playerId);

    if (player && !player.chosenAction && !player.isDefeated) {
        player.chosenAction = choice;
        if (choice === 'Ph√° Ho·∫°i' && payload.targetId) {
            player.sabotageTargetId = payload.targetId;
        }
        io.to(roomCode).emit('playerChose', playerId);

        const activePlayers = gs.players.filter(p => !p.isDefeated && !p.disconnected);
        if (activePlayers.every(p => p.chosenAction)) {
            clearTimeout(gs.roundData.choiceTimer);
            startCoordinationPhase(roomCode, rooms, io);
        }
    }
}
function handleVoteToSkip(roomCode, playerId, phase, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || (gs.phase !== 'coordination' && gs.phase !== 'twilight')) return;

    gs.roundData.actedInTwilight.add(playerId);
    const voteSet = phase === 'coordination' ? gs.roundData.votesToSkipcoordination : gs.roundData.votesToSkiptwilight;
    if (!voteSet) {
        // Kh·ªüi t·∫°o n·∫øu ch∆∞a t·ªìn t·∫°i
        if(phase === 'coordination') gs.roundData.votesToSkipcoordination = new Set();
        else gs.roundData.votesToSkiptwilight = new Set();
    };

    (phase === 'coordination' ? gs.roundData.votesToSkipcoordination : gs.roundData.votesToSkiptwilight).add(playerId);
    
    const buttonId = phase === 'coordination' ? 'skip-coordination-btn' : 'twilight-rest-btn';
    io.to(roomCode).emit('updateSkipVoteCount', { 
        buttonId: buttonId,
        count: (phase === 'coordination' ? gs.roundData.votesToSkipcoordination : gs.roundData.votesToSkiptwilight).size,
        total: gs.players.filter(p => !p.isDefeated && !p.disconnected).length
    });

    const activePlayersCount = gs.players.filter(p => !p.isDefeated && !p.disconnected).length;
    if (gs.roundData.actedInTwilight.size >= activePlayersCount) {
        if (phase === 'coordination') {
            clearTimeout(gs.roundData.coordinationTimer);
            io.to(roomCode).emit('logMessage', { type: 'info', message: "Giai ƒëo·∫°n Ph·ªëi h·ª£p k·∫øt th√∫c." });
            io.to(roomCode).emit('coordinationPhaseEnded');
            setTimeout(() => revealDecreeAndContinue(roomCode, rooms, io), 2000);
        } else if (phase === 'twilight') {
            endTwilightPhase("T·∫•t c·∫£ Th·ª£ SƒÉn ƒë√£ quy·∫øt ƒë·ªãnh h√†nh ƒë·ªông trong ho√†ng h√¥n.", roomCode, rooms, io);
        }
    }
}

function startCoordinationPhase(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;

    gs.phase = 'coordination';
    gs.roundData.actedInTwilight = new Set(); // Reset h√†nh ƒë·ªông cho giai ƒëo·∫°n n√†y
    gs.roundData.votesToSkipcoordination = new Set(); // Kh·ªüi t·∫°o set

    const DURATION = 15; // Th·ªùi gian cho giai ƒëo·∫°n ph·ªëi h·ª£p
    io.to(roomCode).emit('coordinationPhaseStarted', { duration: DURATION });
    
    gs.roundData.coordinationTimer = setTimeout(() => {
        if (!rooms[roomCode] || rooms[roomCode].gameState.phase !== 'coordination') return;
        revealDecreeAndContinue(roomCode, rooms, io);
    }, DURATION * 1000);
}
function handleUseArtifact(socket, roomCode, artifactId, payload, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    const player = gs.players.find(p => p.id === socket.id);
    const artifactIndex = player.artifacts.findIndex(a => a.id === artifactId);

    if (!player || artifactIndex === -1) return;
    
    io.to(roomCode).emit('logMessage', { type: 'warning', message: `üìú **${player.name}** ƒë√£ k√≠ch ho·∫°t m·ªôt C·ªï v·∫≠t b√≠ ·∫©n!` });
    
    const artifact = player.artifacts[artifactIndex];
    artifact.usedThisRound = true;

    // [C·∫¨P NH·∫¨T LOGIC] Ch·ªâ x√≥a v√† tr·∫£ v·ªÅ b·ªÉ nh·ªØng C·ªï v·∫≠t d√πng 1 l·∫ßn ngay l·∫≠p t·ª©c
    // Nh·ªØng C·ªï v·∫≠t b·ªã ƒë·ªông s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü n∆°i kh√°c
    if (artifact.is_activatable) {
        player.artifacts.splice(artifactIndex, 1);
        gs.artifactPool.push(artifactId);
    }
    
    io.to(player.id).emit('artifactUpdate', { artifacts: player.artifacts });
}



function handleCoordination(roomCode, initiatorId, targetId, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    const initiator = gs.players.find(p => p.id === initiatorId);
    const target = gs.players.find(p => p.id === targetId);
    if (!initiator || !target) return;

    gs.roundData.coordinationVotes.push({ initiatorId, targetId });
    io.to(roomCode).emit('logMessage', { type: 'info', message: `ü§ù **${initiator.name}** ƒë√£ ƒë·ªÅ ngh·ªã Ph·ªëi H·ª£p v·ªõi **${target.name}**.` });

    if (target.roleId === 'ASSASSIN') {
        io.to(target.id).emit('privateInfo', { title: 'B·ªã Nh·∫Øm ƒê·∫øn', text: `**${initiator.name}** ƒë√£ Ph·ªëi H·ª£p v·ªõi b·∫°n. H√†nh ƒë·ªông b√≠ m·∫≠t c·ªßa h·ªç l√†: **${initiator.chosenAction}**` });
    }
}




function revealDecreeAndContinue(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    gs.phase = 'decree';
    if (gs.currentRound === 1) {
        io.to(roomCode).emit('logMessage', { type: 'info', message: "ƒê√™m ƒë·∫ßu ti√™n y√™n tƒ©nh, kh√¥ng c√≥ Ti·∫øng V·ªçng." });
        startTwilightPhase(roomCode, rooms, io);
        return;
    }

    if (gs.decreeDeck.length === 0) shuffleDecreeDeck(gs);
    const decreeChooser = gs.nextDecreeChooser || getPlayersByScore(gs.players.filter(p => !p.isDefeated), 'lowest')[0];
    gs.nextDecreeChooser = null;

    let decreesToReveal = [];
    let firstDecreeId = gs.decreeDeck.pop();
    gs.decreeDiscard.push(firstDecreeId);

    if (firstDecreeId === 'DEM_SONG_TRUNG') {
        decreesToReveal.push({ ...DECREES[firstDecreeId], id: firstDecreeId });
        if (gs.decreeDeck.length === 0) shuffleDecreeDeck(gs);
        firstDecreeId = gs.decreeDeck.pop();
        gs.decreeDiscard.push(firstDecreeId);
    }
    decreesToReveal.push({ ...DECREES[firstDecreeId], id: firstDecreeId });
    gs.roundData.decrees = decreesToReveal;

    io.to(roomCode).emit('decreeRevealed', {
        drawerName: decreeChooser?.name || 'Ng√¥i ƒë·ªÅn',
        decrees: decreesToReveal.map(d => ({ name: d.name, description: d.description }))
    });

    let continueToTwilight = true;
    decreesToReveal.forEach(decree => {
        switch (decree.id) {
            case 'VU_DIEU_HON_LOAN':
               const allActions = gs.players.filter(p => !p.isDefeated && !p.disconnected).map(p => p.chosenAction);
                for (let i = allActions.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1)); [allActions[i], allActions[j]] = [allActions[j], allActions[i]]; }
                gs.players.filter(p => !p.isDefeated && !p.disconnected).forEach((p, i) => { p.chosenAction = allActions[i]; });
                io.to(roomCode).emit('logMessage', { type: 'warning', message: 'V≈© ƒêi·ªáu H·ªón Lo·∫°n! H√†nh ƒë·ªông c·ªßa m·ªçi ng∆∞·ªùi ƒë√£ b·ªã x√°o tr·ªôn!' });
                break;
            case 'AO_GIAC_DICH_CHUYEN':
               const activePlayers = gs.players.filter(p => !p.isDefeated && !p.disconnected);
                if (activePlayers.length > 1) {
                    const lastAction = activePlayers[activePlayers.length - 1].chosenAction;
                    for (let i = activePlayers.length - 1; i > 0; i--) { activePlayers[i].chosenAction = activePlayers[i - 1].chosenAction; }
                    activePlayers[0].chosenAction = lastAction;
                }
                io.to(roomCode).emit('logMessage', { type: 'warning', message: '·∫¢o Gi√°c D·ªãch Chuy·ªÉn! H√†nh ƒë·ªông ƒë√£ ƒë∆∞·ª£c chuy·ªÉn cho ng∆∞·ªùi b√™n c·∫°nh!' });
                break;
            case 'BUA_LU_LAN':
                continueToTwilight = false;
                gs.phase = 'amnesia_selection';
                if (decreeChooser) {
                    io.to(decreeChooser.id).emit('promptAmnesiaAction', { validTargets: gs.players.filter(p => !p.isDefeated).map(p => ({id: p.id, name: p.name})) });
                    io.to(roomCode).emit('logMessage', { type: 'warning', message: `üß† ${decreeChooser.name} ƒëang ho√°n ƒë·ªïi h√†nh ƒë·ªông c·ªßa hai ng∆∞·ªùi!` });
                }
                break;
            case 'DAU_TRUONG_SINH_TU':
                continueToTwilight = false;
                gs.phase = 'arena_picking';
                gs.roundData.arena = { duelist1: null, duelist2: null, bets: {} };
                if (decreeChooser) {
                    io.to(roomCode).emit('logMessage', { type: 'warning', message: `‚öîÔ∏è ${decreeChooser.name} ƒëang ch·ªçn ra hai ƒê·∫•u Sƒ©!` });
                    io.to(decreeChooser.id).emit('promptArenaPick', { validTargets: gs.players.filter(p => !p.isDefeated).map(p => ({ id: p.id, name: p.name })) });
                }
                break;
        }
    });
    
    if (continueToTwilight) {
        // [S·ª¨A L·ªñI] S·ª≠ d·ª•ng bi·∫øn ƒë√£ ƒë∆∞·ª£c destructuring
        setTimeout(() => startTwilightPhase(roomCode, rooms, io), GAME_CONSTANTS.DECREE_REVEAL_DELAY);
    }
}
function handleAmnesiaAction(roomCode, data, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || gs.phase !== 'amnesia_selection') return;
    const p1 = gs.players.find(p => p.id === data.player1Id);
    const p2 = gs.players.find(p => p.id === data.player2Id);
    if (p1 && p2) {
        [p1.chosenAction, p2.chosenAction] = [p2.chosenAction, p1.chosenAction];
        io.to(roomCode).emit('logMessage', { type: 'warning', message: `üß† H√†nh ƒë·ªông c·ªßa **${p1.name}** v√† **${p2.name}** ƒë√£ b·ªã ho√°n ƒë·ªïi!` });
    }
    startTwilightPhase(roomCode, rooms, io);
}

function handleArenaPick(roomCode, data, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || gs.phase !== 'arena_picking') return;
    gs.roundData.arena.duelist1 = gs.players.find(p => p.id === data.player1Id);
    gs.roundData.arena.duelist2 = gs.players.find(p => p.id === data.player2Id);
    if (!gs.roundData.arena.duelist1 || !gs.roundData.arena.duelist2) return;
    io.to(roomCode).emit('logMessage', { type: 'info', message: `Hai ƒê·∫•u Sƒ©: **${gs.roundData.arena.duelist1.name}** v√† **${gs.roundData.arena.duelist2.name}**!` });
    gs.phase = 'arena_betting';
    const spectators = gs.players.filter(p => !p.isDefeated && p.id !== data.player1Id && p.id !== data.player2Id);
    spectators.forEach(s => {
        io.to(s.id).emit('promptArenaBet', {
            duelist1: { id: gs.roundData.arena.duelist1.id, name: gs.roundData.arena.duelist1.name },
            duelist2: { id: gs.roundData.arena.duelist2.id, name: gs.roundData.arena.duelist2.name },
            maxBet: Math.max(0, Math.min(2, s.score))
        });
    });
    io.to(roomCode).emit('logMessage', { type: 'info', message: `C√°c Kh√°n Gi·∫£ c√≥ 20 gi√¢y ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!` });
    setTimeout(() => resolveArenaDuel(roomCode, rooms, io), 20000);
}

function handleArenaBet(roomCode, playerId, betData, rooms) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || gs.phase !== 'arena_betting') return;
    const player = gs.players.find(p => p.id === playerId);
    if (!player) return;
    const amount = Math.max(0, Math.min(betData.amount, 2, player.score));
    gs.roundData.arena.bets[playerId] = { targetId: betData.targetId, amount };
}

function resolveArenaDuel(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || (gs.phase !== 'arena_betting' && gs.phase !== 'arena_picking')) return;
    gs.phase = 'arena_resolved';
    const { duelist1, duelist2, bets } = gs.roundData.arena;
    if (!duelist1 || !duelist2) return;
    const d1_success = duelist1.chosenAction === duelist2.chosenAction;
    const duelWinner = d1_success ? duelist1 : duelist2;
    io.to(roomCode).emit('logMessage', { type: 'warning', message: `Tr·∫≠n ƒë·∫•u k·∫øt th√∫c! H√†nh ƒë·ªông c·ªßa ${duelist1.name}: **${duelist1.chosenAction}**, c·ªßa ${duelist2.name}: **${duelist2.chosenAction}**.` });
    io.to(roomCode).emit('logMessage', { type: 'success', message: `**${duelWinner.name}** ƒë√£ chi·∫øn th·∫Øng trong tr·∫≠n tay ƒë√¥i!` });
    for (const spectatorId in bets) {
        const bet = bets[spectatorId];
        const spectator = gs.players.find(p => p.id === spectatorId);
        if (spectator) {
            if (bet.targetId === duelWinner.id) {
                spectator.score += bet.amount;
                io.to(spectatorId).emit('privateInfo', { title: "Th·∫Øng C∆∞·ª£c!", text: `B·∫°n ƒëo√°n ƒë√∫ng v√† nh·∫≠n ${bet.amount} Ti·∫øn ƒê·ªô.` });
            } else {
                spectator.score -= bet.amount;
                io.to(spectatorId).emit('privateInfo', { title: "Thua C∆∞·ª£c!", text: `B·∫°n ƒëo√°n sai v√† m·∫•t ${bet.amount} Ti·∫øn ƒê·ªô.` });
            }
        }
    }
    io.to(roomCode).emit('updatePlayerCards', gs.players.map(p => ({id: p.id, score: p.score})));
    setTimeout(() => calculateScoresAndEndRound(roomCode, rooms, io), 4000);
}
         
function startTwilightPhase(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    
    console.log(`[LOGIC] B·∫Øt ƒë·∫ßu Ho√†ng H√¥n. CHAOS_DURATION l√†: ${config.CHAOS_DURATION}`);
    gs.phase = 'twilight';
    
    // =============================================================
    // --- S·ª¨A L·ªñI ---
    // Kh·ªüi t·∫°o Set ƒë·ªÉ theo d√µi nh·ªØng ng∆∞·ªùi b·ªè phi·∫øu trong giai ƒëo·∫°n Ho√†ng H√¥n
    gs.roundData.votesToSkiptwilight = new Set();
    // =============================================================

    io.to(roomCode).emit('twilightPhaseStarted', { duration: GAME_CONSTANTS.CHAOS_DURATION });

    gs.roundData.twilightTimer = setTimeout(() => {
        console.log(`[LOGIC] H·∫øt gi·ªù Giai ƒêo·∫°n Ho√†ng H√¥n.`);
        endTwilightPhase("H·∫øt gi·ªù cho giai ƒëo·∫°n Ho√†ng H√¥n.", roomCode, rooms, io);
    }, GAME_CONSTANTS.CHAOS_DURATION * 1000);
}


function endTwilightPhase(message, roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || (gs.phase !== 'twilight' && gs.phase !== 'reveal_pending')) return;
    
    if (gs.roundData.decrees.some(d => d.id === 'GIAO_UOC_BAT_BUOC')) {
        let penaltyMessage = "Nh·ªØng ng∆∞·ªùi kh√¥ng tu√¢n th·ªß Giao ∆Ø·ªõc B·∫Øt Bu·ªôc ƒë√£ ph·∫£i tr·∫£ gi√°: ";
        let penalized = [];
        gs.players.forEach(p => {
            if(!gs.roundData.actedInTwilight.has(p.id) && !p.isDefeated && !p.isBot) {
                p.score -= 2;
                penalized.push(p.name);
            }
        });
        if(penalized.length > 0) {
             io.to(roomCode).emit('logMessage', { type: 'error', message: penaltyMessage + penalized.join(', ') });
        }
    }

    gs.phase = 'reveal_pending';
    clearTimeout(gs.roundData.twilightTimer);
    io.to(roomCode).emit('chaosActionResolved', { message });
    setTimeout(() => calculateScoresAndEndRound(roomCode, rooms, io), 3000);
}
function handleTwilightAction(roomCode, initiatorId, targetId, actionType, guess, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs || gs.phase !== 'twilight') return;

    const initiator = gs.players.find(p => p.id === initiatorId);
    const target = gs.players.find(p => p.id === targetId);
    if (!initiator || !target || initiator.id === target.id) return;
    
    gs.roundData.actedInTwilight.add(initiator.id);

    const amuletIndex = initiator.artifacts.findIndex(a => a.id === 'AMULET_OF_CLARITY');
    const hasAmulet = amuletIndex !== -1;

    if (target.roleId === 'ASSASSIN') {
        io.to(target.id).emit('privateInfo', { title: 'B·ªã Nh·∫Øm ƒê·∫øn', text: `**${initiator.name}** ƒë√£ V·∫°ch Tr·∫ßn b·∫°n. H√†nh ƒë·ªông b√≠ m·∫≠t c·ªßa h·ªç l√†: **${initiator.chosenAction || 'Ch∆∞a ch·ªçn'}**` });
    }

    if (actionType === 'V·∫°ch Tr·∫ßn') {
        const success = (guess === target.chosenAction);
        let message = `üî• **${initiator.name}** ƒë√£ V·∫°ch Tr·∫ßn **${target.name}** v√† ph√°n ƒëo√°n **${success ? "ƒê√öNG" : "SAI"}**!`;
        
        if (success) {
            const isChallengeDecreeActive = gs.roundData.decrees.some(d => d.id === 'THACH_THUC_KE_DAN_DAU');
            const leaders = getPlayersByScore(gs.players, 'highest');

            if (isChallengeDecreeActive && leaders.some(leader => leader.id === target.id)) {
                [initiator.score, target.score] = [target.score, initiator.score];
                message = `‚öîÔ∏è **${initiator.name}** ƒë√£ th√°ch th·ª©c th√†nh c√¥ng K·∫ª D·∫´n ƒê·∫ßu! ƒêi·ªÉm s·ªë c·ªßa h·ªç ƒë√£ b·ªã ho√°n ƒë·ªïi!`;
            } else {
                // [S·ª¨A L·ªñI] √Åp d·ª•ng hi·ªáu ·ª©ng B√πa khi th√†nh c√¥ng
                const pointGain = hasAmulet ? 4 : 2;
                initiator.score += pointGain;
                target.score -= 2;

                if (initiator.roleId === 'INQUISITOR' && target.chosenAction === 'Ph√° Ho·∫°i') {
                    initiator.score += 1;
                }
                
                const assassin = gs.players.find(p => p.roleId === 'ASSASSIN' && !p.isDefeated);
                if (assassin && assassin.bountyTargetId === target.id) {
                    if (initiator.id === assassin.id) {
                        target.score = Math.floor(target.score / 2);
                        io.to(roomCode).emit('logMessage', { type: 'warning', message: `üí• **${assassin.name}** ƒë√£ ho√†n th√†nh h·ª£p ƒë·ªìng, ƒëi·ªÉm c·ªßa **${target.name}** b·ªã chia ƒë√¥i!` });
                    } else {
                        target.score -= 2;
                        io.to(roomCode).emit('logMessage', { type: 'error', message: `üéØ **${target.name}** l√† m·ª•c ti√™u b·ªã sƒÉn ƒëu·ªïi v√† ph·∫£i ch·ªãu h√¨nh ph·∫°t n·∫∑ng h∆°n!` });
                    }
                }
            }
			 if (initiator.roleId === 'PROPHET') {
                initiator.consecutiveSuccessAccusations = (initiator.consecutiveSuccessAccusations || 0) + 1;
            }
        } else { // V·∫°ch Tr·∫ßn th·∫•t b·∫°i
            // [S·ª¨A L·ªñI] √Åp d·ª•ng hi·ªáu ·ª©ng B√πa khi th·∫•t b·∫°i, ∆∞u ti√™n B√πa h∆°n vai tr√≤
            let pointLoss;
            if (hasAmulet) {
                pointLoss = 1; // B√πa lu√¥n ch·ªâ tr·ª´ 1
            } else if (initiator.roleId === 'PROPHET') {
                pointLoss = 1; // N·∫øu kh√¥ng c√≥ b√πa, Ti√™n Tri tr·ª´ 1
            } else {
                pointLoss = 2; // M·∫∑c ƒë·ªãnh tr·ª´ 2
            }
            
            initiator.score -= pointLoss;
            target.score += 2;
            gs.roundData.failedAccusationsThisRound++;
            
			if (initiator.roleId === 'PROPHET') {
                initiator.consecutiveSuccessAccusations = 0;
            }
        } 
        
        // [GI·ªÆ NGUY√äN] Logic x√≥a b√πa sau khi d√πng l√† ch√≠nh x√°c
		if (hasAmulet) {
            initiator.artifacts.splice(amuletIndex, 1);
            gs.artifactPool.push('AMULET_OF_CLARITY');
            io.to(initiator.id).emit('artifactUpdate', { artifacts: initiator.artifacts });
            io.to(roomCode).emit('logMessage', {type: 'info', message: `B√πa Ch√∫ Minh M·∫´n c·ªßa ${initiator.name} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!`});
        }
        
        io.to(roomCode).emit('logMessage', { type: success ? 'success' : 'error', message });
        io.to(roomCode).emit('updatePlayerCards', gs.players.map(p => ({ id: p.id, score: p.score })));
    }
    
    // Ki·ªÉm tra k·∫øt th√∫c giai ƒëo·∫°n
    const activePlayersCount = gs.players.filter(p => !p.isDefeated && !p.disconnected).length;
    if (gs.roundData.actedInTwilight.size >= activePlayersCount) {
        endTwilightPhase("T·∫•t c·∫£ Th·ª£ SƒÉn ƒë√£ quy·∫øt ƒë·ªãnh h√†nh ƒë·ªông trong ho√†ng h√¥n.", roomCode, rooms, io);
    }
}



function handlePostRoundEvents(roomCode, rooms, io) {
    const gs = rooms[roomCode].gameState;
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho c√°c vai tr√≤
    gs.players.forEach(p => {
        if (!p.isDefeated) {
            if (p.score >= 7) p.hasReached7 = true;
            if (p.score <= -7) p.hasReachedMinus7 = true;
            if (gs.roundData.roundWinners?.includes(p.id) && gs.roundData.roundWinners.length === 1) {
                p.loneWolfWins = (p.loneWolfWins || 0) + 1;
            }
        }
    });

    const winnerByRole = checkRoleVictory(gs);
    const winnersByScore = gs.players.filter(p => p.score >= gs.winScore);
    const losersByScore = gs.players.filter(p => p.score <= gs.loseScore);

    if (winnerByRole || winnersByScore.length > 0 || losersByScore.length > 0) {
        gs.phase = 'gameover';
        let winner = winnerByRole || winnersByScore[0];
        let loser = losersByScore[0];
        let reason = "Tr√≤ ch∆°i k·∫øt th√∫c.";
        if (winner) reason = `Ng∆∞·ªùi chi·∫øn th·∫Øng l√† ${winner.name}! L√Ω do: ` + (winnerByRole ? `ƒë√£ ho√†n th√†nh Thi√™n M·ªánh "${ROLES[winner.roleId].name}"!` : `ƒë·∫°t ${gs.winScore} ƒëi·ªÉm.`);
        else if(loser) reason = `Ng∆∞·ªùi thua cu·ªôc l√† ${loser.name} v√¨ ƒë·∫°t ${gs.loseScore} ƒëi·ªÉm!`;
        io.to(roomCode).emit('gameOver', { winner: winner ? {name: winner.name, reason: reason} : null, loser: loser ? {name: loser.name, reason: reason} : null });
    } else {
        // G·ª≠i t√≠n hi·ªáu ƒë·ªÉ host c√≥ th·ªÉ b·∫Øt ƒë·∫ßu v√≤ng m·ªõi
        const hostSocket = io.sockets.sockets.get(rooms[roomCode].hostId);
        if (hostSocket) {
             // Kh√¥ng c·∫ßn emit s·ª± ki·ªán ri√™ng, client ƒë√£ c√≥ n√∫t sau 'roundResult'
        }
    }
}

function checkRoleVictory(gs) {
    // Ho√†n thi·ªán logic ki·ªÉm tra th·∫Øng
    for (const player of gs.players) {
        if (player.isDefeated) continue;
        let isWinner = false;
        switch (player.roleId) {
            case 'PROPHET':
                isWinner = player.consecutiveSuccessAccusations >= 3 && player.score >= (gs.winScore * 2/3);
                break;
            case 'PEACEMAKER':
                isWinner = gs.consecutiveDraws >= 3;
                break;
            case 'GAMBLER':
                isWinner = player.hasReached7 && player.hasReachedMinus7;
                break;
            case 'REBEL':
                isWinner = player.loneWolfWins >= 3;
                break;
            case 'MIND_BREAKER':
                const totalFailedAccusations = gs.players.reduce((sum, p) => sum + (p.totalFailedAccusations || 0), 0);
                isWinner = totalFailedAccusations >= 5;
                break;
            case 'PHANTOM':
                isWinner = player.hauntSuccessCount >= 5;
                break;
            case 'CULTIST':
                isWinner = player.score <= gs.loseScore;
                break;
        }
        if (isWinner) return player;
    }
    return null;
}


function getPlayersByScore(players, type) {
    const activePlayers = players.filter(p => !p.isDefeated && !p.disconnected);
    if (activePlayers.length === 0) return [];
    const scores = activePlayers.map(p => p.score);
    if (scores.length === 0) return [];
    const criticalScore = type === 'highest' ? Math.max(...scores) : Math.min(...scores);
    return activePlayers.filter(p => p.score === criticalScore);
}



function triggerBotPhaseAction(roomCode, rooms, io, phase) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;

    const bots = gs.players.filter(p => p.isBot && !p.isDefeated);
    
    bots.forEach((bot, index) => {
        // T·∫°o ƒë·ªô tr·ªÖ kh√°c nhau cho m·ªói bot ƒë·ªÉ ch√∫ng kh√¥ng h√†nh ƒë·ªông c√πng l√∫c
        setTimeout(() => {
             // Th√™m roomCode v√†o gameState ƒë·ªÉ AI c√≥ th·ªÉ truy c·∫≠p
            if(gs) gs.roomCode = roomCode;
            BotAI.makeDecision(bot, gs, phase, rooms, io);
        }, 2000 + (index * 1500) + (Math.random() * 1000));
    });
}
function triggerBotChoices(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    
    // [S·ª¨A ƒê·ªîI]
    const bots = gs.players.filter(p => p.isBot && !p.isDefeated && !p.chosenAction);

    bots.forEach((bot, index) => {
        setTimeout(() => {
            if (gs.phase === 'exploration' && !bot.chosenAction) {
                // Th√™m roomCode v√†o gameState ƒë·ªÉ AI c√≥ th·ªÉ truy c·∫≠p
                if(gs) gs.roomCode = roomCode;
                BotAI.makeDecision(bot, gs, 'exploration', rooms, io);
            }
        }, 2000 + (index * 1000) + (Math.random() * 500));
    });
}

function handleUseSkill(socket, roomCode, payload, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    const player = gs.players.find(p => p.id === socket.id);
    if (!player || player.isDefeated || player.isSkillDisabled || player.skillUsedThisRound) {
        return io.to(player.id).emit('privateInfo', { title: 'L·ªói', text: 'Kh√¥ng th·ªÉ d√πng k·ªπ nƒÉng!' });
    }
let messageForRoom;
   let cost = SKILL_COSTS[player.skillUses] ?? SKILL_COSTS[SKILL_COSTS.length - 1];

    if (player.roleId === 'MIMIC' || player.roleId === 'CULTIST') {
        cost = 2; // Chi ph√≠ c·ªë ƒë·ªãnh
    }
    if (player.roleId === 'PHANTOM' && player.freeHaunt) {
        cost = 0; // √Åm mi·ªÖn ph√≠
    }

    if (player.score < cost) {
        return io.to(player.id).emit('privateInfo', { title: 'L·ªói', text: `Kh√¥ng ƒë·ªß Ti·∫øn ƒê·ªô ƒë·ªÉ d√πng k·ªπ nƒÉng (c·∫ßn ${cost})!` });
    }

    // Tr·ª´ ƒëi·ªÉm v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i
    player.score -= cost;
    player.skillUsedThisRound = true;

    // TƒÉng s·ªë l·∫ßn s·ª≠ d·ª•ng SAU KHI ƒë√£ d√πng xong
    player.skillUses++;
    if (player.roleId === 'PHANTOM' && cost === 0) {
        player.freeHaunt = false; // T·∫Øt tr·∫°ng th√°i √°m mi·ªÖn ph√≠
    }

    io.to(roomCode).emit('logMessage', { type: 'info', message: `‚ú® ${player.name} ƒë√£ s·ª≠ d·ª•ng m·ªôt k·ªπ nƒÉng b√≠ ·∫©n...` });
    io.to(roomCode).emit('updatePlayerCards', [{ id: player.id, score: player.score }]);

    // G·ª≠i l·∫°i th√¥ng tin vai tr√≤ v·ªõi chi ph√≠ M·ªöI cho l·∫ßn d√πng ti·∫øp theo
    const roleData = { ...ROLES[player.roleId], id: player.roleId };
    let nextCost = SKILL_COSTS[player.skillUses] ?? SKILL_COSTS[SKILL_COSTS.length - 1];
    if (player.roleId === 'MIMIC' || player.roleId === 'CULTIST') nextCost = 2;
    roleData.currentSkillCost = nextCost;
    io.to(player.id).emit('yourRoleIs', roleData);

    // X·ª≠ l√Ω logic c·ª• th·ªÉ c·ªßa t·ª´ng k·ªπ nƒÉng
    switch (player.roleId) {
        // C√ÅC CASE C·∫¶N CH·ªåN M·ª§C TI√äU
        case 'PROPHET':
        case 'PEACEMAKER':
        case 'PRIEST':
        case 'PHANTOM':
            player.skillTargetId = payload.targetId;
            if (player.roleId === 'PROPHET') {
                const targetPlayer = gs.players.find(p => p.id === payload.targetId);
                if (targetPlayer) io.to(player.id).emit('privateInfo', { title: 'Thi√™n L√Ω Nh√£n', text: `H√†nh ƒë·ªông c·ªßa ${targetPlayer.name} l√†: **${targetPlayer.chosenAction || 'Ch∆∞a ch·ªçn'}**.` });
            }
            break;
           
        case 'MIND_BREAKER':
            const targetPlayer = gs.players.find(p => p.id === payload.targetId);
            if (targetPlayer && payload.chosenAction) {
                targetPlayer.chosenAction = payload.chosenAction;
                messageForRoom = `üß† M·ªôt th·∫ø l·ª±c v√¥ h√¨nh ƒë√£ ƒëi·ªÅu khi·ªÉn h√†nh ƒë·ªông c·ªßa **${targetPlayer.name}**.`;
                io.to(roomCode).emit('playerChose', targetPlayer.id);
            }
            break;
		case 'MIMIC':
            // [S·ª¨A ƒê·ªîI TO√ÄN B·ªò CASE N√ÄY]
            const mimicTarget = gs.players.find(p => p.id === player.mimicTargetId);
            if (!mimicTarget) {
                io.to(player.id).emit('privateInfo', { title: 'Th·∫•t B·∫°i', text: 'Kh√¥ng t√¨m th·∫•y m·ª•c ti√™u ƒë·ªÉ b·∫Øt ch∆∞·ªõc!' });
                // Ho√†n l·∫°i chi ph√≠ v√¨ kh√¥ng th·ªÉ th·ª±c hi·ªán
                player.score += cost;
                if (player.skillUses > 0) player.skillUses--;
                io.to(roomCode).emit('updatePlayerCards', [{ id: player.id, score: player.score }]);
                return; // D·ª´ng th·ª±c thi
            }

            const targetRole = ROLES[mimicTarget.roleId];
            if (!targetRole.hasActiveSkill) {
                io.to(player.id).emit('privateInfo', { title: 'Th·∫•t B·∫°i', text: `${mimicTarget.name} (${targetRole.name}) kh√¥ng c√≥ k·ªπ nƒÉng k√≠ch ho·∫°t ƒë·ªÉ b·∫°n b·∫Øt ch∆∞·ªõc.` });
                // Ho√†n l·∫°i chi ph√≠
                player.score += cost;
                if (player.skillUses > 0) player.skillUses--;
                io.to(roomCode).emit('updatePlayerCards', [{ id: player.id, score: player.score }]);
                return;
            }

            // Ghi ƒë√® t·∫°m th·ªùi payload ƒë·ªÉ d√πng k√©
            // Ng∆∞·ªùi ch∆°i Mimic s·∫Ω ch·ªçn m·ª•c ti√™u cho k·ªπ nƒÉng m√† h·ªç m∆∞·ª£n
            const borrowedPayload = payload; 
            
            io.to(roomCode).emit('logMessage', { type: 'info', message: `üé≠ **${player.name}** ƒëang b·∫Øt ch∆∞·ªõc k·ªπ nƒÉng c·ªßa **${targetRole.name}**!` });
            
            // "M∆∞·ª£n" logic c·ªßa vai tr√≤ m·ª•c ti√™u
            // L∆∞u √Ω: Bi·∫øn 'player' ·ªü ƒë√¢y v·∫´n l√† ng∆∞·ªùi ch∆°i Mimic
            const originalRoleId = player.roleId;
            player.roleId = mimicTarget.roleId; // T·∫°m th·ªùi ƒë·ªïi vai tr√≤ ƒë·ªÉ v√†o ƒë√∫ng case
            
            // G·ªçi l·∫°i ch√≠nh h√†m n√†y v·ªõi payload ƒë√£ c√≥
            // ƒêi·ªÅu n√†y tr√°nh vi·ªác ph·∫£i vi·∫øt l·∫°i logic c·ªßa t·∫•t c·∫£ c√°c k·ªπ nƒÉng kh√°c
            handleUseSkill(socket, roomCode, borrowedPayload, rooms, io);

            // Kh√¥i ph·ª•c l·∫°i vai tr√≤ g·ªëc sau khi th·ª±c hi·ªán xong
            player.roleId = originalRoleId; 
            return;
            break;
			// C√ÅC CASE K√çCH HO·∫†T ƒê·ªÇ X·ª¨ L√ù CU·ªêI V√íNG
        case 'MAGNATE':
        case 'THIEF':
        case 'DOUBLE_AGENT':
            player.skillActive = true;
            player.skillTargetId = payload.targetId;
            break;
            
        case 'GAMBLER':
            player.skillActive = true;
            player.gamblerBet = payload.chosenFaction;
            messageForRoom = `üí∞ ${player.name} ƒë√£ ƒë·∫∑t c∆∞·ª£c t·∫•t tay!`;
            break;
            
        case 'REBEL':
            player.skillActive = true;
            player.rebelDeclaration = payload.declaredAction;
            player.rebelPunishTarget = payload.punishTargetId;
            messageForRoom = `üì¢ ${player.name} ƒë√£ ƒë∆∞a ra m·ªôt l·ªùi tuy√™n b·ªë th√°ch th·ª©c!`;
            break;
        case 'INQUISITOR':
            const sabotageCount = gs.players.filter(p => !p.isDefeated && p.chosenAction === 'Ph√° Ho·∫°i').length;
            if (sabotageCount > 0) {
                gs.players.forEach(p => { if (p.chosenAction === 'Ph√° Ho·∫°i') p.score -= sabotageCount; });
                messageForRoom = `‚öñÔ∏è **${player.name}** th·ª±c thi PH√ÅN QUY·∫æT! ${sabotageCount} k·∫ª Ph√° Ho·∫°i ƒë√£ b·ªã tr·ª´ng ph·∫°t!`;
                io.to(roomCode).emit('updatePlayerCards', gs.players.map(p => ({ id: p.id, score: p.score })));
            }
            break;
        case 'BALANCER':
            const activePlayers = gs.players.filter(p => !p.isDefeated && !p.disconnected);
            const highestPlayers = getPlayersByScore(activePlayers, 'highest');
            const lowestPlayers = getPlayersByScore(activePlayers, 'lowest');

            // Ki·ªÉm tra xem c√≥ c·∫£ nh√≥m cao nh·∫•t v√† th·∫•p nh·∫•t, v√† hai nh√≥m n√†y kh√¥ng ph·∫£i l√† m·ªôt
            if (highestPlayers.length > 0 && lowestPlayers.length > 0 && highestPlayers[0].score !== lowestPlayers[0].score) {
                
                // L·∫•y ra m·ª©c ƒëi·ªÉm cao nh·∫•t v√† th·∫•p nh·∫•t
                const highestScore = highestPlayers[0].score;
                const lowestScore = lowestPlayers[0].score;

                // T√≠nh ƒëi·ªÉm trung b√¨nh m·ªõi
                const avgScore = Math.round((highestScore + lowestScore) / 2);

                // C·∫≠p nh·∫≠t ƒëi·ªÉm cho T·∫§T C·∫¢ ng∆∞·ªùi ch∆°i trong nh√≥m cao nh·∫•t
                highestPlayers.forEach(p => {
                    p.score = avgScore;
                });

                // C·∫≠p nh·∫≠t ƒëi·ªÉm cho T·∫§T C·∫¢ ng∆∞·ªùi ch∆°i trong nh√≥m th·∫•p nh·∫•t
                lowestPlayers.forEach(p => {
                    p.score = avgScore;
                });

                // T·∫°o th√¥ng b√°o v√† g·ª≠i c·∫≠p nh·∫≠t cho t·∫•t c·∫£ client
                 const affectedPlayerNames = [...highestPlayers, ...lowestPlayers].map(p => p.name);
                messageForRoom = `üìàüìâ ${player.name} ƒë√£ t√°i ph√¢n b·ªë l·∫°i ƒëi·ªÉm s·ªë! ƒêi·ªÉm c·ªßa ${affectedPlayerNames.join(', ')} ƒë√£ ƒë∆∞·ª£c c√¢n b·∫±ng.`;
                io.to(roomCode).emit('updatePlayerCards', gs.players.map(p => ({id: p.id, score: p.score})));
            } else {
                // G·ª≠i ph·∫£n h·ªìi n·∫øu kh√¥ng th·ªÉ d√πng k·ªπ nƒÉng
                io.to(player.id).emit('privateInfo', { title: 'Th·∫•t B·∫°i', text: 'Kh√¥ng th·ªÉ t√°i ph√¢n b·ªë ƒëi·ªÉm s·ªë l√∫c n√†y.' });
                // Ho√†n l·∫°i chi ph√≠ k·ªπ nƒÉng cho ng∆∞·ªùi ch∆°i v√¨ k·ªπ nƒÉng kh√¥ng c√≥ t√°c d·ª•ng
               player.score += cost; 
if (player.skillUses > 0) { // Ch·ªâ gi·∫£m n·∫øu ƒë√£ t·ª´ng d√πng
    player.skillUses--; 
}
io.to(roomCode).emit('updatePlayerCards', [{ id: player.id, score: player.score }]);
			}
            
            break;
        case 'CULTIST':
            const effects = ['see_role', 'disable_skill', 'triple_vote'];
            const randomEffect = effects[Math.floor(Math.random() * effects.length)];
            const otherPlayers = gs.players.filter(p => p.id !== player.id && !p.isDefeated);
            if (otherPlayers.length > 0) {
                if (randomEffect === 'see_role') {
                    const randomPlayer = otherPlayers[Math.floor(Math.random() * otherPlayers.length)];
                    io.to(player.id).emit('privateInfo', {title: 'Nghi L·ªÖ H·∫Øc √Åm', text: `B·∫°n th·∫•y vai tr√≤ c·ªßa ${randomPlayer.name} l√†: **${ROLES[randomPlayer.roleId].name}**`});
                } else if (randomEffect === 'disable_skill') {
                    const randomPlayer = otherPlayers[Math.floor(Math.random() * otherPlayers.length)];
                    randomPlayer.isSkillDisabled = true;
                    messageForRoom = `üíÄ Nghi l·ªÖ ƒë√£ v√¥ hi·ªáu h√≥a k·ªπ nƒÉng c·ªßa m·ªôt ng∆∞·ªùi!`;
                } else {
                    player.hasTripleVote = true;
                    messageForRoom = `üíÄ Nghi l·ªÖ ƒë√£ c∆∞·ªùng h√≥a l√° phi·∫øu c·ªßa ${player.name}!`;
                }
            }
            break;
        
    }
    if (messageForRoom) io.to(roomCode).emit('logMessage', { type: 'info', message: messageForRoom });
}

function calculateScoresAndEndRound(roomCode, rooms, io) {
    const gs = rooms[roomCode]?.gameState;
    if (!gs) return;
    gs.phase = 'reveal';

    // [S·ª¨A L·ªñI - MIMIC] B·ªï sung logic sao ch√©p h√†nh ƒë·ªông c·ªßa K·∫ª B·∫Øt Ch∆∞·ªõc
    // Ph·∫£i th·ª±c hi·ªán tr∆∞·ªõc khi t√≠nh to√°n b·∫•t c·ª© th·ª© g√¨.
    const mimics = gs.players.filter(p => p.roleId === 'MIMIC' && !p.isDefeated && p.mimicTargetId);
    mimics.forEach(mimic => {
        const target = gs.players.find(p => p.id === mimic.mimicTargetId);
        if (target) {
            mimic.chosenAction = target.chosenAction;
            // Th√¥ng b√°o cho K·∫ª B·∫Øt Ch∆∞·ªõc v·ªÅ h√†nh ƒë·ªông ƒë√£ sao ch√©p (t√πy ch·ªçn)
            io.to(mimic.id).emit('privateInfo', {
                title: 'Sao Ch√©p Th√†nh C√¥ng',
                text: `B·∫°n ƒë√£ sao ch√©p h√†nh ƒë·ªông **${mimic.chosenAction || 'Kh√¥ng l√†m g√¨'}** c·ªßa ${target.name}.`
            });
        }
    });
    // K·∫øt th√∫c s·ª≠a l·ªói Mimic

    const results = { messages: [], roundSummary: [], isDraw: false, winner: null, roundWinners: [] };
    const activePlayers = gs.players.filter(p => !p.isDefeated && !p.disconnected);
    if (activePlayers.length === 0) return handlePostRoundEvents(roomCode, rooms, io);


    activePlayers.forEach(p => {
        results.roundSummary.push({
            id: p.id, name: p.name, oldScore: p.score, newScore: 0,
            changes: [], chosenAction: p.chosenAction,
            actionWasNullified: gs.roundData.votesToSkip?.has(p.id) || p.roleId === 'PHANTOM'
        });
    });

    const applyPointChange = (playerId, amount, reason) => {
        const summary = results.roundSummary.find(s => s.id === playerId);
        if (!summary || amount === 0) return;

        // [C·∫¨P NH·∫¨T] X·ª≠ l√Ω B√πa H·ªô Th√¢n (Golden Ward)
        const player = gs.players.find(p => p.id === playerId);
        const wardIndex = player.artifacts.findIndex(a => a.id === 'GOLDEN_WARD');
        if (wardIndex !== -1 && amount < 0) {
            player.artifacts.splice(wardIndex, 1);
            gs.artifactPool.push('GOLDEN_WARD');
            io.to(player.id).emit('artifactUpdate', { artifacts: player.artifacts });
            io.to(roomCode).emit('logMessage', { type: 'info', message: `B√πa H·ªô Th√¢n ƒë√£ b·∫£o v·ªá ${player.name} kh·ªèi b·ªã m·∫•t ƒëi·ªÉm!` });
            return; // V√¥ hi·ªáu h√≥a vi·ªác m·∫•t ƒëi·ªÉm
        }
        summary.changes.push({ reason, amount });
    };
	// B∆Ø·ªöC 0: X·ª¨ L√ù HI·ªÜU ·ª®NG H√ÄNH ƒê·ªòNG
    activePlayers.forEach(p => {
        if (p.chosenAction === 'Gi·∫£i M√£') {
            const rand = Math.random();
            if (rand < 0.10) handleFindArtifact(p, 'Th√°m Hi·ªÉm', gs, io);
            else if (rand < 0.40) applyPointChange(p.id, 1, 'May m·∫Øn khi Gi·∫£i M√£');
        } else if (p.chosenAction === 'Ph√° Ho·∫°i') {
            const rand = Math.random();
            if (rand < 0.10) handleFindArtifact(p, 'H·ªón Lo·∫°n', gs, io);
            else if (rand < 0.40) {
                const target = gs.players.find(t => t.id === p.sabotageTargetId);
                if (target) applyPointChange(target.id, -1, `B·ªã ${p.name} Ph√° Ho·∫°i`);
            }
        }
    });

    // B∆Ø·ªöC 1 & 2: THI·∫æT L·∫¨P T·ªî H·ª¢P & ƒê·∫æM PHI·∫æU CU·ªêI C√ôNG
    const successfulPairs = [];
    (gs.roundData.coordinationVotes || []).forEach(vote => {
        const initiator = activePlayers.find(p => p.id === vote.initiatorId);
        const target = activePlayers.find(p => p.id === vote.targetId);

        if (initiator && target && initiator.chosenAction === target.chosenAction) {
            successfulPairs.push([initiator.id, target.id]);
        } else if (initiator) {
            applyPointChange(initiator.id, -1, 'Ph·ªëi h·ª£p th·∫•t b·∫°i');
        }
    });

    const parent = {};
    const find = (i) => {
        if (parent[i] === i) return i;
        parent[i] = find(parent[i]);
        return parent[i];
    };
    const union = (i, j) => {
        const rootI = find(i);
        const rootJ = find(j);
        if (rootI !== rootJ) parent[rootJ] = rootI;
    };

    activePlayers.forEach(p => { parent[p.id] = p.id; });
    successfulPairs.forEach(pair => union(pair[0], pair[1]));

    const groups = {};
    activePlayers.forEach(p => {
        const root = find(p.id);
        if (!groups[root]) groups[root] = [];
        groups[root].push(p);
    });

    let finalVotes = { 'Gi·∫£i M√£': 0, 'Ph√° Ho·∫°i': 0, 'Quan S√°t': 0 };
    for (const rootId in groups) {
        const group = groups[rootId];
        const firstPlayerInGroup = group[0];
        
        const representativeSummary = results.roundSummary.find(s => s.id === firstPlayerInGroup.id);
        if (firstPlayerInGroup.chosenAction && !representativeSummary.actionWasNullified) {
             finalVotes[firstPlayerInGroup.chosenAction]++;
        }
       
        if (group.length > 1) {
            results.messages.push(`üë• Nh√≥m [${group.map(p => p.name).join(', ')}] ƒë√£ h√†nh ƒë·ªông nh∆∞ m·ªôt!`);
        }
    }

    // B∆Ø·ªöC 3: C√îNG B·ªê K·∫æT QU·∫¢ ƒê√äM
    const loyalVotes = finalVotes['Gi·∫£i M√£'];
    const corruptVotes = finalVotes['Ph√° Ho·∫°i'];
    const isPhanXetDaoNguoc = gs.roundData.decrees.some(d => d.id === 'PHAN_XET_DAO_NGUOC');
    const isDraw = (loyalVotes === corruptVotes) || (loyalVotes > 0 && corruptVotes === 0) || (corruptVotes > 0 && loyalVotes === 0);

    if (isDraw) {
        results.isDraw = true;
        gs.consecutiveDraws++;
        results.messages.push("‚öñÔ∏è K·∫øt qu·∫£ l√† H√íA!");
    } else {
        const loyalWins = isPhanXetDaoNguoc ? (loyalVotes > corruptVotes) : (loyalVotes < corruptVotes);
        results.winner = loyalWins ? 'Gi·∫£i M√£' : 'Ph√° Ho·∫°i'; // S·ª¨A L·ªñI LOGIC NH·ªé ·ªû ƒê√ÇY
        results.roundWinners = activePlayers.filter(p => p.chosenAction === results.winner).map(p => p.id);
        gs.consecutiveDraws = 0;
        results.messages.push(`üèÜ Phe **${results.winner}** th·∫Øng!`);
    }
    
    // B∆Ø·ªöC 4: √ÅP D·ª§NG ƒêI·ªÇM C∆† B·∫¢N
     if (results.isDraw) {
        const observerCount = finalVotes['Quan S√°t'];
        const observerThreshold = Math.floor(activePlayers.length / 2);
        if (observerCount === 0) {
            activePlayers.forEach(p => applyPointChange(p.id, -1, 'H√≤a cu·ªôc (kh√¥ng c√≥ Quan s√°t)'));
        } else if (observerCount < observerThreshold) {
            activePlayers.forEach(p => {
                if (p.chosenAction !== 'Quan S√°t') applyPointChange(p.id, -1, 'H√≤a cu·ªôc (√≠t Quan s√°t)');
            });
        } else {
            activePlayers.forEach(p => {
                const amount = p.chosenAction === 'Quan S√°t' ? -1 : 1;
                applyPointChange(p.id, amount, 'H√≤a cu·ªôc (nhi·ªÅu Quan s√°t)');
            });
        }
    } else {
        const loser = results.winner === 'Gi·∫£i M√£' ? 'Ph√° Ho·∫°i' : 'Gi·∫£i M√£';
        const observerCount = finalVotes['Quan S√°t'];
        const observerThreshold = Math.floor(activePlayers.length / 2);

        activePlayers.forEach(p => {
            if (p.chosenAction === results.winner) {
                applyPointChange(p.id, 2, 'Thu·ªôc phe th·∫Øng');
                if (observerCount >= observerThreshold) {
                    applyPointChange(p.id, 1, 'H∆∞·ªüng l·ª£i t·ª´ Quan s√°t');
                }
            } else if (p.chosenAction === loser) {
                applyPointChange(p.id, -1, 'Thu·ªôc phe thua');
            } else if (p.chosenAction === 'Quan S√°t') {
                if (observerCount < observerThreshold) {
                    applyPointChange(p.id, 3, 'Quan s√°t theo phe th·∫Øng');
                } else {
                    applyPointChange(p.id, -1, 'Quan s√°t qu√° ƒë√¥ng');
                }
            }
        });

        if (observerCount >= observerThreshold) {
            results.messages.push(`üëÅÔ∏è Phe Quan S√°t qu√° ƒë√¥ng, h·ªç b·ªã ph·∫°t v√† phe th·∫Øng ƒë∆∞·ª£c h∆∞·ªüng l·ª£i!`);
        } else if (observerCount > 0) {
            results.messages.push(`üëÅÔ∏è Phe Quan S√°t √≠t v√† ƒë√£ ƒëo√°n ƒë√∫ng, nh·∫≠n ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÉm th∆∞·ªüng!`);
        }
    }
	  activePlayers.forEach(p => {
        const rand = Math.random(); // Quay s·ªë m·ªôt l·∫ßn duy nh·∫•t
        if (p.chosenAction === 'Gi·∫£i M√£') {
            if (rand < 0.10) { // 10% nh·∫≠n c·ªï v·∫≠t
                const artifactPool = Object.values(config.ARTIFACTS).filter(a => a.type === 'Th√°m Hi·ªÉm');
                const foundArtifact = artifactPool[Math.floor(Math.random() * artifactPool.length)];
                p.artifacts.push(foundArtifact); // Th√™m v√†o t√∫i ƒë·ªì
                io.to(p.id).emit('artifactUpdate', { 
                    artifact: foundArtifact, 
                    message: `Trong l√∫c gi·∫£i m√£, b·∫°n ƒë√£ t√¨m th·∫•y: ${foundArtifact.name}!`
                });
            } else if (rand < 0.40) { // 30% ti·∫øp theo (t·ªïng 40%) nh·∫≠n 1 ƒëi·ªÉm
                applyPointChange(p.id, 1, 'May m·∫Øn khi Gi·∫£i M√£');
            }
        } else if (p.chosenAction === 'Ph√° Ho·∫°i') {
             // Logic Ph√° Ho·∫°i m·ªõi s·∫Ω c·∫ßn m·ª•c ti√™u
             // T·∫°m th·ªùi ƒë·ªÉ logic t√¨m c·ªï v·∫≠t ·ªü ƒë√¢y
             if (rand < 0.10) { // 10% nh·∫≠n c·ªï v·∫≠t
                const artifactPool = Object.values(config.ARTIFACTS).filter(a => a.type === 'H·ªón Lo·∫°n');
                const foundArtifact = artifactPool[Math.floor(Math.random() * artifactPool.length)];
                p.artifacts.push(foundArtifact);
                io.to(p.id).emit('artifactUpdate', { 
                    artifact: foundArtifact, 
                    message: `Trong l√∫c ph√° ho·∫°i, b·∫°n ƒë√£ nh·∫∑t ƒë∆∞·ª£c: ${foundArtifact.name}!`
                });
            }
        }
    });
 // =================================================================================
    // B∆Ø·ªöC 5: √ÅP D·ª§NG ƒêI·ªÇM T·ª™ K·ª∏ NƒÇNG, N·ªòI T·∫†I & TI·∫æNG V·ªåNG
    // =================================================================================

    // --- 5.1: X·ª¨ L√ù C√ÅC K·ª∏ NƒÇNG ƒê√É ƒê∆Ø·ª¢C K√çCH HO·∫†T ---
    activePlayers.forEach(player => {
        if (player.skillActive) {
            switch (player.roleId) {
                case 'MAGNATE':
                    const magnateTarget = activePlayers.find(p => p.id === player.skillTargetId);
                    if (magnateTarget && !results.isDraw && magnateTarget.chosenAction === results.winner) {
                        applyPointChange(player.id, 2, 'K·ªπ nƒÉng ƒê·∫ßu T∆∞');
                        applyPointChange(magnateTarget.id, 2, 'ƒê∆∞·ª£c ƒê·∫ßu T∆∞');
                        results.messages.push(`üìà Nh√† T√†i Phi·ªát ƒë√£ ƒë·∫ßu t∆∞ th√†nh c√¥ng v√†o **${magnateTarget.name}**!`);
                    }
                    break;

                case 'THIEF':
                    const thiefTargetSummary = results.roundSummary.find(s => s.id === player.skillTargetId);
                    if (thiefTargetSummary) {
                        // Ch·ªâ t√≠nh ƒëi·ªÉm C·ªòNG t·ª´ c√°c b∆∞·ªõc tr∆∞·ªõc
                        const targetGained = thiefTargetSummary.changes
                            .filter(c => c.amount > 0)
                            .reduce((sum, change) => sum + change.amount, 0);
                        
                        if (targetGained > 0) {
                            const stolenAmount = Math.floor(targetGained / 2);
                            if (stolenAmount > 0) {
                                applyPointChange(player.id, stolenAmount, 'K·ªπ nƒÉng M√≥c T√∫i');
                                applyPointChange(thiefTargetSummary.id, -stolenAmount, 'B·ªã M√≥c T√∫i');
                                results.messages.push(`üí∏ K·∫ª Tr·ªôm ƒë√£ m√≥c t√∫i ${stolenAmount} ƒëi·ªÉm t·ª´ **${thiefTargetSummary.name}**!`);
                            }
                        }
                    }
                    break;
                
                case 'GAMBLER':
                    if (player.gamblerBet && !results.isDraw) {
                        if (player.gamblerBet === results.winner) {
                            applyPointChange(player.id, 8, 'K·ªπ nƒÉng T·∫•t Tay');
                            results.messages.push(`üí∞ **${player.name}** ƒë√£ th·∫Øng l·ªõn trong canh b·∫°c c·ªßa m√¨nh!`);
                        } else {
                            applyPointChange(player.id, -4, 'K·ªπ nƒÉng T·∫•t Tay');
                            results.messages.push(`üí∏ **${player.name}** ƒë√£ thua trong canh b·∫°c c·ªßa m√¨nh!`);
                        }
                    }
                    break;

                case 'REBEL':
                    if (player.rebelDeclaration && player.rebelPunishTarget) {
                        if (finalVotes[player.rebelDeclaration] === 1 && player.chosenAction === player.rebelDeclaration && !results.roundSummary.find(s=>s.id === player.id).actionWasNullified) {
                            const costPaid = config.SKILL_COSTS[player.skillUses - 1] || config.SKILL_COSTS[config.SKILL_COSTS.length - 1];
                            const punishment = Math.max(1, costPaid);
                            const punishTarget = activePlayers.find(p => p.id === player.rebelPunishTarget);
                            if (punishTarget) {
                                applyPointChange(punishTarget.id, -punishment, 'B·ªã Khi√™u kh√≠ch');
                                results.messages.push(`üì¢ Tuy√™n b·ªë c·ªßa K·∫ª N·ªïi Lo·∫°n **${player.name}** ƒë√£ th√†nh c√¥ng! **${punishTarget.name}** b·ªã tr·ª´ng ph·∫°t.`);
                            }
                        }
                    }
                    break;
                
                case 'PHANTOM':
                    const hauntTargetSummary = results.roundSummary.find(s => s.id === player.skillTargetId);
                    if (hauntTargetSummary) {
                        const targetGained = hauntTargetSummary.changes.filter(c => c.amount > 0).reduce((sum, change) => sum + change.amount, 0);
                        if (targetGained > 0) {
                            applyPointChange(hauntTargetSummary.id, -1, 'B·ªã √Åm Qu·∫ª');
                            applyPointChange(player.id, 1, '√Åm Qu·∫ª th√†nh c√¥ng');
                            player.hauntSuccessCount = (player.hauntSuccessCount || 0) + 1;
                            player.freeHaunt = true;
                            results.messages.push(`üëª **${player.name}** ƒë√£ √°m qu·∫ª th√†nh c√¥ng **${hauntTargetSummary.name}**!`);
                        }
                    }
                    break;
            }
        }
    });


    // --- 5.2: X·ª¨ L√ù C√ÅC N·ªòI T·∫†I B·ªä ƒê·ªòNG & TI·∫æNG V·ªåNG ·∫¢NH H∆Ø·ªûNG ƒêI·ªÇM ---
    activePlayers.forEach(player => {
        const summary = results.roundSummary.find(s => s.id === player.id);
        
        switch (player.roleId) {
            case 'PEACEMAKER':
                if (results.isDraw) applyPointChange(player.id, 1, 'N·ªôi t·∫°i H√≤a B√¨nh');
                break;
            case 'GAMBLER':
                let totalLoss = 0;
                summary.changes.forEach(change => { if (change.amount < 0) totalLoss += change.amount; });
                if (totalLoss < 0) {
                    summary.changes = summary.changes.filter(c => c.amount >= 0); // X√≥a c√°c thay ƒë·ªïi √¢m
                    const newLoss = Math.random() < 0.5 ? Math.floor(totalLoss / 2) : totalLoss * 2;
                    applyPointChange(player.id, newLoss, 'N·ªôi t·∫°i ƒê√°nh C∆∞·ª£c');
                }
                break;
            case 'MAGNATE':
                const currentChangeForMagnate = summary.changes.reduce((sum, c) => sum + c.amount, 0);
                if ((player.score + currentChangeForMagnate) > 0) applyPointChange(player.id, 1, 'N·ªôi t·∫°i T√†i Phi·ªát');
                else if ((player.score + currentChangeForMagnate) < 0) applyPointChange(player.id, -1, 'N·ªôi t·∫°i T√†i Phi·ªát');
                break;
            case 'THIEF':
                let losersCount = activePlayers.filter(p => results.roundSummary.find(s => s.id === p.id).changes.reduce((sum, c) => sum + c.amount, 0) < 0).length;
                if (losersCount >= 2) applyPointChange(player.id, Math.floor(losersCount / 2), 'N·ªôi t·∫°i K·∫ª Tr·ªôm');
                break;
            case 'MIND_BREAKER':
                if (gs.roundData.failedAccusationsThisRound > 0) applyPointChange(player.id, gs.roundData.failedAccusationsThisRound * 2, 'N·ªôi t·∫°i T·∫©y N√£o');
                break;
            case 'CULTIST':
                summary.changes.forEach(change => { if (change.amount < 0) change.amount = Math.min(0, change.amount + 1); });
                break;
            case 'DOUBLE_AGENT':
                if (!results.isDraw && player.chosenAction !== results.winner) applyPointChange(player.id, 1, 'N·ªôi t·∫°i K·∫ª Hai Mang');
                break;
            case 'PHANTOM':
                applyPointChange(player.id, 1, 'N·ªôi t·∫°i B√≥ng Ma');
                break;
        }
    });
// 5.3: C√ÅC TI·∫æNG V·ªåNG ·∫¢NH H∆Ø·ªûNG ƒê·∫æN ƒêI·ªÇM
    if (gs.roundData.decrees.some(d => d.id === 'CONG_NAP')) {
        const highestPlayer = getPlayersByScore(activePlayers, 'highest')[0];
        const lowestPlayer = getPlayersByScore(activePlayers, 'lowest')[0];
        if (highestPlayer && lowestPlayer && highestPlayer.id !== lowestPlayer.id) {
            applyPointChange(highestPlayer.id, -2, 'C·ªëng N·∫°p');
            applyPointChange(lowestPlayer.id, 2, 'Nh·∫≠n C·ªëng N·∫°p');
        }
    }
    if (gs.roundData.decrees.some(d => d.id === 'LOI_NGUYEN_HI_HA')) {
        const playersFellToNegative = activePlayers.some(p => {
            const summary = results.roundSummary.find(s => s.id === p.id);
            const change = summary.changes.reduce((sum, c) => sum + c.amount, 0);
            return (p.score > 0 && (p.score + change) < 0);
        });
        if (playersFellToNegative) {
            activePlayers.forEach(p => {
                const summary = results.roundSummary.find(s => s.id === p.id);
                const currentChange = summary.changes.reduce((sum, c) => sum + c.amount, 0);
                const finalScore = p.score + currentChange;
                if (finalScore < 0) {
                    // Reset ƒëi·ªÉm v·ªÅ 0 b·∫±ng c√°ch c·ªông b√π l·∫°i
                    applyPointChange(p.id, -finalScore, 'L·ªùi Nguy·ªÅn H·ªâ H·∫£');
                } else if (finalScore > 0) {
                    applyPointChange(p.id, -1, 'Ph·∫°t v√¨ "h·∫£ h√™"');
                }
            });
        }
    }

	 // =================================================================================
    // B∆Ø·ªöC 6: T·ªîNG K·∫æT & √ÅP D·ª§NG C√ÅC MODIFIER CU·ªêI C√ôNG
    // =================================================================================

    // --- 6.1: √Åp d·ª•ng Ti·∫øng V·ªçng thay ƒë·ªïi to√†n b·ªô ƒëi·ªÉm s·ªë ---
    if (gs.roundData.decrees.some(d => d.id === 'VU_NO_HU_VO') && results.isDraw) {
        activePlayers.forEach(p => {
            const summary = results.roundSummary.find(s => s.id === p.id);
            summary.changes = [{ reason: 'V·ª• N·ªï H∆∞ V√¥', amount: -p.score }];
        });
        results.messages.push(`üí• V·ª§ N·ªî H∆Ø V√î! ƒêi·ªÉm c·ªßa m·ªçi ng∆∞·ªùi ƒë√£ v·ªÅ 0!`);
    } else if (gs.roundData.decrees.some(d => d.id === 'DEM_SUY_TAN')) {
        activePlayers.forEach(p => {
            const isLoser = !results.isDraw && p.chosenAction !== results.winner;
            if (results.isDraw || isLoser) {
                const summary = results.roundSummary.find(s => s.id === p.id);
                const currentChange = summary.changes.reduce((sum, c) => sum + c.amount, 0);
                const scoreBeforeHalving = p.score + currentChange;
                const loss = Math.floor(scoreBeforeHalving / 2) - scoreBeforeHalving;
                if (loss < 0) {
                    applyPointChange(p.id, loss, 'ƒê√™m Suy T√†n');
                }
            }
        });
        results.messages.push(`üìâ ƒê√äM SUY T√ÄN! Nh·ªØng k·∫ª th·∫•t b·∫°i ƒë√£ b·ªã tr·ª´ng ph·∫°t n·∫∑ng n·ªÅ!`);
    }

    // --- 6.2: √Åp d·ª•ng Ti·∫øng V·ªçng nh√¢n ƒë√¥i ƒëi·ªÉm (Lu√¥n l√† b∆∞·ªõc cu·ªëi c√πng tr∆∞·ªõc khi c·∫≠p nh·∫≠t) ---
    if (gs.roundData.decrees.some(d => d.id === 'VONG_AM_KHUECH_DAI')) {
        results.roundSummary.forEach(summary => {
            summary.changes.forEach(change => {
                change.amount *= 2;
            });
        });
        results.messages.push(`üîä V·ªåNG √ÇM KHU·∫æCH ƒê·∫†I! M·ªçi ƒëi·ªÉm s·ªë ƒë·ªÅu ƒë∆∞·ª£c nh√¢n ƒë√¥i!`);
    }

    // --- 6.3: C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë cu·ªëi c√πng v√†o state ---
   activePlayers.forEach(p => {
        const summary = results.roundSummary.find(s => s.id === p.id);
        const finalTotalChange = summary.changes.reduce((sum, change) => sum + change.amount, 0);
        p.score += finalTotalChange;
        summary.newScore = p.score;
    });

    io.to(roomCode).emit('roundResult', {
        roundNumber: gs.currentRound,
        players: gs.players,
        results,
        finalVoteCounts: finalVotes
    });

    handlePostRoundEvents(roomCode, rooms, io);
}

module.exports = {
    createGameState, startNewRound, handlePlayerChoice, handleCoordination, revealDecreeAndContinue,
    handleTwilightAction, handleUseSkill, handleAmnesiaAction, handleArenaPick, handleArenaBet,
    handleVoteToSkip, triggerBotPhaseAction, calculateScoresAndEndRound, handlePostRoundEvents, checkRoleVictory,
    resetRoomForRematch,
    handleArtifactDecision,
};